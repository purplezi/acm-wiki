{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CUC ACM-Wiki\uff01 \u00b6 Contents \u00b6 2020\u6625\u5b63\u96c6\u8bad\u5b89\u6392 C\u8bed\u8a00\u57fa\u7840 \u57fa\u7840\u7b97\u6cd5 STL \u56fe\u8bba DP \u6570\u8bba \u5982\u4f55\u53c2\u4e0e\u672c\u9879\u76ee","title":"\u4e3b\u9875"},{"location":"#welcome-to-cuc-acm-wiki","text":"","title":"Welcome to CUC ACM-Wiki\uff01"},{"location":"#contents","text":"2020\u6625\u5b63\u96c6\u8bad\u5b89\u6392 C\u8bed\u8a00\u57fa\u7840 \u57fa\u7840\u7b97\u6cd5 STL \u56fe\u8bba DP \u6570\u8bba \u5982\u4f55\u53c2\u4e0e\u672c\u9879\u76ee","title":"Contents"},{"location":"2020Spring/","text":"\u4f7f\u7528\u5e73\u53f0 \u00b6 \u505a\u9898\u4ecd\u4f7f\u7528 Virtual Judge \uff0c\u8bad\u7ec3\u540d\u79f0\u524d\u7f00\u4e3a\u201cCUC-2020-Spring Training\u201d\u3002\u79ef\u5206\u89c4\u5219\u540c\u4e0a\u5b66\u671f\u3002 \u6388\u8bfe\u4f7f\u7528 Bilibili \u76f4\u64ad\u6216\u63d0\u524d\u5236\u4f5c\u597d\u89c6\u9891\u4e0a\u4f20\uff0c\u6bcf\u6b21\u4e0a\u8bfe\u524d\u4f1a\u5728QQ\u7fa4\u91cc\u63d0\u524d\u901a\u77e5\u623f\u95f4\u53f7\u6216\u89c6\u9891\u5730\u5740\u3002 \u8bb2\u5e08\u540d\u5355 \u00b6 \u65f6\u95f4 \u5185\u5bb9\u5b89\u6392 \u8bb2\u5e08 \u7b2c1\u5468 2\u670826\u65e5 14:00-18:00 2020\u6625\u5b63\u8bad\u7ec3\u5f00\u8425\u4eea\u5f0f \u9ec4\u73ae \u8001\u5e08 \u5468\u4e09 2\u670826\u65e5 14:00-18:00 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 \u738b\u660e\u6708/\u5415\u4e5d\u6d0b \u5468\u516d 2\u670829\u65e5 14:00-18:00 STL\u7b80\u5355\u7ed3\u6784\u548c\u7528\u6cd5\uff08map,set,multiset,\u4f18\u5148\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff09\u3001bitset \u5218\u5b97\u946b \u7b2c2\u5468 3\u67084\u65e5 14:00-18:00 \u5c3a\u53d6\u3001\u4e8c\u5206\u3001STL\u91cc\u7684\u4e8c\u5206\u3001\u500d\u589e \u674e\u6668\u66e6 3\u67087\u65e5 14:00-18:00 \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 \u738b\u51ac\u971e/\u5b97\u5b50\u94b0 \u7b2c3\u5468 3\u670811\u65e5\uff08\u5468\u4e09\uff0913:30-17:00 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 \u8346\u8587 3\u670814\u65e5\uff08\u5468\u516d\uff0913:30-17:00 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 \u8346\u8587 \u7b2c4\u5468 \u4ee5\u4e0b\u65f6\u95f4\u540c\u4e0a \u5dee\u5206\u7ea6\u675f\u3001\u4e8c\u5206\u56fe\u3001\u4e8c\u5206\u56fe\u5339\u914d \u9093\u695a\u76df \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf \u674e\u7b19\u6da6 \u7b2c5\u5468 LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ \u5218\u9ece\u660e \u56fe\u8bba\u7684\u4e13\u9898\u6bd4\u8d5b \u5b97\u5b50\u94b0 \u7b2c6\u5468 \u80cc\u5305DP\u3001\u6811\u4e0aDP \u9ec4\u5f6a \u72b6\u6001\u538b\u7f29DP\u3001\u533a\u95f4DP \u9ec4\u5f6a \u7b2c7\u5468 \u6570\u4f4dDP\u3001\u6982\u7387DP\u3001\u8ba1\u6570DP \u66f9\u53ef\u610f DP\u7684\u4e13\u9898\u6bd4\u8d5b \u66f9\u53ef\u610f \u7b2c8\u5468 \u6570\u8bba\u4e00 ) \u6570\u8bba\u4e8c\u3001\u7ec4\u5408\u6570\u5b66\u3001\u7ecf\u5178\u6570\u5217 \u5415\u4e5d\u6d0b \u7b2c9\u5468 \u535a\u5f08 \u5415\u4e5d\u6d0b \u6570\u5b66\u535a\u5f08\u7684\u4e13\u9898\u6bd4\u8d5b \u8d75\u7d2b\u5982 \u7b2c10\u5468 \u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u3001\u5e76\u67e5\u96c6 \u5218\u5b97\u946b \u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u57fa\u7840 \u63ed\u9752\u83b9 \u7b2c11\u5468 \u7ebf\u6bb5\u6811\u8fdb\u9636 \u9648\u4ed5\u67cf \u70b9\u5206\u6cbb\u3001\u6811\u94fe\u5256\u5206 \u674e\u6668\u66e6 \u63ed\u9752\u83b9 \u7b2c12\u5468 \u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 \u63ed\u9752\u83b9 \u6570\u636e\u7ed3\u6784\u4e13\u9898\u6bd4\u8d5b \u9648\u4ed5\u67cf \u7b2c13\u5468 Trie\u3001KMP \u9093\u695a\u76df \u5b57\u7b26\u54c8\u5e0c\u3001\u56de\u6587\u4e32\u3001AC\u81ea\u52a8\u673a \u9093\u695a\u76df \u5b66\u5458\u540d\u5355 \u00b6 \uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u4e13\u4e1a \u59d3\u540d 17\u5e94\u7edf \u6a0a\u73d1 18\u7535\u4fe1 \u7518\u96e8\u5349 18\u8ba1\u79d1 \u9648\u53ef\u60a6 18\u8ba1\u79d1 \u9ad8\u8363\u5d0e 18\u8ba1\u79d1 \u90ed\u66e6\u7428 18\u8ba1\u79d1 \u8bb8\u53ef 18\u8f6f\u5de5 \u5218\u51a0\u5b87 18\u8f6f\u5de5 \u8096\u5b50\u840c 18\u6570\u79d1 \u66fe\u9510 18\u6570\u5a92\u6280 \u9ad8\u5609\u603f 18\u6570\u5a92\u6280 \u674e\u7b19\u6da6 18\u6570\u5a92\u6280 \u5b8b\u6cfd\u9716 18\u901a\u4fe1 \u5f20\u5a49\u8398 18\u7f51\u5de5 \u66fe\u7965\u6d69 18\u7f51\u5de5 \u51b7\u6797\u5bcc 18\u4fe1\u5b89 \u9648\u827e\u837b 18\u4fe1\u5b89 \u9ad8\u7545 18\u4fe1\u5b89 \u738b\u6210\u745e 18\u4fe1\u5b89 \u738b\u51ac\u971e 18\u4fe1\u5b89 \u738b\u660e\u6708 18\u4fe1\u5b89 \u4e8e\u68a6\u4e3d 19\u7535\u4fe1 \u8d3a\u9756\u831c 19\u7535\u4fe1 \u738b\u94ed 19\u5e7f\u7535\u5de5 \u675c\u715c 19\u5e7f\u7535\u5de5 \u4e93\u6cfd\u9c81 19\u5e7f\u7535\u5de5 \u9b4f\u671d\u9633 19\u8ba1\u79d1 \u5eb7\u7b71\u6db5 19\u8ba1\u79d1 \u5ed6\u827a\u9896 19\u8ba1\u79d1 \u4ee4\u72d0\u6653\u7389 19\u8ba1\u79d1 \u5218\u8bd7\u539f 19\u8ba1\u79d1 \u5218\u8212\u745c 19\u8ba1\u79d1 \u5218\u601d\u6e90 19\u8ba1\u79d1 \u5218\u5fc6\u8339 19\u8ba1\u79d1 \u8983\u6d0b\u6d0b 19\u8ba1\u79d1 \u5b8b\u6625\u9896 19\u8ba1\u79d1 \u738b\u794e\u7490 19\u8ba1\u79d1 \u8d75\u6da6\u6cfd 19\u8ba1\u79d1 \u5468\u7490\u7476 19\u8ba1\u79d1 \u5de6\u7ee7\u5218\u7545 19\u6570\u79d1 \u6768\u5955\u6b23 19\u6570\u5a92\u6280 \u9ec4\u84c9 19\u6570\u5a92\u6280 \u674e\u7f8e\u83b9 19\u901a\u4fe1 \u6bb5\u5bb6\u5e05 19\u901a\u4fe1 \u8d3a\u9a9e\u6167 19\u901a\u4fe1 \u5b5f\u7533 19\u901a\u4fe1 \u8983\u9759\u620e 19\u901a\u4fe1 \u5f20\u5065 19\u7f51\u5de5 \u8d39\u7ea2\u679d 19\u7f51\u5de5 \u5de9\u5b87\u8fb0 19\u7f51\u5de5 \u90ed\u632f\u6210 19\u7f51\u5de5 \u9ec4\u6615\u6b23 19\u7f51\u5de5 \u5e9e\u5b87\u8f69 19\u4fe1\u5b89 \u5f6d\u5b5f\u771f 19\u4fe1\u5b89 \u738b\u67cf\u7fd4 19\u4fe1\u5b89 \u8bb8\u6cfd\u6797 19\u4fe1\u5b89 \u8881\u5b50\u6052 19\u4fe1\u5b89 \u5f20\u534e\u777f 19\u81ea\u52a8\u5316 \u674e\u656c\u8d6b","title":"\u8bfe\u7a0b\u5b89\u6392"},{"location":"2020Spring/#_1","text":"\u505a\u9898\u4ecd\u4f7f\u7528 Virtual Judge \uff0c\u8bad\u7ec3\u540d\u79f0\u524d\u7f00\u4e3a\u201cCUC-2020-Spring Training\u201d\u3002\u79ef\u5206\u89c4\u5219\u540c\u4e0a\u5b66\u671f\u3002 \u6388\u8bfe\u4f7f\u7528 Bilibili \u76f4\u64ad\u6216\u63d0\u524d\u5236\u4f5c\u597d\u89c6\u9891\u4e0a\u4f20\uff0c\u6bcf\u6b21\u4e0a\u8bfe\u524d\u4f1a\u5728QQ\u7fa4\u91cc\u63d0\u524d\u901a\u77e5\u623f\u95f4\u53f7\u6216\u89c6\u9891\u5730\u5740\u3002","title":"\u4f7f\u7528\u5e73\u53f0"},{"location":"2020Spring/#_2","text":"\u65f6\u95f4 \u5185\u5bb9\u5b89\u6392 \u8bb2\u5e08 \u7b2c1\u5468 2\u670826\u65e5 14:00-18:00 2020\u6625\u5b63\u8bad\u7ec3\u5f00\u8425\u4eea\u5f0f \u9ec4\u73ae \u8001\u5e08 \u5468\u4e09 2\u670826\u65e5 14:00-18:00 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 \u738b\u660e\u6708/\u5415\u4e5d\u6d0b \u5468\u516d 2\u670829\u65e5 14:00-18:00 STL\u7b80\u5355\u7ed3\u6784\u548c\u7528\u6cd5\uff08map,set,multiset,\u4f18\u5148\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff09\u3001bitset \u5218\u5b97\u946b \u7b2c2\u5468 3\u67084\u65e5 14:00-18:00 \u5c3a\u53d6\u3001\u4e8c\u5206\u3001STL\u91cc\u7684\u4e8c\u5206\u3001\u500d\u589e \u674e\u6668\u66e6 3\u67087\u65e5 14:00-18:00 \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 \u738b\u51ac\u971e/\u5b97\u5b50\u94b0 \u7b2c3\u5468 3\u670811\u65e5\uff08\u5468\u4e09\uff0913:30-17:00 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 \u8346\u8587 3\u670814\u65e5\uff08\u5468\u516d\uff0913:30-17:00 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 \u8346\u8587 \u7b2c4\u5468 \u4ee5\u4e0b\u65f6\u95f4\u540c\u4e0a \u5dee\u5206\u7ea6\u675f\u3001\u4e8c\u5206\u56fe\u3001\u4e8c\u5206\u56fe\u5339\u914d \u9093\u695a\u76df \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf \u674e\u7b19\u6da6 \u7b2c5\u5468 LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ \u5218\u9ece\u660e \u56fe\u8bba\u7684\u4e13\u9898\u6bd4\u8d5b \u5b97\u5b50\u94b0 \u7b2c6\u5468 \u80cc\u5305DP\u3001\u6811\u4e0aDP \u9ec4\u5f6a \u72b6\u6001\u538b\u7f29DP\u3001\u533a\u95f4DP \u9ec4\u5f6a \u7b2c7\u5468 \u6570\u4f4dDP\u3001\u6982\u7387DP\u3001\u8ba1\u6570DP \u66f9\u53ef\u610f DP\u7684\u4e13\u9898\u6bd4\u8d5b \u66f9\u53ef\u610f \u7b2c8\u5468 \u6570\u8bba\u4e00 ) \u6570\u8bba\u4e8c\u3001\u7ec4\u5408\u6570\u5b66\u3001\u7ecf\u5178\u6570\u5217 \u5415\u4e5d\u6d0b \u7b2c9\u5468 \u535a\u5f08 \u5415\u4e5d\u6d0b \u6570\u5b66\u535a\u5f08\u7684\u4e13\u9898\u6bd4\u8d5b \u8d75\u7d2b\u5982 \u7b2c10\u5468 \u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u3001\u5e76\u67e5\u96c6 \u5218\u5b97\u946b \u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u57fa\u7840 \u63ed\u9752\u83b9 \u7b2c11\u5468 \u7ebf\u6bb5\u6811\u8fdb\u9636 \u9648\u4ed5\u67cf \u70b9\u5206\u6cbb\u3001\u6811\u94fe\u5256\u5206 \u674e\u6668\u66e6 \u63ed\u9752\u83b9 \u7b2c12\u5468 \u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 \u63ed\u9752\u83b9 \u6570\u636e\u7ed3\u6784\u4e13\u9898\u6bd4\u8d5b \u9648\u4ed5\u67cf \u7b2c13\u5468 Trie\u3001KMP \u9093\u695a\u76df \u5b57\u7b26\u54c8\u5e0c\u3001\u56de\u6587\u4e32\u3001AC\u81ea\u52a8\u673a \u9093\u695a\u76df","title":"\u8bb2\u5e08\u540d\u5355"},{"location":"2020Spring/#_3","text":"\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u4e13\u4e1a \u59d3\u540d 17\u5e94\u7edf \u6a0a\u73d1 18\u7535\u4fe1 \u7518\u96e8\u5349 18\u8ba1\u79d1 \u9648\u53ef\u60a6 18\u8ba1\u79d1 \u9ad8\u8363\u5d0e 18\u8ba1\u79d1 \u90ed\u66e6\u7428 18\u8ba1\u79d1 \u8bb8\u53ef 18\u8f6f\u5de5 \u5218\u51a0\u5b87 18\u8f6f\u5de5 \u8096\u5b50\u840c 18\u6570\u79d1 \u66fe\u9510 18\u6570\u5a92\u6280 \u9ad8\u5609\u603f 18\u6570\u5a92\u6280 \u674e\u7b19\u6da6 18\u6570\u5a92\u6280 \u5b8b\u6cfd\u9716 18\u901a\u4fe1 \u5f20\u5a49\u8398 18\u7f51\u5de5 \u66fe\u7965\u6d69 18\u7f51\u5de5 \u51b7\u6797\u5bcc 18\u4fe1\u5b89 \u9648\u827e\u837b 18\u4fe1\u5b89 \u9ad8\u7545 18\u4fe1\u5b89 \u738b\u6210\u745e 18\u4fe1\u5b89 \u738b\u51ac\u971e 18\u4fe1\u5b89 \u738b\u660e\u6708 18\u4fe1\u5b89 \u4e8e\u68a6\u4e3d 19\u7535\u4fe1 \u8d3a\u9756\u831c 19\u7535\u4fe1 \u738b\u94ed 19\u5e7f\u7535\u5de5 \u675c\u715c 19\u5e7f\u7535\u5de5 \u4e93\u6cfd\u9c81 19\u5e7f\u7535\u5de5 \u9b4f\u671d\u9633 19\u8ba1\u79d1 \u5eb7\u7b71\u6db5 19\u8ba1\u79d1 \u5ed6\u827a\u9896 19\u8ba1\u79d1 \u4ee4\u72d0\u6653\u7389 19\u8ba1\u79d1 \u5218\u8bd7\u539f 19\u8ba1\u79d1 \u5218\u8212\u745c 19\u8ba1\u79d1 \u5218\u601d\u6e90 19\u8ba1\u79d1 \u5218\u5fc6\u8339 19\u8ba1\u79d1 \u8983\u6d0b\u6d0b 19\u8ba1\u79d1 \u5b8b\u6625\u9896 19\u8ba1\u79d1 \u738b\u794e\u7490 19\u8ba1\u79d1 \u8d75\u6da6\u6cfd 19\u8ba1\u79d1 \u5468\u7490\u7476 19\u8ba1\u79d1 \u5de6\u7ee7\u5218\u7545 19\u6570\u79d1 \u6768\u5955\u6b23 19\u6570\u5a92\u6280 \u9ec4\u84c9 19\u6570\u5a92\u6280 \u674e\u7f8e\u83b9 19\u901a\u4fe1 \u6bb5\u5bb6\u5e05 19\u901a\u4fe1 \u8d3a\u9a9e\u6167 19\u901a\u4fe1 \u5b5f\u7533 19\u901a\u4fe1 \u8983\u9759\u620e 19\u901a\u4fe1 \u5f20\u5065 19\u7f51\u5de5 \u8d39\u7ea2\u679d 19\u7f51\u5de5 \u5de9\u5b87\u8fb0 19\u7f51\u5de5 \u90ed\u632f\u6210 19\u7f51\u5de5 \u9ec4\u6615\u6b23 19\u7f51\u5de5 \u5e9e\u5b87\u8f69 19\u4fe1\u5b89 \u5f6d\u5b5f\u771f 19\u4fe1\u5b89 \u738b\u67cf\u7fd4 19\u4fe1\u5b89 \u8bb8\u6cfd\u6797 19\u4fe1\u5b89 \u8881\u5b50\u6052 19\u4fe1\u5b89 \u5f20\u534e\u777f 19\u81ea\u52a8\u5316 \u674e\u656c\u8d6b","title":"\u5b66\u5458\u540d\u5355"},{"location":"FAQ/","text":"F.A.Q \u00b6 \u8fd9\u4e2a\u7f51\u7ad9\u662f\u5e72\u4ec0\u4e48\u7528\u7684\uff1f \u00b6 \u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u5185\u5bb9 \u53d1\u5e03\u4e2d\u56fd\u4f20\u5a92\u5927\u5b66ACM\u96c6\u8bad\u961f\u76f8\u5173\u5b89\u6392 \u4e3a\u4ec0\u4e48\u663e\u793a\u6211\u63d0\u4ea4\u5931\u8d25\u4e86\uff1f \u00b6 Travis\u53ea\u5bf9 master \u5206\u652f\u8fdb\u884c\u7f51\u9875\u6e32\u67d3\uff0c\u53ea\u8981\u4ed3\u5e93\u6536\u5230\u60a8\u7684PR\u5c31\u53ef\u4ee5\u4e86\u3002 \u5bf9\u63d0\u4ea4\u7684\u6587\u6863\u6709\u8981\u6c42\u5417\uff1f \u00b6 \u9996\u5148\u8981\u4fdd\u8bc1\u5185\u5bb9\u53d1\u6b63\u786e\u6027\u548c\u4e25\u8c28\u6027\u3002\u5176\u6b21\u6211\u4eec\u5e0c\u671b\u60a8\u53ef\u4ee5\u591a\u4e00\u4e9b\u8bb2\u89e3\u548c\u56fe\u793a\uff0c\u5c3d\u91cf\u4fbf\u4e8e\u5176\u4ed6\u4eba\u7406\u89e3\u3002\u76ee\u524d\u53ea\u63a5\u53d7markdown\u6587\u4ef6\u3002 \u76ee\u524d\u7684\u5185\u5bb9\u597d\u5c11\u554a... \u00b6 \u662f\u7684\uff0c\u76ee\u524d\u7f51\u7ad9\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5f53\u524d\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a\u8fd9\u4e2a\u7f51\u7ad9\u5b8c\u5584\u8d77\u6765\u3002\u6211\u4eec\u671f\u5f85\u60a8\u7684PR\u3002","title":"F.A.Q"},{"location":"FAQ/#faq","text":"","title":"F.A.Q"},{"location":"FAQ/#_1","text":"\u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u5185\u5bb9 \u53d1\u5e03\u4e2d\u56fd\u4f20\u5a92\u5927\u5b66ACM\u96c6\u8bad\u961f\u76f8\u5173\u5b89\u6392","title":"\u8fd9\u4e2a\u7f51\u7ad9\u662f\u5e72\u4ec0\u4e48\u7528\u7684\uff1f"},{"location":"FAQ/#_2","text":"Travis\u53ea\u5bf9 master \u5206\u652f\u8fdb\u884c\u7f51\u9875\u6e32\u67d3\uff0c\u53ea\u8981\u4ed3\u5e93\u6536\u5230\u60a8\u7684PR\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u4e3a\u4ec0\u4e48\u663e\u793a\u6211\u63d0\u4ea4\u5931\u8d25\u4e86\uff1f"},{"location":"FAQ/#_3","text":"\u9996\u5148\u8981\u4fdd\u8bc1\u5185\u5bb9\u53d1\u6b63\u786e\u6027\u548c\u4e25\u8c28\u6027\u3002\u5176\u6b21\u6211\u4eec\u5e0c\u671b\u60a8\u53ef\u4ee5\u591a\u4e00\u4e9b\u8bb2\u89e3\u548c\u56fe\u793a\uff0c\u5c3d\u91cf\u4fbf\u4e8e\u5176\u4ed6\u4eba\u7406\u89e3\u3002\u76ee\u524d\u53ea\u63a5\u53d7markdown\u6587\u4ef6\u3002","title":"\u5bf9\u63d0\u4ea4\u7684\u6587\u6863\u6709\u8981\u6c42\u5417\uff1f"},{"location":"FAQ/#_4","text":"\u662f\u7684\uff0c\u76ee\u524d\u7f51\u7ad9\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5f53\u524d\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a\u8fd9\u4e2a\u7f51\u7ad9\u5b8c\u5584\u8d77\u6765\u3002\u6211\u4eec\u671f\u5f85\u60a8\u7684PR\u3002","title":"\u76ee\u524d\u7684\u5185\u5bb9\u597d\u5c11\u554a..."},{"location":"intro/","text":"\u7f51\u7ad9\u5efa\u8bbe \u00b6 \u7f51\u7ad9\u4eff\u7167 OI-Wiki \u57fa\u4e8e mkdocs \u8bbe\u8ba1\uff0c\u7528\u4e8e\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u76f8\u5173\u7684\u5185\u5bb9\u3002\u652f\u6301 markdown \u548c LaTeX \u8bed\u6cd5\u3002 \u672c\u9879\u76ee\u6258\u7ba1\u5728GitHub\u7684 repo \u4e2d\uff0c\u7531Travis\u81ea\u52a8\u90e8\u7f72\u3002 master \u5206\u652f\u4e0b\u4e3a\u76f8\u5173\u6587\u6863\uff0c gh-page \u5206\u652f\u4e0b\u4e3a\u7f51\u9875\u3002 \u79fb\u52a8\u7aef \u00b6 \u624b\u673a\u79fb\u52a8\u7aef\u76ee\u5f55\u6811\u5728\u5de6\u4e0a\u89d2\uff0c\u4e5f\u53ef\u5728\u53f3\u4e0b\u89d2\u7ffb\u9875\u3002 \u5982\u4f55\u53c2\u4e0e \u00b6 \u5982\u679c\u60a8\u6709\u610f\u5411\u53c2\u4e0e\u8d21\u732e\uff0c\u5e76\u5728\u4ed3\u5e93 master \u5206\u652f /docs \u76ee\u5f55\u4e0b\u6dfb\u52a0 markdown\u6587\u4ef6\uff0c\u5e76\u5728 mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\u3002\u7136\u540e pull request \u5c31\u53ef\u4ee5\u4e86\u3002\u8bf7\u5728 commit message \u5927\u81f4\u8bf4\u660e\u8fdb\u884c\u4e86\u54ea\u4e9b\u64cd\u4f5c\u3002 \u6587\u6863\u5b58\u50a8\u683c\u5f0f \u00b6 \u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c\u5982 file-name \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u60a8\u7684\u6587\u6863\u4e2d\u5f15\u7528\u7684 \u5916\u94fe \u56fe\u7247\u5df2\u7ecf\u5168\u90e8\u8f6c\u5b58\u5230\u4e86 \u672c\u5e93\u5185 \u5bf9\u5e94\u7684 img \u6587\u4ef6\u5939\u4e2d\uff0c\u5efa\u8bae\u5904\u7406\u6210 MD \u6587\u6863\u540d\u79f0 + \u7f16\u53f7 \u7684\u5f62\u5f0f\uff1b\uff08\u5373\u683c\u5f0f\u4e3a ![\u63cf\u8ff0\u4fe1\u606f](img/example-1.jpg) \uff09\u3002 \u8054\u7cfb\u65b9\u5f0f \u00b6 Issue / QQ: 3208413453","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"intro/#_1","text":"\u7f51\u7ad9\u4eff\u7167 OI-Wiki \u57fa\u4e8e mkdocs \u8bbe\u8ba1\uff0c\u7528\u4e8e\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u76f8\u5173\u7684\u5185\u5bb9\u3002\u652f\u6301 markdown \u548c LaTeX \u8bed\u6cd5\u3002 \u672c\u9879\u76ee\u6258\u7ba1\u5728GitHub\u7684 repo \u4e2d\uff0c\u7531Travis\u81ea\u52a8\u90e8\u7f72\u3002 master \u5206\u652f\u4e0b\u4e3a\u76f8\u5173\u6587\u6863\uff0c gh-page \u5206\u652f\u4e0b\u4e3a\u7f51\u9875\u3002","title":"\u7f51\u7ad9\u5efa\u8bbe"},{"location":"intro/#_2","text":"\u624b\u673a\u79fb\u52a8\u7aef\u76ee\u5f55\u6811\u5728\u5de6\u4e0a\u89d2\uff0c\u4e5f\u53ef\u5728\u53f3\u4e0b\u89d2\u7ffb\u9875\u3002","title":"\u79fb\u52a8\u7aef"},{"location":"intro/#_3","text":"\u5982\u679c\u60a8\u6709\u610f\u5411\u53c2\u4e0e\u8d21\u732e\uff0c\u5e76\u5728\u4ed3\u5e93 master \u5206\u652f /docs \u76ee\u5f55\u4e0b\u6dfb\u52a0 markdown\u6587\u4ef6\uff0c\u5e76\u5728 mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\u3002\u7136\u540e pull request \u5c31\u53ef\u4ee5\u4e86\u3002\u8bf7\u5728 commit message \u5927\u81f4\u8bf4\u660e\u8fdb\u884c\u4e86\u54ea\u4e9b\u64cd\u4f5c\u3002","title":"\u5982\u4f55\u53c2\u4e0e"},{"location":"intro/#_4","text":"\u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c\u5982 file-name \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u60a8\u7684\u6587\u6863\u4e2d\u5f15\u7528\u7684 \u5916\u94fe \u56fe\u7247\u5df2\u7ecf\u5168\u90e8\u8f6c\u5b58\u5230\u4e86 \u672c\u5e93\u5185 \u5bf9\u5e94\u7684 img \u6587\u4ef6\u5939\u4e2d\uff0c\u5efa\u8bae\u5904\u7406\u6210 MD \u6587\u6863\u540d\u79f0 + \u7f16\u53f7 \u7684\u5f62\u5f0f\uff1b\uff08\u5373\u683c\u5f0f\u4e3a ![\u63cf\u8ff0\u4fe1\u606f](img/example-1.jpg) \uff09\u3002","title":"\u6587\u6863\u5b58\u50a8\u683c\u5f0f"},{"location":"intro/#_5","text":"Issue / QQ: 3208413453","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"STL/bitset/","text":"\u7528\u9014 \u00b6 \u7c7b\u4f3c\u6570\u7ec4\u7684\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u53ea\u80fd\u662f\uff10\u6216\uff11\uff0c\u6bcf\u4e2a\u5143\u7d20\u4ec5\u7528\uff11bit\u7a7a\u95f4\u3002\u7528\u5b83\u5b58\u50a8\u6570\u636e\u56de\u6bd4\u7528\u6570\u7ec4\u7701\u7a7a\u95f4\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <bitset> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 bitset < length > name ; \u5373\u5b9a\u4e49\u6709length\u4f4d\u7684bitset\u3002 \u5143\u7d20\u8bbf\u95ee \u00b6 \u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u67d0\u4e00\u4f4d \u00b6 \u5de6\u8fb9\u4f4d\u4f4e\u4f4d\uff0c\u53f3\u8fb9\u4e3a\u9ad8\u4f4d\u3002 1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit [ 0 ] << endl ; } \u8f93\u51fa 1 1 \u76f4\u63a5\u8f93\u51fa\u5168\u90e8\u4f4d\u6570 \u00b6 1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit << endl ; } \u8f93\u51fa\uff1a 1 00011001 \u6784\u9020\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570 \u4f5c\u7528 bitset< length > bit \u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u9ed8\u8ba4\u5168\u4e3a0 bitset< length > bit(string) \u5c06string\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\uff0c\u8981\u6c42string\u5fc5\u987b\u753101\u6784\u6210\uff0c\u957f\u5ea6\u4e0d\u8db3\u5b9a\u4e49\u957f\u5ea6\u65f6\uff0c\u6309\u7167\u653e\u5728\u4f4e\u4f4d bitset< length > bit( char[] ) \u540c\u4e0a bitset< length > bit(val) \u5c06val\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u653e\u5728bitset\u4e2d \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u4f5c\u7528 bit.size() \u8fd4\u56de\u5927\u5c0f\uff08\u4f4d\u6570\uff09 bit.count() \u8fd4\u56de1\u7684\u4e2a\u6570 bit.any() \u8fd4\u56de\u662f\u5426\u67091 bit.none() \u8fd4\u56de\u662f\u5426\u6ca1\u67091 bit.set() \u5168\u90fd\u53d8\u62101 bit.set(p) \u5c06\u7b2c\u4f4d\u7f6ep\u53d8\u62101 bit.set(p, x) \u5c06\u4f4d\u7f6ep\u53d8\u6210x bit.reset() \u5168\u90fd\u53d8\u62100 bit.reset(p) \u5c06\u4f4d\u7f6ep\u53d8\u62100 bit.flip() \u5168\u90fd\u53d6\u53cd bit.flip(p) \u5c06\u4f4d\u7f6ep\u53d6\u53cd bit.to_ulong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_ullong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_string() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3astring\u7684\u7ed3\u679c \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u4e8c\u8fdb\u5236\u76f8\u5173\u64cd\u4f5c \u8282\u7701\u7a7a\u95f4","title":"Bitset"},{"location":"STL/bitset/#_1","text":"\u7c7b\u4f3c\u6570\u7ec4\u7684\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u53ea\u80fd\u662f\uff10\u6216\uff11\uff0c\u6bcf\u4e2a\u5143\u7d20\u4ec5\u7528\uff11bit\u7a7a\u95f4\u3002\u7528\u5b83\u5b58\u50a8\u6570\u636e\u56de\u6bd4\u7528\u6570\u7ec4\u7701\u7a7a\u95f4\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <bitset>","title":"\u7528\u9014"},{"location":"STL/bitset/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/bitset/#_3","text":"1 bitset < length > name ; \u5373\u5b9a\u4e49\u6709length\u4f4d\u7684bitset\u3002","title":"\u5b9a\u4e49"},{"location":"STL/bitset/#_4","text":"","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/bitset/#_5","text":"\u5de6\u8fb9\u4f4d\u4f4e\u4f4d\uff0c\u53f3\u8fb9\u4e3a\u9ad8\u4f4d\u3002 1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit [ 0 ] << endl ; } \u8f93\u51fa 1 1","title":"\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u67d0\u4e00\u4f4d"},{"location":"STL/bitset/#_6","text":"1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit << endl ; } \u8f93\u51fa\uff1a 1 00011001","title":"\u76f4\u63a5\u8f93\u51fa\u5168\u90e8\u4f4d\u6570"},{"location":"STL/bitset/#_7","text":"\u6784\u9020\u51fd\u6570 \u4f5c\u7528 bitset< length > bit \u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u9ed8\u8ba4\u5168\u4e3a0 bitset< length > bit(string) \u5c06string\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\uff0c\u8981\u6c42string\u5fc5\u987b\u753101\u6784\u6210\uff0c\u957f\u5ea6\u4e0d\u8db3\u5b9a\u4e49\u957f\u5ea6\u65f6\uff0c\u6309\u7167\u653e\u5728\u4f4e\u4f4d bitset< length > bit( char[] ) \u540c\u4e0a bitset< length > bit(val) \u5c06val\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u653e\u5728bitset\u4e2d","title":"\u6784\u9020\u51fd\u6570"},{"location":"STL/bitset/#_8","text":"\u51fd\u6570 \u4f5c\u7528 bit.size() \u8fd4\u56de\u5927\u5c0f\uff08\u4f4d\u6570\uff09 bit.count() \u8fd4\u56de1\u7684\u4e2a\u6570 bit.any() \u8fd4\u56de\u662f\u5426\u67091 bit.none() \u8fd4\u56de\u662f\u5426\u6ca1\u67091 bit.set() \u5168\u90fd\u53d8\u62101 bit.set(p) \u5c06\u7b2c\u4f4d\u7f6ep\u53d8\u62101 bit.set(p, x) \u5c06\u4f4d\u7f6ep\u53d8\u6210x bit.reset() \u5168\u90fd\u53d8\u62100 bit.reset(p) \u5c06\u4f4d\u7f6ep\u53d8\u62100 bit.flip() \u5168\u90fd\u53d6\u53cd bit.flip(p) \u5c06\u4f4d\u7f6ep\u53d6\u53cd bit.to_ulong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_ullong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_string() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3astring\u7684\u7ed3\u679c","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/bitset/#_9","text":"\u4e8c\u8fdb\u5236\u76f8\u5173\u64cd\u4f5c \u8282\u7701\u7a7a\u95f4","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/introduction/","text":"\u4ec0\u4e48\u662fSTL\uff1f \u00b6 STL\uff08Standard Template Library\uff09\uff0c\u5373\u6807\u51c6\u6a21\u677f\u5e93\uff0c\u662f\u4e00\u4e2a\u5177\u6709\u5de5\u4e1a\u5f3a\u5ea6\u7684\uff0c\u9ad8\u6548\u7684C++\u7a0b\u5e8f\u5e93\u3002 STL \u501f\u52a9\u6a21\u677f\u5b9e\u73b0\u4e86\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u53ca\u5176\u7b97\u6cd5\uff0c\u5e76\u4e14\u505a\u5230\u4e86\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u5206\u79bb\u3002 STL\u5305\u62ec\u5bb9\u5668\uff08Container\uff09 \u8fed\u4ee3\u5668\uff08Iterator\uff09 \u7b97\u6cd5\uff08Algorithm\uff09 \u4eff\u51fd\u6570\uff08Functor\uff09 \u9002\u914d\u5668\uff08Adaptor\uff09 \u5206\u914d\u5668\uff08Allocator\uff09\u516d\u5927\u7ec4\u4ef6\uff0c\u5728\u7b97\u6cd5\u7ade\u8d5b\u91cc\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002 STL\u90e8\u5206\u7684\u8d21\u732e\u8005 \u00b6 cuccenter \uff0c YanhuiJessica \uff0c LyuLumos","title":"STL\u7b80\u4ecb"},{"location":"STL/introduction/#stl","text":"STL\uff08Standard Template Library\uff09\uff0c\u5373\u6807\u51c6\u6a21\u677f\u5e93\uff0c\u662f\u4e00\u4e2a\u5177\u6709\u5de5\u4e1a\u5f3a\u5ea6\u7684\uff0c\u9ad8\u6548\u7684C++\u7a0b\u5e8f\u5e93\u3002 STL \u501f\u52a9\u6a21\u677f\u5b9e\u73b0\u4e86\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u53ca\u5176\u7b97\u6cd5\uff0c\u5e76\u4e14\u505a\u5230\u4e86\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u5206\u79bb\u3002 STL\u5305\u62ec\u5bb9\u5668\uff08Container\uff09 \u8fed\u4ee3\u5668\uff08Iterator\uff09 \u7b97\u6cd5\uff08Algorithm\uff09 \u4eff\u51fd\u6570\uff08Functor\uff09 \u9002\u914d\u5668\uff08Adaptor\uff09 \u5206\u914d\u5668\uff08Allocator\uff09\u516d\u5927\u7ec4\u4ef6\uff0c\u5728\u7b97\u6cd5\u7ade\u8d5b\u91cc\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002","title":"\u4ec0\u4e48\u662fSTL\uff1f"},{"location":"STL/introduction/#stl_1","text":"cuccenter \uff0c YanhuiJessica \uff0c LyuLumos","title":"STL\u90e8\u5206\u7684\u8d21\u732e\u8005"},{"location":"STL/list/","text":"\u7528\u9014 \u00b6 \u5c31\u662f\u94fe\u8868\uff0c\u5f53\u9700\u8981\u5feb\u901f O(1) O(1) \u7684\u65f6\u95f4\u63d2\u5165\u6216\u8005\u5220\u9664\u65f6\u9700\u8981\u4f7f\u7528\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_set> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 list < type > name ; \u8bbf\u95ee\u5143\u7d20 \u00b6 \u4ec5\u80fd\u4f7f\u7528\u8fed\u4ee3\u5668\u8bbf\u95ee \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include <list> using namespace std ; int main () { list < int > l ; l . push_back ( 1 ); auto it = l . begin (); cout << * it << endl ; } \u8f93\u51fa: 1 1 \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u542b\u4e49 l.begin() \u8fd4\u56de\u94fe\u8868\u9996\u5730\u5740 l.end() \u8fd4\u56de\u94fe\u8868\u5c3e\u5730\u5740 l.front() \u8fd4\u56de\u9996\u5143\u7d20 l.back() \u8fd4\u56de\u5c3e\u5143\u7d20 l.push_back(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5c3e\u90e8 l.push_front(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5934\u90e8 l.empty() \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a l.insert(it, val1, val2)) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20 l.resize(n) \u8c03\u6574\u94fe\u8868\u5927\u5c0f\u4e3an\uff0c\u8d85\u51fan\u5220\u9664\uff0c\u5c11\u4e8en\u88650 l.clear() \u6e05\u9664 l.assign(len, val) \u66ff\u6362\u6240\u6709\u5143\u7d20 l.assign(l2.begin(), l2.end()) \u66ff\u6362\u6240\u6709\u5143\u7d20\u4e3a\u94fe\u8868l2 l.swap(l2) \u4ea4\u6362\u94fe\u8868 l.merge(l2) \u5408\u5e76\u4e24\u4e2a \u6709\u5e8f \u94fe\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u8c03\u7528\u540el2\u4e3a\u7a7a\uff0c\u53ef\u7528greater () l.erase(it) \u5220\u9664\uff08\u533a\u57df\u4e2d\u7684\uff09\u5143\u7d20 l.remove(val) \u5220\u9664\u503c\u4e3aval \u7684\u5143\u7d20 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u9700\u8981\u5feb\u901f\u63d2\u5165\u5220\u9664\u3002 \u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u6a21\u62df\u53cc\u7aef\u961f\u5217 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u63d2\u5165\u5220\u9664 O(1) O(1) \u67e5\u627e O(n) O(n) \uff0c n n \u4e3a\u94fe\u8868\u957f\u5ea6","title":"List"},{"location":"STL/list/#_1","text":"\u5c31\u662f\u94fe\u8868\uff0c\u5f53\u9700\u8981\u5feb\u901f O(1) O(1) \u7684\u65f6\u95f4\u63d2\u5165\u6216\u8005\u5220\u9664\u65f6\u9700\u8981\u4f7f\u7528\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_set>","title":"\u7528\u9014"},{"location":"STL/list/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/list/#_3","text":"1 list < type > name ;","title":"\u5b9a\u4e49"},{"location":"STL/list/#_4","text":"","title":"\u8bbf\u95ee\u5143\u7d20"},{"location":"STL/list/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include <list> using namespace std ; int main () { list < int > l ; l . push_back ( 1 ); auto it = l . begin (); cout << * it << endl ; } \u8f93\u51fa: 1 1","title":"\u4ec5\u80fd\u4f7f\u7528\u8fed\u4ee3\u5668\u8bbf\u95ee"},{"location":"STL/list/#_6","text":"\u51fd\u6570 \u542b\u4e49 l.begin() \u8fd4\u56de\u94fe\u8868\u9996\u5730\u5740 l.end() \u8fd4\u56de\u94fe\u8868\u5c3e\u5730\u5740 l.front() \u8fd4\u56de\u9996\u5143\u7d20 l.back() \u8fd4\u56de\u5c3e\u5143\u7d20 l.push_back(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5c3e\u90e8 l.push_front(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5934\u90e8 l.empty() \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a l.insert(it, val1, val2)) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20 l.resize(n) \u8c03\u6574\u94fe\u8868\u5927\u5c0f\u4e3an\uff0c\u8d85\u51fan\u5220\u9664\uff0c\u5c11\u4e8en\u88650 l.clear() \u6e05\u9664 l.assign(len, val) \u66ff\u6362\u6240\u6709\u5143\u7d20 l.assign(l2.begin(), l2.end()) \u66ff\u6362\u6240\u6709\u5143\u7d20\u4e3a\u94fe\u8868l2 l.swap(l2) \u4ea4\u6362\u94fe\u8868 l.merge(l2) \u5408\u5e76\u4e24\u4e2a \u6709\u5e8f \u94fe\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u8c03\u7528\u540el2\u4e3a\u7a7a\uff0c\u53ef\u7528greater () l.erase(it) \u5220\u9664\uff08\u533a\u57df\u4e2d\u7684\uff09\u5143\u7d20 l.remove(val) \u5220\u9664\u503c\u4e3aval \u7684\u5143\u7d20","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/list/#_7","text":"\u9700\u8981\u5feb\u901f\u63d2\u5165\u5220\u9664\u3002 \u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u6a21\u62df\u53cc\u7aef\u961f\u5217","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/list/#_8","text":"\u63d2\u5165\u5220\u9664 O(1) O(1) \u67e5\u627e O(n) O(n) \uff0c n n \u4e3a\u94fe\u8868\u957f\u5ea6","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/map/","text":"map \u00b6 \u7528\u9014 \u00b6 map\u7ffb\u8bd1\u4e3a\u6620\u5c04\u3002\u5b9e\u9645\u4e0a\u6570\u7ec4\u4e5f\u76f8\u5f53\u4e8e\u6620\u5c04\uff0c\u5982double a[100]\uff0c\u5219\u662f\u5efa\u7acb100\u4e2a\u4eceint\u5230double\u7684\u6620\u5c04\u3002\u4f46\u662f\u6570\u7ec4\u5982\u679c\u8981\u5b9e\u73b0\u4ece\u5b57\u7b26\u4e32\u5230int\u7684\u6620\u5c04\uff0c\u6216\u8005\u5b9e\u73b0\u4ece\u4e00\u4e2a\u7ed3\u6784\u4f53\u5230\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u6620\u5c04\u5219\u5c31\u4e0d\u90a3\u4e48\u65b9\u4fbf\u4e86\u3002\u800cmap\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\u800c\u4ea7\u751f\u7684\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 map < type1 , type2 > name ; map\u53ef\u4ee5\u5b9e\u73b0\u4ece\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u5230\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u3002 \u4f46\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679ctype1\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u8bdd\uff0c\u5219\u5fc5\u987b\u4f7f\u7528string\u800c\u4e0d\u80fd\u4f7f\u7528char\u6570\u7ec4\uff0c\u56e0\u4e3a\u6570\u7ec4\u4e0d\u80fd\u4f5c\u4e3a\u952e\u3002\u4f46\u662ftype2\u5219\u53ef\u4ee5\u662f\u6570\u7ec4\u3002 \u5143\u7d20\u8bbf\u95ee \u00b6 \u901a\u8fc7\u952e\u8bbf\u95ee \u00b6 \u901a\u8fc7\u4e4b\u524d\u63d2\u5165\u5143\u7d20\u65f6\u5019\u7684\u952e\u6765\u8bbf\u95ee\u76f8\u5e94\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"\u5f20\u4e09\" ] = 12 ; age [ \"\u5c0f\u738b\" ] = 23 ; cout << age [ \"\u5c0f\u738b\" ] << endl ; } \u8f93\u51fa: 1 23 \u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee \u00b6 \u8fed\u4ee3\u5668\u5b9a\u4e49 1 map < type1 , type2 >:: iterator iterator_name ; \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528auto\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u3002 map\u7684\u8fed\u4ee3\u5668\u65e2\u53ef\u4ee5\u4f7f\u7528iterator -> first\u7684\u65b9\u5f0f\u8bbf\u95ee\u952e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7iterator -> second\u7684\u65b9\u5f0f\u8bbf\u95ee\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; age [ \"Ann Xia\" ] = 128 ; for ( map < string , int >:: iterator it = age . begin (); it != age . end (); ++ it ) cout << it -> first << \" \" << it -> second << endl ; } \u8f93\u51fa: 1 2 3 Ann Xia 128 San Zhang 12 Wang Xiao 23 \u53d1\u73b0\u8f93\u51fa\u7684\u987a\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u4e0d\u4e00\u6837\u3002\u5176\u5b9emap\u662f\u81ea\u52a8\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u7684\u6392\u5e8f\u3002\u4e8b\u5b9e\u4e0a\uff0cmap\u662f\u5c06type1\u76f8\u5e94\u7684\u5927\u5c0f\u6bd4\u8f83\u89c4\u5219\u6765\u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\u53ef\u4ee5\u63a8\u77e5\uff0c\u5982\u679c\u662f\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u8f7d < \u53f7\u4e4b\u540e\u624d\u53ef\u4ee5\u4f7f\u7528map\u3002 \u4f7f\u7528auto\u904d\u5386 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; void Print ( map < string , int > & mp ) { for ( auto & i : mp ) cout << \"Key = \" << i . first << \", Value = \" << i . second << endl ; } int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; Print ( age ); } \u8f93\u51fa\uff1a 1 2 Key = San Zhang , Value = 12 Key = Wang Xiao , Value = 23 \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0auto\u548c\u8fed\u4ee3\u5668\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u5728auto\u4e2d\u8bbf\u95ee\u5143\u7d20\u4f7f\u7528\u7684 \".\" \u800c\u5728\u8fed\u4ee3\u5176\u4e2d\u662f\u7528\u7684 -> \u3002\u8fd9\u662f\u56e0\u4e3aauto\u8fd4\u56de\u7684\u662f\u5143\u7d20\u672c\u8eab\uff0c\u800c\u8fed\u4ee3\u5668\u76f8\u5f53\u4e8e\u6307\u9488\u3002\u5c31\u50cf\u662f\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528auto\u8fd4\u56de\u7684\u662f\u7ed3\u6784\u4f53\u7684\u5143\u7d20\uff0c\u800c\u8fed\u4ee3\u5668\u8fd4\u56de\u7684\u662f\u6307\u5411\u5143\u7d20\u7684\u6307\u9488\u3002 \u5e38\u7528\u51fd\u6570 \u00b6 \u7528\u6cd5 \u542b\u4e49 mp[key] = x \u5229\u7528\u6570\u7ec4\u65b9\u5f0f\u63d2\u5165\u6570\u636e\uff0ckey\u662f\u952e\uff0cx\u662f\u503c mp.at(key) = x \u5229\u7528at\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.insert(make_pair(key,x)) \u5229\u7528insert\u63d2\u5165pair(\u952e\uff0c\u503c)\u6570\u636e mp.emplace(make_pair(key,x)) \u5728\u6620\u5c04\u4e2d\u4e0d\u5b58\u5728\u4e3b\u952ekey\u65f6\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.size() \u8fd4\u56demp\u7684\u5927\u5c0f mp.count(key) multimap\u4e2d\u8fd4\u56de\u952e\u4e3akey\u7684\u5143\u7d20\u5b58\u5728\u7684\u6620\u5c04\u6570\u3002map\u4e2d\u5b58\u5728key\u8fd4\u56de1\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de0 mp.erase(it) \u6839\u636e\u8fed\u4ee3\u5668\u5220\u9664\u5143\u7d20 mp.erase(key) \u6839\u636e\u952e\u5220\u9664\u5143\u7d20 mp.clear() \u6e05\u7a7a\u6620\u5c04 mp.empty() \u5224\u65ad\u6620\u5c04\u662f\u5426\u4e3a\u7a7a mp.find(key) \u6839\u636e\u952ekey\u67e5\u627e\u5143\u7d20\uff0c\u627e\u5230\u4ee5\u540e\u8fd4\u56de\u8fed\u4ee3\u5668,\u4e0d\u5b58\u5728\u8fd4\u56deend mp.rbegin() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.rend() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.swap(mp2) \u5c06mp\u548cmp2\u8fdb\u884c\u4ea4\u6362 mp.lower_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 mp.upper_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 map\u7684\u952e\u503c\u5bf9\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u5982\u679c\u51fa\u73b0\u91cd\u590d\u7684\u952e\uff0c\u90a3\u4e48\u540e\u6765\u8005\u5c45\u4e0a\uff0c\u540e\u6765\u7684\u952e\u503c\u5bf9\u4f1a\u66ff\u6362\u4e4b\u524d\u7684\u3002 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u5b57\u7b26\u4e32\uff0c\u7ed3\u6784\u4f53\u4e0e\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u6620\u5c04 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <bits/stdc++.h> using namespace std ; struct A { int a , b ; bool operator < ( const A & b ) const { return a == b . a ? ( a < b . b ) : ( a < b . a ); } }; int main () { map < A , int > mp ; mp [{ 1 , 2 }] = 3 ; mp [{ - 1 , 4 }] = 1 ; cout << mp . begin () -> first . a << endl ; } \u53ef\u4ee5\u770b\u5230\uff0cmap\u6309\u7167\u91cd\u8f7d\u7684\u89c4\u5219\u81ea\u52a8\u8fdb\u884c\u4e86\u6392\u5e8f\u3002 \u53ef\u4ee5\u5f53\u4f5cbool\u6570\u7ec4\u7528 \u00b6 \u4f8b\u5982\uff1a 1 map < string , bool > age ; \u8fd9\u6837\u5c31\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u51fa\u73b0\u8fc7\u3002 \u53ef\u4ee5\u5b9e\u73b0\u79bb\u6563\u5316 \u00b6 \u79bb\u6563\u5316\u5c31\u662f\u8bf4\uff0c\u5c06\u4e00\u4e9b\u6d6e\u70b9\u503c\uff0c\u901a\u8fc7\u4e00\u4e2a\u6620\u5c04\u64cd\u4f5c\uff0c\u4f7f\u4ed6\u4eec\u7684\u503c\u6620\u5c04\u6210\u6574\u6570\uff0c\u4f46\u76f8\u5bf9\u5927\u5c0f\u4e0d\u53d8\u3002 \u79bb\u6563\u5316\u540c\u6837\u4e5f\u53ef\u4ee5\uff0c\u5c06\u6570\u636e\u8303\u56f4\u8f83\u5927\u4f46\u662f\u4e2a\u6570\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u6620\u5c04\u6210\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u3002 \u4ee5\u4e0a\u4e24\u70b9\u5728\u7ebf\u6bb5\u6811\u4e2d\u4f53\u73b0\u6bd4\u8f83\u660e\u663e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { map < double , int > mp ; double a [] = { 1.1 , 1.1 , - 10023 , 123123 , 12.23124 }; for ( auto & i : a ) mp . emplace ( make_pair ( i , 1 ) ); int order = 0 ; for ( auto & i : mp ) i . second = order ++ ; for ( auto i : a ) cout << \"before = \" << i << \", after = \" << mp [ i ] << endl ; } \u8f93\u51fa: 1 2 3 4 5 before = 1.1 , after = 1 before = 1.1 , after = 1 before = - 10023 , after = 0 before = 123123 , after = 3 before = 12.2312 , after = 2 \u53ef\u89c1a\u6570\u7ec4\u4e2d\u7684\u6570\u5b9e\u73b0\u4e86\u79bb\u6563\u5316\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u63d2\u5165\u3001\u67e5\u627e\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(logn) O(logn) , n n \u662fmap\u7684\u5927\u5c0f\u3002 multimap \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map> \u4e0emap\u7684\u533a\u522b \u00b6 map\u7684\u952e\u503c\u5bf9\u552f\u4e00\uff0c\u800cmulti_map\u4e0d\u552f\u4e00\u3002 multimap\u4e0d\u80fd\u901a\u8fc7\u952e\u8bbf\u95ee\u5143\u7d20\uff0c\u56e0\u4e3a\u952e\u503c\u5bf9\u4e0d\u552f\u4e00([],at\u7b49\u5747\u4e0d\u53ef\u4ee5)\uff1b\u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\u3002 multimap\u4e0d\u80fd\u4f7f\u7528mp[key] = value\u7684\u5f62\u5f0f\u6dfb\u52a0\u5143\u7d20\uff0c\u53ea\u80fd\u4f7f\u7528insert() unordered_map \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_map> \u4e0emap\u7684\u533a\u522b \u00b6 map\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0cunordered_map\u4e0d\u4f1a map\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u800cunordered_map\u4f7f\u7528\u6563\u5217\u3002 unordered_map\u5e73\u5747\u641c\u7d22\u63d2\u5165\u590d\u6742\u5ea6\u4e3a O(1) O(1) ,\u5373\u4e0d\u9700\u8981\u6392\u5e8f\u65f6\uff0c\u4f7f\u7528unordered_map\u4f1a\u5feb\u4e00\u4e9b\u3002","title":"Map"},{"location":"STL/map/#map","text":"","title":"map"},{"location":"STL/map/#_1","text":"map\u7ffb\u8bd1\u4e3a\u6620\u5c04\u3002\u5b9e\u9645\u4e0a\u6570\u7ec4\u4e5f\u76f8\u5f53\u4e8e\u6620\u5c04\uff0c\u5982double a[100]\uff0c\u5219\u662f\u5efa\u7acb100\u4e2a\u4eceint\u5230double\u7684\u6620\u5c04\u3002\u4f46\u662f\u6570\u7ec4\u5982\u679c\u8981\u5b9e\u73b0\u4ece\u5b57\u7b26\u4e32\u5230int\u7684\u6620\u5c04\uff0c\u6216\u8005\u5b9e\u73b0\u4ece\u4e00\u4e2a\u7ed3\u6784\u4f53\u5230\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u6620\u5c04\u5219\u5c31\u4e0d\u90a3\u4e48\u65b9\u4fbf\u4e86\u3002\u800cmap\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\u800c\u4ea7\u751f\u7684\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map>","title":"\u7528\u9014"},{"location":"STL/map/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/map/#_3","text":"1 map < type1 , type2 > name ; map\u53ef\u4ee5\u5b9e\u73b0\u4ece\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u5230\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u3002 \u4f46\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679ctype1\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u8bdd\uff0c\u5219\u5fc5\u987b\u4f7f\u7528string\u800c\u4e0d\u80fd\u4f7f\u7528char\u6570\u7ec4\uff0c\u56e0\u4e3a\u6570\u7ec4\u4e0d\u80fd\u4f5c\u4e3a\u952e\u3002\u4f46\u662ftype2\u5219\u53ef\u4ee5\u662f\u6570\u7ec4\u3002","title":"\u5b9a\u4e49"},{"location":"STL/map/#_4","text":"","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/map/#_5","text":"\u901a\u8fc7\u4e4b\u524d\u63d2\u5165\u5143\u7d20\u65f6\u5019\u7684\u952e\u6765\u8bbf\u95ee\u76f8\u5e94\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"\u5f20\u4e09\" ] = 12 ; age [ \"\u5c0f\u738b\" ] = 23 ; cout << age [ \"\u5c0f\u738b\" ] << endl ; } \u8f93\u51fa: 1 23","title":"\u901a\u8fc7\u952e\u8bbf\u95ee"},{"location":"STL/map/#_6","text":"\u8fed\u4ee3\u5668\u5b9a\u4e49 1 map < type1 , type2 >:: iterator iterator_name ; \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528auto\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u3002 map\u7684\u8fed\u4ee3\u5668\u65e2\u53ef\u4ee5\u4f7f\u7528iterator -> first\u7684\u65b9\u5f0f\u8bbf\u95ee\u952e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7iterator -> second\u7684\u65b9\u5f0f\u8bbf\u95ee\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; age [ \"Ann Xia\" ] = 128 ; for ( map < string , int >:: iterator it = age . begin (); it != age . end (); ++ it ) cout << it -> first << \" \" << it -> second << endl ; } \u8f93\u51fa: 1 2 3 Ann Xia 128 San Zhang 12 Wang Xiao 23 \u53d1\u73b0\u8f93\u51fa\u7684\u987a\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u4e0d\u4e00\u6837\u3002\u5176\u5b9emap\u662f\u81ea\u52a8\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u7684\u6392\u5e8f\u3002\u4e8b\u5b9e\u4e0a\uff0cmap\u662f\u5c06type1\u76f8\u5e94\u7684\u5927\u5c0f\u6bd4\u8f83\u89c4\u5219\u6765\u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\u53ef\u4ee5\u63a8\u77e5\uff0c\u5982\u679c\u662f\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u8f7d < \u53f7\u4e4b\u540e\u624d\u53ef\u4ee5\u4f7f\u7528map\u3002","title":"\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee"},{"location":"STL/map/#auto","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; void Print ( map < string , int > & mp ) { for ( auto & i : mp ) cout << \"Key = \" << i . first << \", Value = \" << i . second << endl ; } int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; Print ( age ); } \u8f93\u51fa\uff1a 1 2 Key = San Zhang , Value = 12 Key = Wang Xiao , Value = 23 \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0auto\u548c\u8fed\u4ee3\u5668\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u5728auto\u4e2d\u8bbf\u95ee\u5143\u7d20\u4f7f\u7528\u7684 \".\" \u800c\u5728\u8fed\u4ee3\u5176\u4e2d\u662f\u7528\u7684 -> \u3002\u8fd9\u662f\u56e0\u4e3aauto\u8fd4\u56de\u7684\u662f\u5143\u7d20\u672c\u8eab\uff0c\u800c\u8fed\u4ee3\u5668\u76f8\u5f53\u4e8e\u6307\u9488\u3002\u5c31\u50cf\u662f\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528auto\u8fd4\u56de\u7684\u662f\u7ed3\u6784\u4f53\u7684\u5143\u7d20\uff0c\u800c\u8fed\u4ee3\u5668\u8fd4\u56de\u7684\u662f\u6307\u5411\u5143\u7d20\u7684\u6307\u9488\u3002","title":"\u4f7f\u7528auto\u904d\u5386"},{"location":"STL/map/#_7","text":"\u7528\u6cd5 \u542b\u4e49 mp[key] = x \u5229\u7528\u6570\u7ec4\u65b9\u5f0f\u63d2\u5165\u6570\u636e\uff0ckey\u662f\u952e\uff0cx\u662f\u503c mp.at(key) = x \u5229\u7528at\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.insert(make_pair(key,x)) \u5229\u7528insert\u63d2\u5165pair(\u952e\uff0c\u503c)\u6570\u636e mp.emplace(make_pair(key,x)) \u5728\u6620\u5c04\u4e2d\u4e0d\u5b58\u5728\u4e3b\u952ekey\u65f6\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.size() \u8fd4\u56demp\u7684\u5927\u5c0f mp.count(key) multimap\u4e2d\u8fd4\u56de\u952e\u4e3akey\u7684\u5143\u7d20\u5b58\u5728\u7684\u6620\u5c04\u6570\u3002map\u4e2d\u5b58\u5728key\u8fd4\u56de1\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de0 mp.erase(it) \u6839\u636e\u8fed\u4ee3\u5668\u5220\u9664\u5143\u7d20 mp.erase(key) \u6839\u636e\u952e\u5220\u9664\u5143\u7d20 mp.clear() \u6e05\u7a7a\u6620\u5c04 mp.empty() \u5224\u65ad\u6620\u5c04\u662f\u5426\u4e3a\u7a7a mp.find(key) \u6839\u636e\u952ekey\u67e5\u627e\u5143\u7d20\uff0c\u627e\u5230\u4ee5\u540e\u8fd4\u56de\u8fed\u4ee3\u5668,\u4e0d\u5b58\u5728\u8fd4\u56deend mp.rbegin() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.rend() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.swap(mp2) \u5c06mp\u548cmp2\u8fdb\u884c\u4ea4\u6362 mp.lower_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 mp.upper_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 map\u7684\u952e\u503c\u5bf9\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u5982\u679c\u51fa\u73b0\u91cd\u590d\u7684\u952e\uff0c\u90a3\u4e48\u540e\u6765\u8005\u5c45\u4e0a\uff0c\u540e\u6765\u7684\u952e\u503c\u5bf9\u4f1a\u66ff\u6362\u4e4b\u524d\u7684\u3002","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/map/#_8","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/map/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <bits/stdc++.h> using namespace std ; struct A { int a , b ; bool operator < ( const A & b ) const { return a == b . a ? ( a < b . b ) : ( a < b . a ); } }; int main () { map < A , int > mp ; mp [{ 1 , 2 }] = 3 ; mp [{ - 1 , 4 }] = 1 ; cout << mp . begin () -> first . a << endl ; } \u53ef\u4ee5\u770b\u5230\uff0cmap\u6309\u7167\u91cd\u8f7d\u7684\u89c4\u5219\u81ea\u52a8\u8fdb\u884c\u4e86\u6392\u5e8f\u3002","title":"\u5b57\u7b26\u4e32\uff0c\u7ed3\u6784\u4f53\u4e0e\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u6620\u5c04"},{"location":"STL/map/#bool","text":"\u4f8b\u5982\uff1a 1 map < string , bool > age ; \u8fd9\u6837\u5c31\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u51fa\u73b0\u8fc7\u3002","title":"\u53ef\u4ee5\u5f53\u4f5cbool\u6570\u7ec4\u7528"},{"location":"STL/map/#_10","text":"\u79bb\u6563\u5316\u5c31\u662f\u8bf4\uff0c\u5c06\u4e00\u4e9b\u6d6e\u70b9\u503c\uff0c\u901a\u8fc7\u4e00\u4e2a\u6620\u5c04\u64cd\u4f5c\uff0c\u4f7f\u4ed6\u4eec\u7684\u503c\u6620\u5c04\u6210\u6574\u6570\uff0c\u4f46\u76f8\u5bf9\u5927\u5c0f\u4e0d\u53d8\u3002 \u79bb\u6563\u5316\u540c\u6837\u4e5f\u53ef\u4ee5\uff0c\u5c06\u6570\u636e\u8303\u56f4\u8f83\u5927\u4f46\u662f\u4e2a\u6570\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u6620\u5c04\u6210\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u3002 \u4ee5\u4e0a\u4e24\u70b9\u5728\u7ebf\u6bb5\u6811\u4e2d\u4f53\u73b0\u6bd4\u8f83\u660e\u663e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { map < double , int > mp ; double a [] = { 1.1 , 1.1 , - 10023 , 123123 , 12.23124 }; for ( auto & i : a ) mp . emplace ( make_pair ( i , 1 ) ); int order = 0 ; for ( auto & i : mp ) i . second = order ++ ; for ( auto i : a ) cout << \"before = \" << i << \", after = \" << mp [ i ] << endl ; } \u8f93\u51fa: 1 2 3 4 5 before = 1.1 , after = 1 before = 1.1 , after = 1 before = - 10023 , after = 0 before = 123123 , after = 3 before = 12.2312 , after = 2 \u53ef\u89c1a\u6570\u7ec4\u4e2d\u7684\u6570\u5b9e\u73b0\u4e86\u79bb\u6563\u5316\u3002","title":"\u53ef\u4ee5\u5b9e\u73b0\u79bb\u6563\u5316"},{"location":"STL/map/#_11","text":"\u63d2\u5165\u3001\u67e5\u627e\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(logn) O(logn) , n n \u662fmap\u7684\u5927\u5c0f\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/map/#multimap","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map>","title":"multimap"},{"location":"STL/map/#map_1","text":"map\u7684\u952e\u503c\u5bf9\u552f\u4e00\uff0c\u800cmulti_map\u4e0d\u552f\u4e00\u3002 multimap\u4e0d\u80fd\u901a\u8fc7\u952e\u8bbf\u95ee\u5143\u7d20\uff0c\u56e0\u4e3a\u952e\u503c\u5bf9\u4e0d\u552f\u4e00([],at\u7b49\u5747\u4e0d\u53ef\u4ee5)\uff1b\u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\u3002 multimap\u4e0d\u80fd\u4f7f\u7528mp[key] = value\u7684\u5f62\u5f0f\u6dfb\u52a0\u5143\u7d20\uff0c\u53ea\u80fd\u4f7f\u7528insert()","title":"\u4e0emap\u7684\u533a\u522b"},{"location":"STL/map/#unordered_map","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_map>","title":"unordered_map"},{"location":"STL/map/#map_2","text":"map\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0cunordered_map\u4e0d\u4f1a map\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u800cunordered_map\u4f7f\u7528\u6563\u5217\u3002 unordered_map\u5e73\u5747\u641c\u7d22\u63d2\u5165\u590d\u6742\u5ea6\u4e3a O(1) O(1) ,\u5373\u4e0d\u9700\u8981\u6392\u5e8f\u65f6\uff0c\u4f7f\u7528unordered_map\u4f1a\u5feb\u4e00\u4e9b\u3002","title":"\u4e0emap\u7684\u533a\u522b"},{"location":"STL/queue/","text":"queue \u00b6 \u7528\u9014 \u00b6 \u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0estack\u6b63\u597d\u76f8\u53cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 queue < type > name ; \u5143\u7d20\u8bbf\u95ee \u00b6 queue\u7684\u8bbf\u95ee\u6bd4\u8f83\u7279\u6b8a\uff0cqueue\u6ca1\u6709\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u5143\u7d20\uff0c\u5373\u4f7f\u7528front()\u51fd\u6570\u3002 \u5982\u679c\u8981\u904d\u5386\u5219\u9700\u8981\u50cf\u8fd9\u6837\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include <queue> using namespace std ; int main () { queue < int > q ; q . push ( 1 ); q . push ( 2 ); q . push ( 3 ); while ( ! q . empty () ) { cout << q . front () << \" \" ; q . pop (); } } \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u4f5c\u7528 q.push() \u5165\u961f q.pop() \u51fa\u961f q.front() \u8fd4\u56de\u9996\u5143\u7d20 q.back() \u8fd4\u56de\u672b\u5143\u7d20 q.size() \u8f93\u51fa\u73b0\u6709\u5143\u7d20\u7684\u4e2a\u6570 q.empty() \u961f\u5217\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u53cd\u4e4b\u8fd4\u56de0 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 bfs \u00b6 \u5047\u8bbe\u4ee5\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> #include <queue> using namespace std ; const int maxn = 1E5 ; bool vis [ maxn ]; vector < int > G [ maxn ]; void BFS () { int s ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int ft = q . front (); vis [ ft ] = 1 ; q . pop (); for ( auto to : G [ ft ] ) if ( ! vis [ to ] ) q . push ( to ); } } \u6700\u539f\u59cb\u7684Bellman-Fold \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 struct node { int to ; long long val ; node ( int to = 0 , long long val = 0 ) : to ( to ), val ( val ) {} }; vector < node > G [ maxn ]; long long dis [ maxn ]; bool inq [ maxn ]; void SPFA ( int s ) { memset ( inq , 0 , sizeof ( inq ) ); for ( int i = 1 ; i < maxn ; ++ i ) dis [ i ] = 1E18 ; dis [ s ] = 0 , inq [ s ] = 1 ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int x = q . front (); q . pop (); inq [ x ] = 0 ; //\u8fd9\u91cc\u548c\u5806\u4f18\u5316\u7684\u533a\u522b\u5c31\u663e\u73b0\u51fa\u6765\u4e86\uff0c\u5806\u4f18\u5316\u7248\u672c\u53ea\u4f1a\u5165\u961f\u4e00\u6b21\uff0c\u800cSPFA\u5219\u4e0d\u662f for ( auto to : G [ x ] ) { if ( dis [ to . to ] > dis [ x ] + to . val ) { dis [ to . to ] = dis [ x ] + to . val ; if ( ! inq [ to . to ] ) q . push ( to . to ), inq [ to . to ] = 1 ; } } } } \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 push\u548cpop\u5747\u4e3a O(1) O(1) priority_queue \u00b6 \u7528\u9014 \u00b6 \u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u76f8\u5f53\u4e8e\u5927\u6839\u5806\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue> \u5e38\u89c1\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 priority_queue < type > name ; \u5e38\u7528\u51fd\u6570 \u00b6 \u57fa\u672c\u4e0equeue\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7priority_queue\u59cb\u7ec8\u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u800c\u4e0d\u662f\u5148\u8fdb\u5148\u51fa\u3002 \u961f\u9996\u5143\u7d20\u9700\u8981\u4f7f\u7528top()\u800c\u4e0d\u662ffront() \u4f18\u5148\u7ea7\u7684\u8bbe\u7f6e \u00b6 \u540cmap\u7c7b\u4f3c\uff0c\u9700\u8981\u91cd\u8f7d < \u53f7\u3002 \u4f46\u662f\uff0c\u6392\u5e8f\u7ed3\u679c\u65f6\u76f8\u53cd\u7684\uff0c\u56e0\u4e3a\u4ed6\u662f\u6309\u7167\u4f18\u5148\u7ea7\u6765\u7684\uff0c\u6240\u4ee5\u8d8a\u5927\u7684\u6570\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u4f1a\u6392\u5728\u524d\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> #include <queue> using namespace std ; struct pet { string species ; int price ; bool operator < ( const pet & b ) const { return price < b . price ; } }; int main () { priority_queue < pet > q ; q . push ({ \"cat\" , 100 } ); q . push ({ \"dog\" , 50 } ); q . push ({ \"Tarjan\" , 10000 } ); while ( ! q . empty () ) { cout << q . top (). species << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 Tarjan cat dog \u800c\u5982\u679c\u65f6int\u7b49\u57fa\u672c\u7c7b\u578b\u9700\u8981\u8bbe\u7f6e\u8d8a\u5c0f\u7684\u6570\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u5219\u9700\u8981\u6dfb\u52a0 1 #include <functional> \u5e76\u7528\u5982\u4e0b\u5b9a\u4e49\u65b9\u5f0f: 1 priority_queue < int , vector < int > , greater < int > > q ; \u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <queue> #include <functional> using namespace std ; int main () { priority_queue < int , vector < int > , greater < int > > q ; q . push ( 2 ); q . push ( 50 ); q . push ( 1 ); while ( ! q . empty () ) { cout << q . top () << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 1 2 50 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u5806\u4f18\u5316\u7684Dijkstra\u548cBellman-Fold \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 struct edge { int pos , val ; edge ( int pos = 0 , int val = 0 ) : pos ( pos ), val ( val ) {} bool operator < ( const edge & e ) const { return val > e . val ; } }; vector < edge > G [ maxn ]; int dis [ maxn ]; bool vis [ maxn ]; void Dijkstra ( int s ) { memset ( dis , 0x3f , sizeof ( dis ) ); priority_queue < edge > q ; dis [ s ] = 0 ; q . push ({ s , dis [ s ]}); while ( ! q . empty () ) { auto tp = q . top ( ); q . pop ( ); if ( vis [ tp . pos ] ) continue ; inq [ tp . pos ] = 1 ; for ( auto v : G [ tp . pos ] ) { if ( dis [ v . pos ] > dis [ tp . pos ] + v . val ) { dis [ v . pos ] = dis [ tp . pos ] + v . val ; q . push ( { v . pos , dis [ v . pos ]} ); } } } } \u4e00\u4e9b\u9700\u8981\u8d2a\u5fc3\u7684\u60c5\u51b5 \u00b6","title":"Queue"},{"location":"STL/queue/#queue","text":"","title":"queue"},{"location":"STL/queue/#_1","text":"\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0estack\u6b63\u597d\u76f8\u53cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue>","title":"\u7528\u9014"},{"location":"STL/queue/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/queue/#_3","text":"1 queue < type > name ;","title":"\u5b9a\u4e49"},{"location":"STL/queue/#_4","text":"queue\u7684\u8bbf\u95ee\u6bd4\u8f83\u7279\u6b8a\uff0cqueue\u6ca1\u6709\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u5143\u7d20\uff0c\u5373\u4f7f\u7528front()\u51fd\u6570\u3002 \u5982\u679c\u8981\u904d\u5386\u5219\u9700\u8981\u50cf\u8fd9\u6837\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include <queue> using namespace std ; int main () { queue < int > q ; q . push ( 1 ); q . push ( 2 ); q . push ( 3 ); while ( ! q . empty () ) { cout << q . front () << \" \" ; q . pop (); } }","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/queue/#_5","text":"\u51fd\u6570 \u4f5c\u7528 q.push() \u5165\u961f q.pop() \u51fa\u961f q.front() \u8fd4\u56de\u9996\u5143\u7d20 q.back() \u8fd4\u56de\u672b\u5143\u7d20 q.size() \u8f93\u51fa\u73b0\u6709\u5143\u7d20\u7684\u4e2a\u6570 q.empty() \u961f\u5217\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u53cd\u4e4b\u8fd4\u56de0","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/queue/#_6","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/queue/#bfs","text":"\u5047\u8bbe\u4ee5\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> #include <queue> using namespace std ; const int maxn = 1E5 ; bool vis [ maxn ]; vector < int > G [ maxn ]; void BFS () { int s ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int ft = q . front (); vis [ ft ] = 1 ; q . pop (); for ( auto to : G [ ft ] ) if ( ! vis [ to ] ) q . push ( to ); } }","title":"bfs"},{"location":"STL/queue/#bellman-fold","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 struct node { int to ; long long val ; node ( int to = 0 , long long val = 0 ) : to ( to ), val ( val ) {} }; vector < node > G [ maxn ]; long long dis [ maxn ]; bool inq [ maxn ]; void SPFA ( int s ) { memset ( inq , 0 , sizeof ( inq ) ); for ( int i = 1 ; i < maxn ; ++ i ) dis [ i ] = 1E18 ; dis [ s ] = 0 , inq [ s ] = 1 ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int x = q . front (); q . pop (); inq [ x ] = 0 ; //\u8fd9\u91cc\u548c\u5806\u4f18\u5316\u7684\u533a\u522b\u5c31\u663e\u73b0\u51fa\u6765\u4e86\uff0c\u5806\u4f18\u5316\u7248\u672c\u53ea\u4f1a\u5165\u961f\u4e00\u6b21\uff0c\u800cSPFA\u5219\u4e0d\u662f for ( auto to : G [ x ] ) { if ( dis [ to . to ] > dis [ x ] + to . val ) { dis [ to . to ] = dis [ x ] + to . val ; if ( ! inq [ to . to ] ) q . push ( to . to ), inq [ to . to ] = 1 ; } } } }","title":"\u6700\u539f\u59cb\u7684Bellman-Fold"},{"location":"STL/queue/#_7","text":"push\u548cpop\u5747\u4e3a O(1) O(1)","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/queue/#priority_queue","text":"","title":"priority_queue"},{"location":"STL/queue/#_8","text":"\u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u76f8\u5f53\u4e8e\u5927\u6839\u5806\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue>","title":"\u7528\u9014"},{"location":"STL/queue/#_9","text":"","title":"\u5e38\u89c1\u64cd\u4f5c"},{"location":"STL/queue/#_10","text":"1 priority_queue < type > name ;","title":"\u5b9a\u4e49"},{"location":"STL/queue/#_11","text":"\u57fa\u672c\u4e0equeue\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7priority_queue\u59cb\u7ec8\u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u800c\u4e0d\u662f\u5148\u8fdb\u5148\u51fa\u3002 \u961f\u9996\u5143\u7d20\u9700\u8981\u4f7f\u7528top()\u800c\u4e0d\u662ffront()","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/queue/#_12","text":"\u540cmap\u7c7b\u4f3c\uff0c\u9700\u8981\u91cd\u8f7d < \u53f7\u3002 \u4f46\u662f\uff0c\u6392\u5e8f\u7ed3\u679c\u65f6\u76f8\u53cd\u7684\uff0c\u56e0\u4e3a\u4ed6\u662f\u6309\u7167\u4f18\u5148\u7ea7\u6765\u7684\uff0c\u6240\u4ee5\u8d8a\u5927\u7684\u6570\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u4f1a\u6392\u5728\u524d\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> #include <queue> using namespace std ; struct pet { string species ; int price ; bool operator < ( const pet & b ) const { return price < b . price ; } }; int main () { priority_queue < pet > q ; q . push ({ \"cat\" , 100 } ); q . push ({ \"dog\" , 50 } ); q . push ({ \"Tarjan\" , 10000 } ); while ( ! q . empty () ) { cout << q . top (). species << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 Tarjan cat dog \u800c\u5982\u679c\u65f6int\u7b49\u57fa\u672c\u7c7b\u578b\u9700\u8981\u8bbe\u7f6e\u8d8a\u5c0f\u7684\u6570\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u5219\u9700\u8981\u6dfb\u52a0 1 #include <functional> \u5e76\u7528\u5982\u4e0b\u5b9a\u4e49\u65b9\u5f0f: 1 priority_queue < int , vector < int > , greater < int > > q ; \u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <queue> #include <functional> using namespace std ; int main () { priority_queue < int , vector < int > , greater < int > > q ; q . push ( 2 ); q . push ( 50 ); q . push ( 1 ); while ( ! q . empty () ) { cout << q . top () << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 1 2 50","title":"\u4f18\u5148\u7ea7\u7684\u8bbe\u7f6e"},{"location":"STL/queue/#_13","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/queue/#dijkstrabellman-fold","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 struct edge { int pos , val ; edge ( int pos = 0 , int val = 0 ) : pos ( pos ), val ( val ) {} bool operator < ( const edge & e ) const { return val > e . val ; } }; vector < edge > G [ maxn ]; int dis [ maxn ]; bool vis [ maxn ]; void Dijkstra ( int s ) { memset ( dis , 0x3f , sizeof ( dis ) ); priority_queue < edge > q ; dis [ s ] = 0 ; q . push ({ s , dis [ s ]}); while ( ! q . empty () ) { auto tp = q . top ( ); q . pop ( ); if ( vis [ tp . pos ] ) continue ; inq [ tp . pos ] = 1 ; for ( auto v : G [ tp . pos ] ) { if ( dis [ v . pos ] > dis [ tp . pos ] + v . val ) { dis [ v . pos ] = dis [ tp . pos ] + v . val ; q . push ( { v . pos , dis [ v . pos ]} ); } } } }","title":"\u5806\u4f18\u5316\u7684Dijkstra\u548cBellman-Fold"},{"location":"STL/queue/#_14","text":"","title":"\u4e00\u4e9b\u9700\u8981\u8d2a\u5fc3\u7684\u60c5\u51b5"},{"location":"STL/set/","text":"set \u00b6 \u7528\u9014 \u00b6 set\u8bd1\u4f5c\u96c6\u5408\uff0cset\u53ef\u4ee5\u5b9e\u73b0\u5185\u90e8\u5143\u7d20\u81ea\u52a8\u6392\u5e8f\u5e76\u81ea\u52a8\u53bb\u91cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 set < type > name ; \u540cmap\u4e00\u6837\uff0c\u56e0\u4e3a\u4ed6\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0c\u6240\u4ee5\u7c7b\u578b\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\u9700\u8981\u91cd\u8f7d < \u3002 \u8bbf\u95ee\u5143\u7d20 \u00b6 \u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\uff01\uff01 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); auto it = s . begin (); cout << * ( ++ it ) << \" \" << * ( -- it ) << endl ; } \u8f93\u51fa: 1 2 1 \u901a\u8fc7\u8fed\u4ee3\u5668\u6216auto\u904d\u5386 \u00b6 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); for ( auto i : s ) cout << i << endl ; } \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u542b\u4e49 s.begin() \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.end() \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() \u6e05\u9664\u6240\u6709\u5143\u7d20 s.empty() \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue s.count(val) \u8fd4\u56de\u503c\u4e3aval\u7684\u5143\u7d20\u7684\u4e2a\u6570 s.erase(val) \u5220\u9664\u96c6\u5408\u4e2d \u6240\u6709 \u503c\u4e3aval\u7684\u5143\u7d20 s.erase(it) \u5220\u9664\u96c6\u5408\u4e2d\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20 s.erase(first,last) \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5b50\u96c6[first, last) s.equal_range(val) \u8fd4\u56de\u6709\u5e8f/\u5347\u5e8f\u96c6\u5408\u4e2dval\u5143\u7d20\u7b2c\u4e00\u6b21\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e s.find() \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.insert(val) \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u503c\u4e3aval\u7684\u5143\u7d20 s.max_size() \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap(s2) \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound(val) \u8fd4\u56de\u5927\u4e8eval\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.lower_bound(val) \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09val\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u6ce8\u610f\u4f7f\u7528\u5185\u7f6e\u7684lower_bound()\u51fd\u6570\u4f1a\u6bd4algorithm\u4e2d\u7684lower_bound()\u51fd\u6570\u5feb\uff0c\u56e0\u4e3a\u540e\u8005\u4f1a\u91cd\u5efa\u4e00\u904dset\u3002 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u53bb\u91cd\uff0c\u6392\u5e8f \u4e5f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u79bb\u6563\u5316 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u63d2\u5165\u5220\u9664\u67e5\u627e\u90fd\u662f O(logn) O(logn) , n n \u4e3aset\u5927\u5c0f\u3002 multiset \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set> \u4e0eset\u7684\u533a\u522b \u00b6 \u53ef\u4ee5\u51fa\u73b0\u91cd\u590d\u5143\u7d20\uff0c\u80fd\u7528\u6765\u5728\u4fdd\u6301\u539f\u5e8f\u5217\u65f6\u949f\u4fdd\u6301\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5feb\u901f\u63d2\u5165\u548c\u5feb\u901f\u67e5\u627e\u3002 unordered_set \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_set> \u4e0eset\u7684\u533a\u522b \u00b6 \u4f7f\u7528\u6563\u5217\u5b9e\u73b0\uff0c\u4e0d\u53ef\u4ee5\u6392\u5e8f\uff0c\u4ec5\u80fd\u7528\u6765\u53bb\u91cd\u3002 \u5747\u644a\u590d\u6742\u5ea6 O(1) O(1)","title":"Set"},{"location":"STL/set/#set","text":"","title":"set"},{"location":"STL/set/#_1","text":"set\u8bd1\u4f5c\u96c6\u5408\uff0cset\u53ef\u4ee5\u5b9e\u73b0\u5185\u90e8\u5143\u7d20\u81ea\u52a8\u6392\u5e8f\u5e76\u81ea\u52a8\u53bb\u91cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set>","title":"\u7528\u9014"},{"location":"STL/set/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/set/#_3","text":"1 set < type > name ; \u540cmap\u4e00\u6837\uff0c\u56e0\u4e3a\u4ed6\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0c\u6240\u4ee5\u7c7b\u578b\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\u9700\u8981\u91cd\u8f7d < \u3002","title":"\u5b9a\u4e49"},{"location":"STL/set/#_4","text":"","title":"\u8bbf\u95ee\u5143\u7d20"},{"location":"STL/set/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); auto it = s . begin (); cout << * ( ++ it ) << \" \" << * ( -- it ) << endl ; } \u8f93\u51fa: 1 2 1","title":"\u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\uff01\uff01"},{"location":"STL/set/#auto","text":"1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); for ( auto i : s ) cout << i << endl ; }","title":"\u901a\u8fc7\u8fed\u4ee3\u5668\u6216auto\u904d\u5386"},{"location":"STL/set/#_6","text":"\u51fd\u6570 \u542b\u4e49 s.begin() \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.end() \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() \u6e05\u9664\u6240\u6709\u5143\u7d20 s.empty() \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue s.count(val) \u8fd4\u56de\u503c\u4e3aval\u7684\u5143\u7d20\u7684\u4e2a\u6570 s.erase(val) \u5220\u9664\u96c6\u5408\u4e2d \u6240\u6709 \u503c\u4e3aval\u7684\u5143\u7d20 s.erase(it) \u5220\u9664\u96c6\u5408\u4e2d\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20 s.erase(first,last) \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5b50\u96c6[first, last) s.equal_range(val) \u8fd4\u56de\u6709\u5e8f/\u5347\u5e8f\u96c6\u5408\u4e2dval\u5143\u7d20\u7b2c\u4e00\u6b21\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e s.find() \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.insert(val) \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u503c\u4e3aval\u7684\u5143\u7d20 s.max_size() \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap(s2) \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound(val) \u8fd4\u56de\u5927\u4e8eval\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.lower_bound(val) \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09val\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u6ce8\u610f\u4f7f\u7528\u5185\u7f6e\u7684lower_bound()\u51fd\u6570\u4f1a\u6bd4algorithm\u4e2d\u7684lower_bound()\u51fd\u6570\u5feb\uff0c\u56e0\u4e3a\u540e\u8005\u4f1a\u91cd\u5efa\u4e00\u904dset\u3002","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/set/#_7","text":"\u53bb\u91cd\uff0c\u6392\u5e8f \u4e5f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u79bb\u6563\u5316","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/set/#_8","text":"\u63d2\u5165\u5220\u9664\u67e5\u627e\u90fd\u662f O(logn) O(logn) , n n \u4e3aset\u5927\u5c0f\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/set/#multiset","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set>","title":"multiset"},{"location":"STL/set/#set_1","text":"\u53ef\u4ee5\u51fa\u73b0\u91cd\u590d\u5143\u7d20\uff0c\u80fd\u7528\u6765\u5728\u4fdd\u6301\u539f\u5e8f\u5217\u65f6\u949f\u4fdd\u6301\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5feb\u901f\u63d2\u5165\u548c\u5feb\u901f\u67e5\u627e\u3002","title":"\u4e0eset\u7684\u533a\u522b"},{"location":"STL/set/#unordered_set","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_set>","title":"unordered_set"},{"location":"STL/set/#set_2","text":"\u4f7f\u7528\u6563\u5217\u5b9e\u73b0\uff0c\u4e0d\u53ef\u4ee5\u6392\u5e8f\uff0c\u4ec5\u80fd\u7528\u6765\u53bb\u91cd\u3002 \u5747\u644a\u590d\u6742\u5ea6 O(1) O(1)","title":"\u4e0eset\u7684\u533a\u522b"},{"location":"STL/vector/","text":"vector \u00b6 \u7528\u9014 \u00b6 vector\u53ef\u4ee5\u7406\u89e3\u6210\u53ef\u4ee5\u53d8\u957f\u7684\u6570\u7ec4\uff1b\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684\u3002 vector\u5e38\u7528\u4e8e\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u5927\u5c0f\u4e0d\u786e\u5b9a\uff0c\u7528\u666e\u901a\u6570\u7ec4\u5b58\u50a8\u4f1a\u8d85\u5185\u5b58\u7684\u60c5\u51b5\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <vector> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 vector < type > name ; type\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b(int\uff0cstruct\uff0cclass...),\u751a\u81f3\u53ef\u4ee5\u662fSTL\u3002 \u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u4fdd\u5b58int\u7c7b\u578b\u7684vector\u7684vector: 1 vector < vector < int > > v ; \u8fd9\u4e2a\u65f6\u5019\uff0cvector\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u53ef\u4ee5\u53d8\u5316\u7684\u6570\u7ec4\u3002 \u5143\u7d20\u8bbf\u95ee \u00b6 \u4f7f\u7528\u4e0b\u6807 \u00b6 \u548c\u666e\u901a\u6570\u7ec4\u4e00\u6837\uff0c\u5047\u8bbe\u6709\u4e00\u4e2avector\u53d8\u91cf\u540d\u4e3av\uff0c\u90a3\u4e48\u8bbf\u95ee\u4f7f\u7528v[i]\u5c31\u53ef\u4ee5\u8bbf\u95eev\u79cd\u7b2ci\u4e2a\u5143\u7d20\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0b\u6807\u7684\u8303\u56f4\u662f 0 - v.size() - 1 \uff0c\u5176\u4e2dsize()\u51fd\u6570\u662f\u8fd4\u56deSTL\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i = 0 ; i < v . size (); ++ i ) cout << v [ i ] << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5 \u4f7f\u7528\u8fed\u4ee3\u5668 \u00b6 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7c7b\u6bd4\u6210\u6307\u9488\uff0c\u5b9a\u4e49\u4e3a 1 STL < typename >:: iterator iterator_name ; \u5176\u4e2dSTL\u662f\u6240\u7528STL\u7684\u540d\u79f0\uff0c\u5982vector\uff0c\u4ee5\u53ca\u540e\u9762\u8981\u4ecb\u7ecd\u5230\u7684map\uff0cset\u7b49\u3002 \u5982\u5b9a\u4e49\u4e00\u4e2avector \u7c7b\u578b\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 vector < int >:: iterator it ; \u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u904d\u5386\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( vector < int >:: iterator it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5 \u8fd9\u79cd\u5199\u6cd5\u4e0e\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\u7b49\u4ef7: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; vector < int >:: iterator it = v . begin (); for ( int i = 0 ; i < v . size (); ++ i ) cout << * ( it + i ) << endl ; } \u53ef\u4ee5\u770b\u5230: * v[i]\u4e0e*(it + i)\u4f5c\u7528\u76f8\u540c * \u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86\u81ea\u589e\u548c\u81ea\u51cf\u7684\u64cd\u4f5c\uff0c\u4e0e\u6307\u9488\u7c7b\u4f3c\u3002 * begin()\u51fd\u6570\u8fd4\u56de\u9996\u5143\u7d20\u8fed\u4ee3\u5668\uff0cend()\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u5668\u800c\u4e0d\u662f\u9996\u5143\u7d20\uff0c\u5de6\u95ed\u53f3\u5f00\uff0c\u5176\u5b9e\u540e\u9762\u6709\u5f88\u591a\u51fd\u6570\u90fd\u662f\u6309\u7167\u5de6\u95ed\u53f3\u5f00\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u7684\u3002 \u6ce8\u610f\uff1a * \u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u5fc5\u987b\u548c\u5b9a\u4e49\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u5373\u6211\u4e0d\u80fd\u7528vector< double >\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u8bbf\u95eevector< int >\u578b\u7684vector * \u53ea\u6709vector\u548cstring\u624d\u80fd\u4f7f\u7528it+i\u8fd9\u79cd\u5199\u6cd5 \u5f53\u7136\u8fed\u4ee3\u5668\u9700\u8981\u5199\u8fd9\u4e48\u957f\uff0c\u4e0d\u592a\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 auto \u6539\u5199\u4e0a\u8ff0\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; } \u4f7f\u7528auto\u904d\u5386 \u00b6 \u5982\u679c\u4ec5\u4ec5\u9700\u8981\u904d\u5386\u6240\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i : v ) cout << i << endl ; } \u6216\u8005\u66f4\u7b80\u5355\u4e00\u70b9\uff0c\u4f7f\u7528auto\uff1a 1 2 3 4 5 int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) cout << i << endl ; } \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u9700\u8981\u8fd9\u6837\u5199: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto & i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u8f93\u51fa\uff1a 1 2 1 2 4 5 2 3 5 6 \u800c\u5982\u679c\u4e0d\u4f7f\u7528\u5f15\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u5219\u4f1a\u8f93\u51fa\uff1a 1 2 1 2 4 5 1 2 4 5 \u539f\u56e0\u662f\u5982\u679c\u4e0d\u9002\u7528\u5f15\u7528\uff0c\u76f8\u5f53\u4e8e\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e86\u4e00\u4e2a\u62f7\u8d1d\uff0c\u800c\u5f15\u7528\u5219\u662f\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e00\u4e2a\u5f15\u7528\uff0c\u5f53\u7136\u53ef\u4ee5\u4fee\u6539\u771f\u6b63\u7684\u503c\u3002 \u5e38\u7528\u51fd\u6570 \u00b6 push_back()\u4e0epop_back() \u00b6 push_back()\u6545\u540d\u601d\u610f\uff0c\u5c31\u662f\u518d\u5f53\u524dvector\u7684\u540e\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u800cpop_back()\u5c31\u662f\u518dvector\u540e\u8fb9\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . pop_back (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 2 3 ] clear()\u4e0eempty() \u00b6 clear()\u7528\u4e8e\u6e05\u7a7aSTL\uff0cempty()\u662f\u7528\u4e8e\u5224\u65adSTL\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\uff1b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . clear (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 0 , elements = [ ] clear()\u7684\u529f\u80fd\u8fd9\u79cd\u5199\u6cd5\u4e0e\u4ee5\u4e0b\u5199\u6cd5\u76f8\u540c: 1 while ( ! v . empty () ) v . pop_back (); insert() \u00b6 insert()\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a | \u51fd\u6570 |\u4f5c\u7528 | |--|--| | v.insert(it, val) | \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val | | v.insert(it, n, x) | \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2ax | | v.insert(it, first, last) | \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 | \u4e3e\u51e0\u4e2a\u4f8b\u5b50: \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( it , 1E9 ); Print ( v ); } \u8f93\u51fa\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 5 , elements = [ 1 1000000000 2 3 4 ] \u63d2\u5165\u5e8f\u5217\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 2 3 1 2 3 4 ] \u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6vector\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u8fc7\u7c7b\u578b\u8981\u4e00\u81f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v1 . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 102 103 1 2 3 4 ] erase() \u00b6 erase()\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a | \u51fd\u6570|\u4f5c\u7528 | |--|--| | v.erase(it) | \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 | | v.erase(first, last) | \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) | \u4f8b\u5982: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . erase ( it ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 3 4 ] \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u7528\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u56fe \u00b6 \u4f8b\u5982\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff1a n n m m a_1 a_1 b_1 b_1 c_1 c_1 \\vdots \\vdots a_m a_m b_m b_m c_m c_m \u5176\u4e2dn\u662f\u8282\u70b9\u6570\uff0cm\u662f\u8fb9\u6570\uff0c\u4e0b\u9762\u6709m\u884c\uff0c\u8868\u793a\u4ece a_i a_i \u5230 b_i b_i \u6709\u4e00\u6761\u6743\u503c\u4e3a c_i c_i \u7684\u8fb9\u3002 \u5047\u8bben,m\u5f88\u5927\uff0c1E5\u5de6\u53f3\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u50a8\uff0c\u800c\u662f\u7528vector\u5219\u53ef\u4ee5\u529e\u5f97\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; const int maxn = 1E5 + 5 ; struct edge { int to , weight ; }; vector < edge > v [ maxn ]; int main () { int n , m ; cin >> n >> m ; while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; v [ a ]. push_back ( { b , c } ); } } \u5b58\u50a8\u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u6570\u636e \u00b6 \u5982\u8f93\u5165\u8bb8\u591a\u5b57\u7b26\u4e32\uff0c\u76f4\u5230\u9047\u5230end\u65f6\u505c\u6b62\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528vector\u5c06\u8fd9\u4e9b\u6570\u636e\u4fdd\u5b58\u8d77\u6765: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { string tmp ; vector < string > v ; while ( cin >> tmp , tmp != \"end\" ) v . push_back ( tmp ); } \u6a21\u62dfstack(vector\u901f\u5ea6\u6bd4stack\u8981\u5feb) \u00b6 stack\u662f\u4e00\u79cd\u540e\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u5b9e\u73b0Tarjan\u6216\u8005\u9012\u5f52\u65f6\u4f1a\u7ecf\u5e38\u7528\u5230\u3002\u56e0\u4e3avector\u901f\u5ea6\u8981\u6bd4\u771f\u6b63\u7684stack\u8981\u5feb\uff0c\u6240\u6709\u5e38\u5e38\u4f7f\u7528vector\u6765\u6a21\u62dfstack\u3002 \u5982stack\u7684push()\u53ef\u4ee5\u7528vector\u7684push_back()\uff0c\u800cpop()\u5219\u53ef\u4ee5\u7528pop_back()\uff1b \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5728vector\u540e\u63d2\u5165\u548c\u5220\u9664\u3001\u4ee5\u53ca\u5143\u7d20\u8bbf\u95ee\u662f O(1) O(1) \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65f6 O(k) O(k) \uff0ck\u662f\u63d2\u5165\u4f4d\u7f6e\u4e4b\u540e\u7684\u5143\u7d20\u4e2a\u6570\u3002","title":"Vector"},{"location":"STL/vector/#vector","text":"","title":"vector"},{"location":"STL/vector/#_1","text":"vector\u53ef\u4ee5\u7406\u89e3\u6210\u53ef\u4ee5\u53d8\u957f\u7684\u6570\u7ec4\uff1b\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684\u3002 vector\u5e38\u7528\u4e8e\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u5927\u5c0f\u4e0d\u786e\u5b9a\uff0c\u7528\u666e\u901a\u6570\u7ec4\u5b58\u50a8\u4f1a\u8d85\u5185\u5b58\u7684\u60c5\u51b5\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <vector>","title":"\u7528\u9014"},{"location":"STL/vector/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/vector/#_3","text":"1 vector < type > name ; type\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b(int\uff0cstruct\uff0cclass...),\u751a\u81f3\u53ef\u4ee5\u662fSTL\u3002 \u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u4fdd\u5b58int\u7c7b\u578b\u7684vector\u7684vector: 1 vector < vector < int > > v ; \u8fd9\u4e2a\u65f6\u5019\uff0cvector\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u53ef\u4ee5\u53d8\u5316\u7684\u6570\u7ec4\u3002","title":"\u5b9a\u4e49"},{"location":"STL/vector/#_4","text":"","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/vector/#_5","text":"\u548c\u666e\u901a\u6570\u7ec4\u4e00\u6837\uff0c\u5047\u8bbe\u6709\u4e00\u4e2avector\u53d8\u91cf\u540d\u4e3av\uff0c\u90a3\u4e48\u8bbf\u95ee\u4f7f\u7528v[i]\u5c31\u53ef\u4ee5\u8bbf\u95eev\u79cd\u7b2ci\u4e2a\u5143\u7d20\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0b\u6807\u7684\u8303\u56f4\u662f 0 - v.size() - 1 \uff0c\u5176\u4e2dsize()\u51fd\u6570\u662f\u8fd4\u56deSTL\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i = 0 ; i < v . size (); ++ i ) cout << v [ i ] << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5","title":"\u4f7f\u7528\u4e0b\u6807"},{"location":"STL/vector/#_6","text":"\u8fed\u4ee3\u5668\u53ef\u4ee5\u7c7b\u6bd4\u6210\u6307\u9488\uff0c\u5b9a\u4e49\u4e3a 1 STL < typename >:: iterator iterator_name ; \u5176\u4e2dSTL\u662f\u6240\u7528STL\u7684\u540d\u79f0\uff0c\u5982vector\uff0c\u4ee5\u53ca\u540e\u9762\u8981\u4ecb\u7ecd\u5230\u7684map\uff0cset\u7b49\u3002 \u5982\u5b9a\u4e49\u4e00\u4e2avector \u7c7b\u578b\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 vector < int >:: iterator it ; \u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u904d\u5386\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( vector < int >:: iterator it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5 \u8fd9\u79cd\u5199\u6cd5\u4e0e\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\u7b49\u4ef7: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; vector < int >:: iterator it = v . begin (); for ( int i = 0 ; i < v . size (); ++ i ) cout << * ( it + i ) << endl ; } \u53ef\u4ee5\u770b\u5230: * v[i]\u4e0e*(it + i)\u4f5c\u7528\u76f8\u540c * \u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86\u81ea\u589e\u548c\u81ea\u51cf\u7684\u64cd\u4f5c\uff0c\u4e0e\u6307\u9488\u7c7b\u4f3c\u3002 * begin()\u51fd\u6570\u8fd4\u56de\u9996\u5143\u7d20\u8fed\u4ee3\u5668\uff0cend()\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u5668\u800c\u4e0d\u662f\u9996\u5143\u7d20\uff0c\u5de6\u95ed\u53f3\u5f00\uff0c\u5176\u5b9e\u540e\u9762\u6709\u5f88\u591a\u51fd\u6570\u90fd\u662f\u6309\u7167\u5de6\u95ed\u53f3\u5f00\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u7684\u3002 \u6ce8\u610f\uff1a * \u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u5fc5\u987b\u548c\u5b9a\u4e49\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u5373\u6211\u4e0d\u80fd\u7528vector< double >\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u8bbf\u95eevector< int >\u578b\u7684vector * \u53ea\u6709vector\u548cstring\u624d\u80fd\u4f7f\u7528it+i\u8fd9\u79cd\u5199\u6cd5 \u5f53\u7136\u8fed\u4ee3\u5668\u9700\u8981\u5199\u8fd9\u4e48\u957f\uff0c\u4e0d\u592a\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 auto \u6539\u5199\u4e0a\u8ff0\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; }","title":"\u4f7f\u7528\u8fed\u4ee3\u5668"},{"location":"STL/vector/#auto","text":"\u5982\u679c\u4ec5\u4ec5\u9700\u8981\u904d\u5386\u6240\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i : v ) cout << i << endl ; } \u6216\u8005\u66f4\u7b80\u5355\u4e00\u70b9\uff0c\u4f7f\u7528auto\uff1a 1 2 3 4 5 int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) cout << i << endl ; } \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u9700\u8981\u8fd9\u6837\u5199: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto & i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u8f93\u51fa\uff1a 1 2 1 2 4 5 2 3 5 6 \u800c\u5982\u679c\u4e0d\u4f7f\u7528\u5f15\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u5219\u4f1a\u8f93\u51fa\uff1a 1 2 1 2 4 5 1 2 4 5 \u539f\u56e0\u662f\u5982\u679c\u4e0d\u9002\u7528\u5f15\u7528\uff0c\u76f8\u5f53\u4e8e\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e86\u4e00\u4e2a\u62f7\u8d1d\uff0c\u800c\u5f15\u7528\u5219\u662f\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e00\u4e2a\u5f15\u7528\uff0c\u5f53\u7136\u53ef\u4ee5\u4fee\u6539\u771f\u6b63\u7684\u503c\u3002","title":"\u4f7f\u7528auto\u904d\u5386"},{"location":"STL/vector/#_7","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/vector/#push_backpop_back","text":"push_back()\u6545\u540d\u601d\u610f\uff0c\u5c31\u662f\u518d\u5f53\u524dvector\u7684\u540e\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u800cpop_back()\u5c31\u662f\u518dvector\u540e\u8fb9\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . pop_back (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 2 3 ]","title":"push_back()\u4e0epop_back()"},{"location":"STL/vector/#clearempty","text":"clear()\u7528\u4e8e\u6e05\u7a7aSTL\uff0cempty()\u662f\u7528\u4e8e\u5224\u65adSTL\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\uff1b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . clear (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 0 , elements = [ ] clear()\u7684\u529f\u80fd\u8fd9\u79cd\u5199\u6cd5\u4e0e\u4ee5\u4e0b\u5199\u6cd5\u76f8\u540c: 1 while ( ! v . empty () ) v . pop_back ();","title":"clear()\u4e0eempty()"},{"location":"STL/vector/#insert","text":"insert()\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a | \u51fd\u6570 |\u4f5c\u7528 | |--|--| | v.insert(it, val) | \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val | | v.insert(it, n, x) | \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2ax | | v.insert(it, first, last) | \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 | \u4e3e\u51e0\u4e2a\u4f8b\u5b50: \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( it , 1E9 ); Print ( v ); } \u8f93\u51fa\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 5 , elements = [ 1 1000000000 2 3 4 ] \u63d2\u5165\u5e8f\u5217\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 2 3 1 2 3 4 ] \u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6vector\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u8fc7\u7c7b\u578b\u8981\u4e00\u81f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v1 . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 102 103 1 2 3 4 ]","title":"insert()"},{"location":"STL/vector/#erase","text":"erase()\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a | \u51fd\u6570|\u4f5c\u7528 | |--|--| | v.erase(it) | \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 | | v.erase(first, last) | \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) | \u4f8b\u5982: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . erase ( it ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 3 4 ]","title":"erase()"},{"location":"STL/vector/#_8","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/vector/#_9","text":"\u4f8b\u5982\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff1a n n m m a_1 a_1 b_1 b_1 c_1 c_1 \\vdots \\vdots a_m a_m b_m b_m c_m c_m \u5176\u4e2dn\u662f\u8282\u70b9\u6570\uff0cm\u662f\u8fb9\u6570\uff0c\u4e0b\u9762\u6709m\u884c\uff0c\u8868\u793a\u4ece a_i a_i \u5230 b_i b_i \u6709\u4e00\u6761\u6743\u503c\u4e3a c_i c_i \u7684\u8fb9\u3002 \u5047\u8bben,m\u5f88\u5927\uff0c1E5\u5de6\u53f3\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u50a8\uff0c\u800c\u662f\u7528vector\u5219\u53ef\u4ee5\u529e\u5f97\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; const int maxn = 1E5 + 5 ; struct edge { int to , weight ; }; vector < edge > v [ maxn ]; int main () { int n , m ; cin >> n >> m ; while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; v [ a ]. push_back ( { b , c } ); } }","title":"\u7528\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u56fe"},{"location":"STL/vector/#_10","text":"\u5982\u8f93\u5165\u8bb8\u591a\u5b57\u7b26\u4e32\uff0c\u76f4\u5230\u9047\u5230end\u65f6\u505c\u6b62\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528vector\u5c06\u8fd9\u4e9b\u6570\u636e\u4fdd\u5b58\u8d77\u6765: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { string tmp ; vector < string > v ; while ( cin >> tmp , tmp != \"end\" ) v . push_back ( tmp ); }","title":"\u5b58\u50a8\u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u6570\u636e"},{"location":"STL/vector/#stackvectorstack","text":"stack\u662f\u4e00\u79cd\u540e\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u5b9e\u73b0Tarjan\u6216\u8005\u9012\u5f52\u65f6\u4f1a\u7ecf\u5e38\u7528\u5230\u3002\u56e0\u4e3avector\u901f\u5ea6\u8981\u6bd4\u771f\u6b63\u7684stack\u8981\u5feb\uff0c\u6240\u6709\u5e38\u5e38\u4f7f\u7528vector\u6765\u6a21\u62dfstack\u3002 \u5982stack\u7684push()\u53ef\u4ee5\u7528vector\u7684push_back()\uff0c\u800cpop()\u5219\u53ef\u4ee5\u7528pop_back()\uff1b","title":"\u6a21\u62dfstack(vector\u901f\u5ea6\u6bd4stack\u8981\u5feb)"},{"location":"STL/vector/#_11","text":"\u5728vector\u540e\u63d2\u5165\u548c\u5220\u9664\u3001\u4ee5\u53ca\u5143\u7d20\u8bbf\u95ee\u662f O(1) O(1) \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65f6 O(k) O(k) \uff0ck\u662f\u63d2\u5165\u4f4d\u7f6e\u4e4b\u540e\u7684\u5143\u7d20\u4e2a\u6570\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"basic-algorithm/adding-doubling/","text":"\u500d\u589e \u00b6 \u500d\u589e\u601d\u60f3 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6570\u5217A\uff0c\u7136\u540e\u8fdb\u884c\u82e5\u5e72\u6b21\u8be2\u95ee\uff0c\u6bcf\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570T\uff0c\u6c42\u51fa\u6700\u5927\u7684 k \uff0c \\sum_{i=1}^k {A[i]}\\leq T \\sum_{i=1}^k {A[i]}\\leq T \u3002 \u4f60\u7684\u7b97\u6cd5\u5fc5\u987b\u662f\u5728\u7ebf\u7684\uff0c\u5047\u8bbe 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} \u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u8fd9\u6837\u4e00\u79cd\u500d\u589e\u7b97\u6cd5\uff1a \u5148\u82b1\u8d39O(N)\u7684\u65f6\u95f4\u9884\u5904\u7406\u51fa\u524d\u7f00\u548c\u6570\u7ec4S 1\u3001\u4ee4 p=1\uff0ck=0\uff0csum=0; 2\u3001\u6bd4\u8f83\u201cA\u6570\u7ec4\u4e2d k \u4e4b\u540e\u7684 p \u4e2a\u6570\u7684\u548c\u52a0\u4e0asum\u201d\u4e0e T \u7684\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c sum+S[k+p]-S[k]<=T \uff0c\u5219\u4ee4 sum+=S[k+p]-S[k] , k+=p , p*=2 , \u5373\u7d2f\u52a0\u4e0a\u8fd9p\u4e2a\u6570\u7684\u548c\uff0c\u7136\u540e\u628a p \u7684\u8de8\u5ea6\u589e\u957f\u4e00\u500d\u3002\u5982\u679c sum+S[k+p]-S[k]>T,\u5219\u4ee4 p/=2\u3002 3\u3001\u91cd\u590d\u4e0a\u4e00\u6b65\uff0c\u76f4\u5230 p \u7684\u503c\u53d8\u4e3a 0 \uff0c\u6b64\u65f6 k \u5c31\u662f\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int n , A [ maxn ], T , S [ maxn ]; int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> A [ i ]; S [ i ] = A [ i ] + S [ i - 1 ]; } while ( cin >> T ) { int p = 1 , k = 0 , sum = 0 ; while ( p != 0 ) { if ( sum + S [ k + p ] - S [ k ] <= T ) { sum += S [ k + p ] - S [ k ]; k += p ; p *= 2 ; } else p /= 2 ; } cout << k << endl ; } return 0 ; } \u500d\u589e\u7684\u5e94\u7528 \u00b6 \u6700\u8fd1\u516c\u5171\u7956\u5148(lca) \u5229\u7528\u4e8c\u8fdb\u5236\u7684\u601d\u60f3\uff0c\u60f3\u529e\u6cd5\u4f7f\u4e00\u6b65\u4e00\u6b65\u5411\u4e0a\u641c\u7d22\u53d8\u6210\u4ee5 2^{k} 2^{k} \u7684\u5411\u4e0a\u8df3\u3002\u6240\u4ee5\u5b9a\u4e49\u4e00\u4e2af[][]\u6570\u7ec4\uff0c\u4f7ff[j][i]\u8868\u793a\u8282\u70b9i\u7684 2^{j} 2^{j} \u500d\u7956\u5148\u3002 \u5feb\u901f\u5e42 \u7ed9\u51fax\uff0cy\uff0cp\uff0c\u6c42 x^{y} x^{y} %p\uff0c\u5982\u679cx,y\u7684\u6570\u636e\u5f88\u5927\u7684\u8bdd\uff0cO(n)\u7684\u7b97\u6cd5\u4f1a\u8d85\u65f6\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u7684\u65b9\u6cd5\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570 \u5148\u6c42\u51fa x^{1} x^{1} x^{2} x^{2} x^{4} x^{4} x^{8} x^{8} .....(\u4e0d\u8fc7\u51e0\u5341\u6b21\u8fd0\u7b97) \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2ay, x^{y} x^{y} \u90fd\u53ef\u4ee5\u7531\u4e0a\u9762\u7684\u9879\u505a\u4e58\u79ef\u5f97\u5230\uff08\u4e5f\u4e0d\u8fc7\u662f\u51e0\u5341\u6b21\u8fd0\u7b97\uff09 \u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u8fd0\u7b97\u6b21\u6570 RMQ\u6c42\u533a\u95f4\u6700\u503c\u95ee\u9898 \u7ed9\u51fan\u4e2a\u6570\u7ec4\u6210\u7684\u6570\u5217\uff0cq\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fax\uff0cy\u95eex~y\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f \u5982\u679c\u76f4\u63a5\u66b4\u529b\u7684\u8bdd\u590d\u6742\u5ea6O(n*q) RMQ\u7b97\u6cd5\u4e5f\u662f\u7528\u5230\u4e86\u500d\u589e\u7684\u65b9\u6cd5 f(i,1)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e1\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,2)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e2\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,3)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e4\u4e2a\u6570\u7684\u6700\u5c0f\u503c \u5219\u9012\u63a8\u5f0f\u5373\u4e3af(i,k)=min(f(i,k-1),f(i+ 2^{k-2} 2^{k-2} ,k-1)) \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*logn+q) O(n*logn+q)","title":"\u500d\u589e"},{"location":"basic-algorithm/adding-doubling/#_1","text":"","title":"\u500d\u589e"},{"location":"basic-algorithm/adding-doubling/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6570\u5217A\uff0c\u7136\u540e\u8fdb\u884c\u82e5\u5e72\u6b21\u8be2\u95ee\uff0c\u6bcf\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570T\uff0c\u6c42\u51fa\u6700\u5927\u7684 k \uff0c \\sum_{i=1}^k {A[i]}\\leq T \\sum_{i=1}^k {A[i]}\\leq T \u3002 \u4f60\u7684\u7b97\u6cd5\u5fc5\u987b\u662f\u5728\u7ebf\u7684\uff0c\u5047\u8bbe 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} \u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u8fd9\u6837\u4e00\u79cd\u500d\u589e\u7b97\u6cd5\uff1a \u5148\u82b1\u8d39O(N)\u7684\u65f6\u95f4\u9884\u5904\u7406\u51fa\u524d\u7f00\u548c\u6570\u7ec4S 1\u3001\u4ee4 p=1\uff0ck=0\uff0csum=0; 2\u3001\u6bd4\u8f83\u201cA\u6570\u7ec4\u4e2d k \u4e4b\u540e\u7684 p \u4e2a\u6570\u7684\u548c\u52a0\u4e0asum\u201d\u4e0e T \u7684\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c sum+S[k+p]-S[k]<=T \uff0c\u5219\u4ee4 sum+=S[k+p]-S[k] , k+=p , p*=2 , \u5373\u7d2f\u52a0\u4e0a\u8fd9p\u4e2a\u6570\u7684\u548c\uff0c\u7136\u540e\u628a p \u7684\u8de8\u5ea6\u589e\u957f\u4e00\u500d\u3002\u5982\u679c sum+S[k+p]-S[k]>T,\u5219\u4ee4 p/=2\u3002 3\u3001\u91cd\u590d\u4e0a\u4e00\u6b65\uff0c\u76f4\u5230 p \u7684\u503c\u53d8\u4e3a 0 \uff0c\u6b64\u65f6 k \u5c31\u662f\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int n , A [ maxn ], T , S [ maxn ]; int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> A [ i ]; S [ i ] = A [ i ] + S [ i - 1 ]; } while ( cin >> T ) { int p = 1 , k = 0 , sum = 0 ; while ( p != 0 ) { if ( sum + S [ k + p ] - S [ k ] <= T ) { sum += S [ k + p ] - S [ k ]; k += p ; p *= 2 ; } else p /= 2 ; } cout << k << endl ; } return 0 ; }","title":"\u500d\u589e\u601d\u60f3"},{"location":"basic-algorithm/adding-doubling/#_3","text":"\u6700\u8fd1\u516c\u5171\u7956\u5148(lca) \u5229\u7528\u4e8c\u8fdb\u5236\u7684\u601d\u60f3\uff0c\u60f3\u529e\u6cd5\u4f7f\u4e00\u6b65\u4e00\u6b65\u5411\u4e0a\u641c\u7d22\u53d8\u6210\u4ee5 2^{k} 2^{k} \u7684\u5411\u4e0a\u8df3\u3002\u6240\u4ee5\u5b9a\u4e49\u4e00\u4e2af[][]\u6570\u7ec4\uff0c\u4f7ff[j][i]\u8868\u793a\u8282\u70b9i\u7684 2^{j} 2^{j} \u500d\u7956\u5148\u3002 \u5feb\u901f\u5e42 \u7ed9\u51fax\uff0cy\uff0cp\uff0c\u6c42 x^{y} x^{y} %p\uff0c\u5982\u679cx,y\u7684\u6570\u636e\u5f88\u5927\u7684\u8bdd\uff0cO(n)\u7684\u7b97\u6cd5\u4f1a\u8d85\u65f6\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u7684\u65b9\u6cd5\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570 \u5148\u6c42\u51fa x^{1} x^{1} x^{2} x^{2} x^{4} x^{4} x^{8} x^{8} .....(\u4e0d\u8fc7\u51e0\u5341\u6b21\u8fd0\u7b97) \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2ay, x^{y} x^{y} \u90fd\u53ef\u4ee5\u7531\u4e0a\u9762\u7684\u9879\u505a\u4e58\u79ef\u5f97\u5230\uff08\u4e5f\u4e0d\u8fc7\u662f\u51e0\u5341\u6b21\u8fd0\u7b97\uff09 \u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u8fd0\u7b97\u6b21\u6570 RMQ\u6c42\u533a\u95f4\u6700\u503c\u95ee\u9898 \u7ed9\u51fan\u4e2a\u6570\u7ec4\u6210\u7684\u6570\u5217\uff0cq\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fax\uff0cy\u95eex~y\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f \u5982\u679c\u76f4\u63a5\u66b4\u529b\u7684\u8bdd\u590d\u6742\u5ea6O(n*q) RMQ\u7b97\u6cd5\u4e5f\u662f\u7528\u5230\u4e86\u500d\u589e\u7684\u65b9\u6cd5 f(i,1)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e1\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,2)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e2\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,3)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e4\u4e2a\u6570\u7684\u6700\u5c0f\u503c \u5219\u9012\u63a8\u5f0f\u5373\u4e3af(i,k)=min(f(i,k-1),f(i+ 2^{k-2} 2^{k-2} ,k-1)) \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*logn+q) O(n*logn+q)","title":"\u500d\u589e\u7684\u5e94\u7528"},{"location":"basic-algorithm/binary-research/","text":"\u4e8c\u5206 \u00b6 \u6574\u6570\u96c6\u5408\u4e0a\u7684\u4e8c\u5206 \u00b6 \u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\geq \\geq x \u7684\u6570\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; else l = mid + 1 ; } \u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\leq \\leq x \u7684\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; else r = mid - 1 ; } \u5b9e\u6570\u57df\u4e0a\u7684\u4e8c\u5206 \u00b6 \u786e\u5b9a\u597d\u6240\u9700\u7684\u7cbe\u5ea6eps\uff0c\u4ee5 l+eps<r \u4e3a\u5faa\u73af\u6761\u4ef6\u6bcf\u6b21\u6839\u636e\u5728 mid \u4e0a\u7684\u5224\u5b9a\u9009\u62e9 r=mid \u6216 l=mid\u5373\u53ef\u3002\u4e00\u822c\u9700\u8981\u4fdd\u7559 k \u4f4d\u5c0f\u6570\u65f6\uff0c\u5219\u53d6 eps=10^{-(k+2)} eps=10^{-(k+2)} 1 2 3 4 5 while ( l + eps < r ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } \u6709\u65f6\u7cbe\u5ea6\u4e0d\u5bb9\u6613\u786e\u5b9a\u6216\u8868\u793a\uff0c\u5c31\u5e72\u8106\u91c7\u7528\u5faa\u73af\u56fa\u5b9a\u6b21\u6570\u7684\u4e8c\u5206\u65b9\u6cd5\uff0c\u4e5f\u662f\u4e00\u79cd\u76f8\u5f53\u4e0d\u9519\u7684\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u7684\u7cbe\u5ea6\u901a\u5e38\u6bd4\u8bbe\u7f6eeps\u66f4\u9ad8\u3002 1 2 3 4 5 for ( int i = 0 ; i < 100 ; i ++ ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } \u4e8c\u5206\u7b54\u6848\u8f6c\u5316\u4e3a\u5224\u5b9a \u00b6 \u628a\u6c42\u6700\u4f18\u89e3\u7684\u95ee\u9898\uff0c\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u4e00\u4e2a\u503cmid\uff0c\u5224\u5b9a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u53ef\u884c\u65b9\u6848\u8bc4\u5206\u8fbe\u5230mid\u7684\u95ee\u9898\u3002 \u6709N\u672c\u4e66\u6392\u6210\u4e00\u884c\uff0c\u5df2\u77e5\u7b2ci\u672c\u4e66\u7684\u539a\u5ea6\u662fAi\u3002\u628a\u4ed6\u4eec\u5206\u6210\u8fde\u7eed\u7684M\u7ec4\uff0c\u4f7fT\u6700\u5c0f\u5316\uff0c\u5176\u4e2dT\u8868\u793a\u539a\u5ea6\u4e4b\u548c\u6700\u5927\u7684\u4e00\u7ec4\u7684\u539a\u5ea6\u3002 \u9898\u76ee\u4e2d\u63cf\u8ff0\u4e2d\u51fa\u73b0\u4e86\u7c7b\u4f3c\u4e8e\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u7684\u542b\u4e49\uff0c\u8fd9\u662f\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u53ef\u7528\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\u7684\u6700\u5e38\u89c1\u3001\u6700\u5178\u578b\u7684\u7279\u5f81\u4e4b\u4e00\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool check ( int size ) { int group = 1 , rest = size ; for ( int i = 1 ; i <= n ; i ++ ) { if ( rest > a [ i ]) rest -= a [ i ]; else group ++ , rest = size - a [ i ]; } return group <= m ; } int main () { int l = 0 , r = sum_of_ai ; while ( l < r ) { int mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid + 1 ; } cout << l << endl ; } \u4e24\u4e2a\u5e38\u7528\u7684\u51fd\u6570 \u00b6 lower_bound( )\u548cupper_bound( )\u90fd\u662f\u5229\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\u5728\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u4e2d\u8fdb\u884c\u67e5\u627e\u7684\u3002 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c lower_bound( begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7dlower_bound()\u548cupper_bound() lower_bound( begin,end,num,greater () ):\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num,greater () ):\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002","title":"\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_1","text":"","title":"\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_2","text":"\u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\geq \\geq x \u7684\u6570\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; else l = mid + 1 ; } \u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\leq \\leq x \u7684\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; else r = mid - 1 ; }","title":"\u6574\u6570\u96c6\u5408\u4e0a\u7684\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_3","text":"\u786e\u5b9a\u597d\u6240\u9700\u7684\u7cbe\u5ea6eps\uff0c\u4ee5 l+eps<r \u4e3a\u5faa\u73af\u6761\u4ef6\u6bcf\u6b21\u6839\u636e\u5728 mid \u4e0a\u7684\u5224\u5b9a\u9009\u62e9 r=mid \u6216 l=mid\u5373\u53ef\u3002\u4e00\u822c\u9700\u8981\u4fdd\u7559 k \u4f4d\u5c0f\u6570\u65f6\uff0c\u5219\u53d6 eps=10^{-(k+2)} eps=10^{-(k+2)} 1 2 3 4 5 while ( l + eps < r ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } \u6709\u65f6\u7cbe\u5ea6\u4e0d\u5bb9\u6613\u786e\u5b9a\u6216\u8868\u793a\uff0c\u5c31\u5e72\u8106\u91c7\u7528\u5faa\u73af\u56fa\u5b9a\u6b21\u6570\u7684\u4e8c\u5206\u65b9\u6cd5\uff0c\u4e5f\u662f\u4e00\u79cd\u76f8\u5f53\u4e0d\u9519\u7684\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u7684\u7cbe\u5ea6\u901a\u5e38\u6bd4\u8bbe\u7f6eeps\u66f4\u9ad8\u3002 1 2 3 4 5 for ( int i = 0 ; i < 100 ; i ++ ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; }","title":"\u5b9e\u6570\u57df\u4e0a\u7684\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_4","text":"\u628a\u6c42\u6700\u4f18\u89e3\u7684\u95ee\u9898\uff0c\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u4e00\u4e2a\u503cmid\uff0c\u5224\u5b9a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u53ef\u884c\u65b9\u6848\u8bc4\u5206\u8fbe\u5230mid\u7684\u95ee\u9898\u3002 \u6709N\u672c\u4e66\u6392\u6210\u4e00\u884c\uff0c\u5df2\u77e5\u7b2ci\u672c\u4e66\u7684\u539a\u5ea6\u662fAi\u3002\u628a\u4ed6\u4eec\u5206\u6210\u8fde\u7eed\u7684M\u7ec4\uff0c\u4f7fT\u6700\u5c0f\u5316\uff0c\u5176\u4e2dT\u8868\u793a\u539a\u5ea6\u4e4b\u548c\u6700\u5927\u7684\u4e00\u7ec4\u7684\u539a\u5ea6\u3002 \u9898\u76ee\u4e2d\u63cf\u8ff0\u4e2d\u51fa\u73b0\u4e86\u7c7b\u4f3c\u4e8e\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u7684\u542b\u4e49\uff0c\u8fd9\u662f\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u53ef\u7528\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\u7684\u6700\u5e38\u89c1\u3001\u6700\u5178\u578b\u7684\u7279\u5f81\u4e4b\u4e00\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool check ( int size ) { int group = 1 , rest = size ; for ( int i = 1 ; i <= n ; i ++ ) { if ( rest > a [ i ]) rest -= a [ i ]; else group ++ , rest = size - a [ i ]; } return group <= m ; } int main () { int l = 0 , r = sum_of_ai ; while ( l < r ) { int mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid + 1 ; } cout << l << endl ; }","title":"\u4e8c\u5206\u7b54\u6848\u8f6c\u5316\u4e3a\u5224\u5b9a"},{"location":"basic-algorithm/binary-research/#_5","text":"lower_bound( )\u548cupper_bound( )\u90fd\u662f\u5229\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\u5728\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u4e2d\u8fdb\u884c\u67e5\u627e\u7684\u3002 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c lower_bound( begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7dlower_bound()\u548cupper_bound() lower_bound( begin,end,num,greater () ):\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num,greater () ):\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002","title":"\u4e24\u4e2a\u5e38\u7528\u7684\u51fd\u6570"},{"location":"basic-algorithm/introduction/","text":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005 \u00b6 freshman_lcx","title":"\u7b80\u4ecb"},{"location":"basic-algorithm/introduction/#_1","text":"freshman_lcx","title":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005"},{"location":"basic-algorithm/two-pointers/","text":"\u5c3a\u53d6 \u00b6 \u9996\u5148\uff0c\u5c3a\u53d6\u6cd5\u5c31\u662f\u5f62\u5982\u4e00\u628a\u5c3a\u5b50\u7684\u65b9\u6cd5\uff0c\u53bb\u4e00\u5757\u4e00\u5757\u7684\u622a\u53d6\u4f60\u6240\u9700\u8981\u7684\u5e8f\u5217\u3002 \u7ed9\u4f60\u4e00\u4e2an\u548cs\uff0c\u7136\u540e\u7ed9\u51fan\u4e2a\u6570\uff0c\u6c42\u8fd9n\u4e2a\u6570\u4e2d\u548c\u5927\u4e8e\u7b49\u4e8es\u7684\u6700\u5c0f\u8fde\u7eed\u5e8f\u5217\u3002_ \u770b\u4e00\u4e0b\u4e00\u7ec4\u6570\u636e 10 15 5 1 3 5 10 7 4 9 2 8 \u5728\u4e0d\u8003\u8651\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fd9\u6837\u5e72 1 2 3 4 5 6 7 8 for ( l = 1 ; l <= n ; l ++ ) //>\u4ece\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u53d6\u533a\u95f4\u4e0b\u9650l { for ( r = l ; l <= n ; l ++ ) //\u5728\u533a\u95f4\u4e0b\u9650\u53f3\u8fb9\u53d6\u533a\u95f4\u4e0a\u9650r { check ( l , r ); //\u5224\u65ad\u533a\u95f4[l,r]\u4e2d\u6570\u7684\u548c\u662f\u5426\u5927\u4e8e\u7b49\u4e8es,\u662f\u5c31\u548c\u6700\u5c0f\u957f\u5ea6\u6bd4\u8f83\u3002 if ( check ) minlen = min ( minlen , r - l + 1 ) } } \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O( n^{2} n^{2} ) \u5c3a\u53d6\u6cd5\u662f\u8fd9\u6837\u505a\u7684 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int main () { int i , t , l , r ; int n , s ; int sum , len ; int a [ N ]; scanf ( \"%d\" , & t ); while ( t -- ) { sum = 0 ; scanf ( \"%d%d\" , & n , & s ); len = n + 1 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( l = 1 , r = 1 ; r <= n ; r ++ ) //\u8bbe\u5b9a\u5de6\u53f3\u533a\u95f4\u521d\u59cb\u5316\u4e3a1 { sum += a [ r ]; //\u4e0d\u65ad\u6269\u5927\u53f3\u533a\u95f4 if ( sum < s ) continue ; //\u76f4\u5230sum\u7684\u503c\u5927\u4e8e\u7ed9\u51fa\u7684s while ( sum - a [ l ] >= s ) sum -= a [ l ++ ]; //\u7136\u540e\u7f29\u51cf\u533a\u95f4\uff0c\u5373\u6269\u5927\u5de6\u533a\u95f4\uff0c\u628a \u591a\u4f59\u90e8\u5206\u8e22\u6389 //\u4f7f\u533a\u95f4\u6700\u5c0f len = min ( len , r - l + 1 ); //\u5f97\u5230\u533a\u95f4[l,r]\uff0c\u5224\u65ad\u957f\u5ea6 } //\u5f80\u590d if ( len == n + 1 ) printf ( \"%d \\n \" , 0 ); else printf ( \"%d \\n \" , len ); }","title":"\u5c3a\u53d6"},{"location":"basic-algorithm/two-pointers/#_1","text":"\u9996\u5148\uff0c\u5c3a\u53d6\u6cd5\u5c31\u662f\u5f62\u5982\u4e00\u628a\u5c3a\u5b50\u7684\u65b9\u6cd5\uff0c\u53bb\u4e00\u5757\u4e00\u5757\u7684\u622a\u53d6\u4f60\u6240\u9700\u8981\u7684\u5e8f\u5217\u3002 \u7ed9\u4f60\u4e00\u4e2an\u548cs\uff0c\u7136\u540e\u7ed9\u51fan\u4e2a\u6570\uff0c\u6c42\u8fd9n\u4e2a\u6570\u4e2d\u548c\u5927\u4e8e\u7b49\u4e8es\u7684\u6700\u5c0f\u8fde\u7eed\u5e8f\u5217\u3002_ \u770b\u4e00\u4e0b\u4e00\u7ec4\u6570\u636e 10 15 5 1 3 5 10 7 4 9 2 8 \u5728\u4e0d\u8003\u8651\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fd9\u6837\u5e72 1 2 3 4 5 6 7 8 for ( l = 1 ; l <= n ; l ++ ) //>\u4ece\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u53d6\u533a\u95f4\u4e0b\u9650l { for ( r = l ; l <= n ; l ++ ) //\u5728\u533a\u95f4\u4e0b\u9650\u53f3\u8fb9\u53d6\u533a\u95f4\u4e0a\u9650r { check ( l , r ); //\u5224\u65ad\u533a\u95f4[l,r]\u4e2d\u6570\u7684\u548c\u662f\u5426\u5927\u4e8e\u7b49\u4e8es,\u662f\u5c31\u548c\u6700\u5c0f\u957f\u5ea6\u6bd4\u8f83\u3002 if ( check ) minlen = min ( minlen , r - l + 1 ) } } \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O( n^{2} n^{2} ) \u5c3a\u53d6\u6cd5\u662f\u8fd9\u6837\u505a\u7684 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int main () { int i , t , l , r ; int n , s ; int sum , len ; int a [ N ]; scanf ( \"%d\" , & t ); while ( t -- ) { sum = 0 ; scanf ( \"%d%d\" , & n , & s ); len = n + 1 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( l = 1 , r = 1 ; r <= n ; r ++ ) //\u8bbe\u5b9a\u5de6\u53f3\u533a\u95f4\u521d\u59cb\u5316\u4e3a1 { sum += a [ r ]; //\u4e0d\u65ad\u6269\u5927\u53f3\u533a\u95f4 if ( sum < s ) continue ; //\u76f4\u5230sum\u7684\u503c\u5927\u4e8e\u7ed9\u51fa\u7684s while ( sum - a [ l ] >= s ) sum -= a [ l ++ ]; //\u7136\u540e\u7f29\u51cf\u533a\u95f4\uff0c\u5373\u6269\u5927\u5de6\u533a\u95f4\uff0c\u628a \u591a\u4f59\u90e8\u5206\u8e22\u6389 //\u4f7f\u533a\u95f4\u6700\u5c0f len = min ( len , r - l + 1 ); //\u5f97\u5230\u533a\u95f4[l,r]\uff0c\u5224\u65ad\u957f\u5ea6 } //\u5f80\u590d if ( len == n + 1 ) printf ( \"%d \\n \" , 0 ); else printf ( \"%d \\n \" , len ); }","title":"\u5c3a\u53d6"},{"location":"c-basic/array/","text":"\u57fa\u672c\u683c\u5f0f \u00b6 1 type arrayName [ arraySize ]; \u4e00\u7ef4\u6570\u7ec4 \u00b6 1 2 3 4 5 int a [ 1005 ]; int b [ 3 ] = { 1 , 2 , 3 }; int c [] = { 1 , 2 , 3 }; scanf ( \"%d\" , & a [ 0 ]); printf ( \"%d\" , c [ 3 ]); // \u8d8a\u754c \u4e8c\u7ef4\u6570\u7ec4 \u00b6 1 double mp [ 105 ][ 105 ]; \u5b57\u7b26\u6570\u7ec4 \u00b6 1 2 3 char d [ 105 ] = { '\\0' }; char parr [] = \"zifushuzu\" ; char charr [] = { 'z' , 'i' , 'f' , 'u' , 's' , 'h' , 'u' , 'z' , 'u' }; * \u8bfb\u5165\u65f6\u6ce8\u610f\u56de\u8f66\u4e0e\u7a7a\u683c","title":"\u6570\u7ec4"},{"location":"c-basic/array/#_1","text":"1 type arrayName [ arraySize ];","title":"\u57fa\u672c\u683c\u5f0f"},{"location":"c-basic/array/#_2","text":"1 2 3 4 5 int a [ 1005 ]; int b [ 3 ] = { 1 , 2 , 3 }; int c [] = { 1 , 2 , 3 }; scanf ( \"%d\" , & a [ 0 ]); printf ( \"%d\" , c [ 3 ]); // \u8d8a\u754c","title":"\u4e00\u7ef4\u6570\u7ec4"},{"location":"c-basic/array/#_3","text":"1 double mp [ 105 ][ 105 ];","title":"\u4e8c\u7ef4\u6570\u7ec4"},{"location":"c-basic/array/#_4","text":"1 2 3 char d [ 105 ] = { '\\0' }; char parr [] = \"zifushuzu\" ; char charr [] = { 'z' , 'i' , 'f' , 'u' , 's' , 'h' , 'u' , 'z' , 'u' }; * \u8bfb\u5165\u65f6\u6ce8\u610f\u56de\u8f66\u4e0e\u7a7a\u683c","title":"\u5b57\u7b26\u6570\u7ec4"},{"location":"c-basic/function/","text":"\u51fd\u6570 \u00b6 \u5b9a\u4e49 \u00b6 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u8bed\u53e5\u7ec4(\u51fd\u6570\u4f53); \u8fd4\u56de\u503c; } * \u51fd\u6570\u4e0d\u5141\u8bb8\u5d4c\u5957\u5b9a\u4e49 \uff0c\u4f46\u662f\u5141\u8bb8\u5d4c\u5957\u4f7f\u7528\u3002 1 2 3 4 5 6 int sum ( int a , int b ) { int ans = 0 ; ans = a + b ; return ans ; } * \u4e00\u65e6\u4f7f\u7528\u5934\u6587\u4ef6\u540e\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u5e93\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528 <stdio.h> \u540e\u4e0d\u80fd\u518d\u81ea\u5df1\u5b9a\u4e49 printf \u51fd\u6570\u3002\u539f\u5219\u4e0a\uff0c\u5e73\u5e38\u5b9a\u4e49\u51fd\u6570\u65f6\u4e5f\u5e94\u5c3d\u91cf\u907f\u514d\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\u3002 \u8c03\u7528 \u00b6 \u8c03\u7528\u51fd\u6570\uff1a \u51fd\u6570\u540d\uff08\u53c2\u65701, \u53c2\u65702\uff0c\u2026\u2026\uff09 \u5bf9\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7531\u51fd\u6570\u5185\u90e8\u7684 return \u8bed\u53e5\u51b3\u5b9a\u3002 printf \u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u7684\u58f0\u660e\u5728 <stdio.h> \u5934\u6587\u4ef6\u91cc\u3002 Q: \u4e3a\u4ec0\u4e48\u5927\u4fa0\u4eec\u4f7f\u7528\u7edd\u62db\u65f6\u90fd\u8981\u5148\u558a\u4e00\u58f0\u201c\u964d\u9f99\u5341\u516b\u638c\u201d\u4e4b\u7c7b\u7684\uff1f A: \u56e0\u4e3a \u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8981\u5148\u58f0\u660e \u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int sum ( int a , int b ); //\u58f0\u660e int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , sum ( a , b )); } int sum ( int a , int b ) { return a + b ; } \u8fd4\u56de\u503c \u00b6 return\u8bed\u53e5\u8bed\u6cd5\u5982\u4e0b\uff1a \u2003 return \u8fd4\u56de\u503c\uff1b return\u8bed\u53e5\u7684\u529f\u80fd\u662f \u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u201c\u8fd4\u56de\u503c\u201d\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de \u3002\u201c\u8fd4\u56de\u503c\u201d\u662f\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u5747\u53ef\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0creturn\u8bed\u53e5\u5c31\u76f4\u63a5\u5199 return ; * 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [] = { 1 , 1 , 2 , 3 , 5 , 8 , 13 }; void show ( int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d \" , a [ i ]); return ; } int Max ( int x , int y ) // \u6c42\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\u4e2d\u7684\u8f83\u5927\u503c { if ( x > y ) return x ; return y ; // \u9664void\u5916\u51fd\u6570\u4e00\u5b9a\u8981\u6709\u8fd4\u56de\uff0c\u8fd4\u56de\u610f\u5473\u7740\u51fd\u6570\u7ed3\u675f } \u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf \u00b6 \u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <stdio.h> int a [ 105 ]; //\u6570\u7ec4a-\u5168\u5c40 int n ; //n-\u5168\u5c40 int muln ( int x ) //x-\u5c40\u90e8 { int t ; //t-\u5c40\u90e8 t = x * n ; return t ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) //i-\u5c40\u90e8 scanf ( \"%d\" , & a [ i ]); } \u5168\u5c40\u53d8\u91cf \u00b6 \u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u4f4d\u4e8e\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u540e\u9762\u7684\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528\u3002 \u8fc7\u591a\u5730\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u589e\u52a0\u8c03\u8bd5\u96be\u5ea6\u3002\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u90fd\u80fd\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 \u5168\u5c40\u53d8\u91cf\u5728\u5b9a\u4e49\u65f6\u9ed8\u8ba4\u521d\u503c\u4e3a0\u3002 \u5c40\u90e8\u53d8\u91cf \u00b6 \u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u5728\u5b9a\u4e49\u8be5\u53d8\u91cf\u7684\u51fd\u6570\u5185\u90e8\uff0c\u5c40\u90e8\u53d8\u91cf\u53ea\u5728\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u5185\u6709\u6548\u3002 \u5728\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u540d\u53ef\u4ee5\u76f8\u540c\u3002 \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u548c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u540d\u7684\uff0c\u5728\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u5c40\u90e8\u53d8\u91cf\u6709\u6548\u3002\u4f46\u6613\u51fa\u9519\uff01\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u5c06\u88ab\u9650\u5236\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u3002\u5982 for(int i; i<=n; i++) sum += i; \u4e2d\u7684 i \u662f\u5728\u8be5 for \u5faa\u73af\u8bed\u53e5\u4e2d\u5b9a\u4e49\u7684\uff0c\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u53ea\u80fd\u88ab\u9650\u5236\u5728\u8be5for\u5faa\u73af\u8bed\u53e5\u4e2d\u3002 \u5c40\u90e8\u53d8\u91cf\u503c\u662f\u968f\u673a\u7684\uff0c\u8981 \u521d\u59cb\u5316\u521d\u503c \u3002 \u5c40\u90e8\u53d8\u91cf\u53d7\u6808\u7a7a\u95f4\u5927\u5c0f\u9650\u5236\uff0c\u5927\u6570\u7ec4\u9700\u8981\u6ce8\u610f\u3002\u901a\u4fd7\u5730\u8bf4\uff0cmain\u51fd\u6570\u91cc\u6570\u7ec4\u4e0d\u80fd\u5f00\u5f88\u5927\uff08\u5341\u4e07\u7ea7\u522b\uff09\u3002 \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012 \u00b6 \u539f\u5219\uff1a \u7528\u4ec0\u4e48\u4f20\u4ec0\u4e48 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u51fd\u6570\u4f53; \u8fd4\u56de\u503c; } \u6574\u578b/\u5b9e\u578b\u53d8\u91cf\u4f5c\u51fd\u6570\u53c2\u6570 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 double dis ( double x1 , double y1 , double x2 , double y2 ) { return sqrt (( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )); } int fun ( double x ) { return x ; //double -> int \u7c7b\u578b\u8f6c\u6362 } int Max ( int a , int b ) { return a > b ? a : b ; } \u4e00\u7ef4\u6570\u7ec4\u4f5c\u51fd\u6570\u53c2\u6570 \u00b6 \u5199\u6cd5\u5982\u4e0b\uff1a \u51fd\u6570\u7c7b\u578b \u51fd\u6570\u540d(\u6570\u7ec4\u7c7b\u578b\u540d \u6570\u7ec4\u540d[]) \u4e0d\u7528\u5199\u51fa\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 void PrintArray ( int a []) { ... } int b [] = { 1 , 2 , 3 }; int main () { PrintArray ( b ); //\u8c03\u7528\u65f6\u53ea\u7528\u5199\u6570\u7ec4\u540d } * \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\u662f\u4f20\u5740\u5f15\u7528\u7684\uff0c\u5373\u5f62\u53c2\u6570\u7ec4\u6539\u53d8\u4e86\uff0c\u5b9e\u53c2\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570 \u00b6 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u5f62\u53c2\u65f6\uff0c\u5fc5\u987b\u5199\u660e\u6570\u7ec4\u6709\u591a\u5c11\u5217\uff0c\u4e0d\u7528\u5199\u660e\u6709\u591a\u5c11\u884c\u3002 1 2 3 4 void PrintArray ( int a [][ 5 ]) { printf ( \"%d\" , a [ 4 ][ 3 ]); } Contributed by LyuLumos","title":"\u51fd\u6570"},{"location":"c-basic/function/#_1","text":"","title":"\u51fd\u6570"},{"location":"c-basic/function/#_2","text":"1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u8bed\u53e5\u7ec4(\u51fd\u6570\u4f53); \u8fd4\u56de\u503c; } * \u51fd\u6570\u4e0d\u5141\u8bb8\u5d4c\u5957\u5b9a\u4e49 \uff0c\u4f46\u662f\u5141\u8bb8\u5d4c\u5957\u4f7f\u7528\u3002 1 2 3 4 5 6 int sum ( int a , int b ) { int ans = 0 ; ans = a + b ; return ans ; } * \u4e00\u65e6\u4f7f\u7528\u5934\u6587\u4ef6\u540e\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u5e93\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528 <stdio.h> \u540e\u4e0d\u80fd\u518d\u81ea\u5df1\u5b9a\u4e49 printf \u51fd\u6570\u3002\u539f\u5219\u4e0a\uff0c\u5e73\u5e38\u5b9a\u4e49\u51fd\u6570\u65f6\u4e5f\u5e94\u5c3d\u91cf\u907f\u514d\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\u3002","title":"\u5b9a\u4e49"},{"location":"c-basic/function/#_3","text":"\u8c03\u7528\u51fd\u6570\uff1a \u51fd\u6570\u540d\uff08\u53c2\u65701, \u53c2\u65702\uff0c\u2026\u2026\uff09 \u5bf9\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7531\u51fd\u6570\u5185\u90e8\u7684 return \u8bed\u53e5\u51b3\u5b9a\u3002 printf \u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u7684\u58f0\u660e\u5728 <stdio.h> \u5934\u6587\u4ef6\u91cc\u3002 Q: \u4e3a\u4ec0\u4e48\u5927\u4fa0\u4eec\u4f7f\u7528\u7edd\u62db\u65f6\u90fd\u8981\u5148\u558a\u4e00\u58f0\u201c\u964d\u9f99\u5341\u516b\u638c\u201d\u4e4b\u7c7b\u7684\uff1f A: \u56e0\u4e3a \u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8981\u5148\u58f0\u660e \u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int sum ( int a , int b ); //\u58f0\u660e int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , sum ( a , b )); } int sum ( int a , int b ) { return a + b ; }","title":"\u8c03\u7528"},{"location":"c-basic/function/#_4","text":"return\u8bed\u53e5\u8bed\u6cd5\u5982\u4e0b\uff1a \u2003 return \u8fd4\u56de\u503c\uff1b return\u8bed\u53e5\u7684\u529f\u80fd\u662f \u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u201c\u8fd4\u56de\u503c\u201d\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de \u3002\u201c\u8fd4\u56de\u503c\u201d\u662f\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u5747\u53ef\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0creturn\u8bed\u53e5\u5c31\u76f4\u63a5\u5199 return ; * 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [] = { 1 , 1 , 2 , 3 , 5 , 8 , 13 }; void show ( int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d \" , a [ i ]); return ; } int Max ( int x , int y ) // \u6c42\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\u4e2d\u7684\u8f83\u5927\u503c { if ( x > y ) return x ; return y ; // \u9664void\u5916\u51fd\u6570\u4e00\u5b9a\u8981\u6709\u8fd4\u56de\uff0c\u8fd4\u56de\u610f\u5473\u7740\u51fd\u6570\u7ed3\u675f }","title":"\u8fd4\u56de\u503c"},{"location":"c-basic/function/#_5","text":"\u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <stdio.h> int a [ 105 ]; //\u6570\u7ec4a-\u5168\u5c40 int n ; //n-\u5168\u5c40 int muln ( int x ) //x-\u5c40\u90e8 { int t ; //t-\u5c40\u90e8 t = x * n ; return t ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) //i-\u5c40\u90e8 scanf ( \"%d\" , & a [ i ]); }","title":"\u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf"},{"location":"c-basic/function/#_6","text":"\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u4f4d\u4e8e\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u540e\u9762\u7684\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528\u3002 \u8fc7\u591a\u5730\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u589e\u52a0\u8c03\u8bd5\u96be\u5ea6\u3002\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u90fd\u80fd\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 \u5168\u5c40\u53d8\u91cf\u5728\u5b9a\u4e49\u65f6\u9ed8\u8ba4\u521d\u503c\u4e3a0\u3002","title":"\u5168\u5c40\u53d8\u91cf"},{"location":"c-basic/function/#_7","text":"\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u5728\u5b9a\u4e49\u8be5\u53d8\u91cf\u7684\u51fd\u6570\u5185\u90e8\uff0c\u5c40\u90e8\u53d8\u91cf\u53ea\u5728\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u5185\u6709\u6548\u3002 \u5728\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u540d\u53ef\u4ee5\u76f8\u540c\u3002 \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u548c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u540d\u7684\uff0c\u5728\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u5c40\u90e8\u53d8\u91cf\u6709\u6548\u3002\u4f46\u6613\u51fa\u9519\uff01\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u5c06\u88ab\u9650\u5236\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u3002\u5982 for(int i; i<=n; i++) sum += i; \u4e2d\u7684 i \u662f\u5728\u8be5 for \u5faa\u73af\u8bed\u53e5\u4e2d\u5b9a\u4e49\u7684\uff0c\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u53ea\u80fd\u88ab\u9650\u5236\u5728\u8be5for\u5faa\u73af\u8bed\u53e5\u4e2d\u3002 \u5c40\u90e8\u53d8\u91cf\u503c\u662f\u968f\u673a\u7684\uff0c\u8981 \u521d\u59cb\u5316\u521d\u503c \u3002 \u5c40\u90e8\u53d8\u91cf\u53d7\u6808\u7a7a\u95f4\u5927\u5c0f\u9650\u5236\uff0c\u5927\u6570\u7ec4\u9700\u8981\u6ce8\u610f\u3002\u901a\u4fd7\u5730\u8bf4\uff0cmain\u51fd\u6570\u91cc\u6570\u7ec4\u4e0d\u80fd\u5f00\u5f88\u5927\uff08\u5341\u4e07\u7ea7\u522b\uff09\u3002","title":"\u5c40\u90e8\u53d8\u91cf"},{"location":"c-basic/function/#_8","text":"\u539f\u5219\uff1a \u7528\u4ec0\u4e48\u4f20\u4ec0\u4e48 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u51fd\u6570\u4f53; \u8fd4\u56de\u503c; }","title":"\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012"},{"location":"c-basic/function/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 double dis ( double x1 , double y1 , double x2 , double y2 ) { return sqrt (( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )); } int fun ( double x ) { return x ; //double -> int \u7c7b\u578b\u8f6c\u6362 } int Max ( int a , int b ) { return a > b ? a : b ; }","title":"\u6574\u578b/\u5b9e\u578b\u53d8\u91cf\u4f5c\u51fd\u6570\u53c2\u6570"},{"location":"c-basic/function/#_10","text":"\u5199\u6cd5\u5982\u4e0b\uff1a \u51fd\u6570\u7c7b\u578b \u51fd\u6570\u540d(\u6570\u7ec4\u7c7b\u578b\u540d \u6570\u7ec4\u540d[]) \u4e0d\u7528\u5199\u51fa\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 void PrintArray ( int a []) { ... } int b [] = { 1 , 2 , 3 }; int main () { PrintArray ( b ); //\u8c03\u7528\u65f6\u53ea\u7528\u5199\u6570\u7ec4\u540d } * \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\u662f\u4f20\u5740\u5f15\u7528\u7684\uff0c\u5373\u5f62\u53c2\u6570\u7ec4\u6539\u53d8\u4e86\uff0c\u5b9e\u53c2\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\u3002","title":"\u4e00\u7ef4\u6570\u7ec4\u4f5c\u51fd\u6570\u53c2\u6570"},{"location":"c-basic/function/#_11","text":"\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u5f62\u53c2\u65f6\uff0c\u5fc5\u987b\u5199\u660e\u6570\u7ec4\u6709\u591a\u5c11\u5217\uff0c\u4e0d\u7528\u5199\u660e\u6709\u591a\u5c11\u884c\u3002 1 2 3 4 void PrintArray ( int a [][ 5 ]) { printf ( \"%d\" , a [ 4 ][ 3 ]); } Contributed by LyuLumos","title":"\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570"},{"location":"c-basic/grammar/","text":"\u8bed\u6cd5\u57fa\u7840 \u00b6 \u7406\u8bba\u77e5\u8bc6 \u00b6 C\u8bed\u8a00\u4e66\u5199\u683c\u5f0f\u662f\u81ea\u7531\u7684\uff0c\u6bcf\u884c\u53ef\u4ee5\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u53ef\u4ee5\u5199\u591a\u884c\u3002 \u4e00\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570\uff0c\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u8d77\u70b9\u3002 \u6bcf\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u5199\u5b8c\u540e\uff0c\u90fd\u662f\u5148\u7f16\u8bd1\uff0c\u540e\u94fe\u63a5\uff0c\u6700\u540e\u8fd0\u884c\u3002\uff08.c->.obj->.exe\uff09\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6ce8\u610f.c\u548c.obj\u6587\u4ef6\u65f6\u65e0\u6cd5\u8fd0\u884c\u7684\uff0c\u53ea\u6709.exe\u6587\u4ef6\u624d\u53ef\u4ee5\u8fd0\u884c\u3002 C\u9762\u5411\u8fc7\u7a0b\uff0cC++\u3001java\u9762\u5411\u5bf9\u8c61\u3002 \u6807\u8bc6\u7b26 \u00b6 \u5408\u6cd5\u7684\u8981\u6c42\u662f\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u662f\u4e0b\u5212\u7ebf\u3002 \u5173\u952e\u5b57\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\u53f7\u3002 main define scanf printf include If \u90fd\u4e0d\u662f\u5173\u952e\u5b57\u3002 \u9a7c\u5cf0\u547d\u540d\u6cd5 \u6574\u6570 \u00b6 \u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 \u77ed\u6574\u578b short 2 -2 15 ~2 15 -1 (32767) \u6574\u578b int 4 -2 31 ~2 31 -1(\u7ea62\u00d710 9 ) \u8d85\u957f\u6574\u578b long long 8 -2 63 ~2 63 -1(\u7ea69\u00d710 18 ) \u65e0\u7b26\u53f7\u6574\u578b unsigned int 4 0~2 32 -1(\u7ea64\u00d710 9 ) \u5176\u4f59\u65e0\u7b26\u53f7\u7c7b\u578b\u540c\u7406 \u5b9e\u6570 \u00b6 \u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u6570\u503c\u8303\u56f4 \u5360\u5b57\u8282\u6570 \u6709\u6548\u4f4d\u6570 \u5355\u7cbe\u5ea6\u5b9e\u578b float -3.4\u00d710 38 ~3.4\u00d710 38 4 6~7\u4f4d \u53cc\u7cbe\u5ea6\u5b9e\u578b double -1.7\u00d710 308 ~1.7\u00d710 308 8 15~16\u4f4d \u5e03\u5c14\u578b bool true \u6216 false 1 \u5168\u6574\u6570\u9664\u6cd5 \u00b6 \u4e24\u4e2a\u6574\u6570\u76f8\u9664\u7ed3\u679c\u8fd8\u662f\u6574\u6570\uff0c 5/2 \u7684\u503c\u4e3a2\u800c\u4e0d\u662f2.5 \u89e3\u51b3\u65b9\u6cd5\uff1a\u81f3\u5c11\u4e00\u4e2a\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u5982 5/2.0 (float)a/b \u9664\u4ee50\u4f1a\u8fd4\u56de NaN \u5b57\u7b26\u578b \u00b6 \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 char 1 -128~127 \u76f4\u63a5\u8868\u793a char c = 'A'; ASCII\u7801\u8868\u793a char ch = 65; \u8f6c\u4e49\u5b57\u7b26 \u6362\u884c\u7b26 '\\n' \u5355\u5f15\u53f7 '\\'' \u53cd\u659c\u6760 '\\\\' \u5b57\u7b26\u578b\u4e5f\u53ef\u4ee5\u505a\u52a0\u51cf\u8fd0\u7b97 \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u00b6 \u8fd0\u7b97\u7b26\u7c7b\u578b \u5e38\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b \u7b97\u672f\u8fd0\u7b97\u7b26 + - * / % ++ -- 5 % 2 \u5173\u7cfb\u8fd0\u7b97\u7b26 > < == >= <= != a == 1 \u903b\u8f91\u8fd0\u7b97\u7b26 && || ! a>0 && a<b \u4f4d\u64cd\u4f5c\u8fd0\u7b97\u7b26 & | ~ ^ << >> 1<<2 \u8d4b\u503c\u8fd0\u7b97\u7b26 = += &= <<= a += 2 \u6761\u4ef6\u8fd0\u7b97\u7b26 ? : a == 1 ? 1 : 0 \u6307\u9488\u8fd0\u7b97\u7b26 * & *it \u8d4b\u503c\u8bed\u53e5 \u00b6 \u683c\u5f0f\uff1a \u2003\u2003 \u53d8\u91cf = \u8868\u8fbe\u5f0f; \u610f\u4e49\uff1a \u2003\u2003\u5c06\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf \u4e00\u5b9a\u8981\u533a\u5206 = \u548c \u7b49\u4e8e\uff0c C\u8bed\u8a00\u4e2d\u5224\u65ad\u76f8\u7b49\u7528 == \u8fd0\u7b97\u7b26 1 2 if ( a = 1 ) //\u00d7 while ( a = 1 ) //\u00d7 \u5728\u8fdb\u884c\u8d4b\u503c\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\uff0c\u7cfb\u7edf\u5c06\u4f1a\u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u6210\u5de6\u8fb9\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u6570\u636e\u4e22\u5931\u3002 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u00b6 \u81ea\u589e\u8868\u8fbe\u5f0f \u00b6 1 2 3 4 5 6 7 8 9 10 int a = 21 ; int c ; // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u4e0d\u4f1a\u81ea\u589e c = a ++ ; // c = 21 a = 22 // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u81ea\u589e c = ++ a ; // c = 23 a = 23 \u4f4d\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u540d\u79f0 \u4f5c\u7528 & \u4e0e \u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1 | \u6216 \u4e24\u4e2a\u4f4d\u90fd\u4e3a0\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a0 ^ \u5f02\u6216 \u4e24\u4e2a\u4f4d\u76f8\u540c\u4e3a0\uff0c\u76f8\u5f02\u4e3a1 ~ \u53d6\u53cd 0\u53d81\uff0c1\u53d80 << \u5de6\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650\uff0c\u6709\u7b26\u53f7\u6570 \u533a\u5206 | \u548c || \uff0c & \u548c && \u6807\u51c6\u8f93\u5165\u8f93\u51fa \u00b6 \u5934\u6587\u4ef6\uff1a <stdio.h> \u8f93\u5165\u51fd\u6570\uff1a scanf(\"%\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26\", &\u53d8\u91cf\u540d); \u8f93\u51fa\u51fd\u6570: printf(\"\u5176\u4ed6\u5b57\u7b26 %\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26 \u5176\u4ed6\u5b57\u7b26\", \u53d8\u91cf\u540d); \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0 scanf \u51fd\u6570\u4e2d\u7684& \u5b57\u7b26\u7c7b\u578b\u53d8\u91cf\u540d = getchar(); \u4f7f\u7528\u65f6\u6ce8\u610f\u5403\u6389\u6362\u884c\u7b26 \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* int %d long long %lld unsigned long long %llu char %c \u5b57\u7b26\u6570\u7ec4 %s float %f double %lf *\u8fd9\u91cc\u4e3a\u4e86\u770b\u7740\u65b9\u4fbf\u52a0\u4e0a\u4e86% 1 2 3 4 5 6 7 8 9 10 int a ; long long b ; char c ; double d = 1.0 ; float f = 2.7 ; scanf ( \"%d%lld\" , & a , & b ); scanf ( \"%c\" , & c ); //\u7a7a\u683c\uff0c\u56de\u8f66\uff0c\u7f29\u8fdb\u90fd\u4f1a\u88ab\u8bfb\u5165\uff0c\u6ce8\u610f\uff01 printf ( \"%d%d\" , a , c ); //c\u88ab\u8f6c\u6362\u6210int\u7c7b\u578b printf ( \"ans = %f %.12lf \\n \" , f , d ); \u53cd\u4f8b\uff1a\u521d\u5b66\u8005\u5e38\u72af\u7684\u9519\u8bef \u00b6 1 2 3 4 5 6 7 8 9 10 int mian () { int a , b ; c , d = 1 ; bool flag1 = ture , flag2 = flase ; scanf ( \"%d\" , a ); printf ( \"%d, b\" ); c = b + 1 e = 2 ab ; return 1 ; }","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"c-basic/grammar/#_1","text":"","title":"\u8bed\u6cd5\u57fa\u7840"},{"location":"c-basic/grammar/#_2","text":"C\u8bed\u8a00\u4e66\u5199\u683c\u5f0f\u662f\u81ea\u7531\u7684\uff0c\u6bcf\u884c\u53ef\u4ee5\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u53ef\u4ee5\u5199\u591a\u884c\u3002 \u4e00\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570\uff0c\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u8d77\u70b9\u3002 \u6bcf\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u5199\u5b8c\u540e\uff0c\u90fd\u662f\u5148\u7f16\u8bd1\uff0c\u540e\u94fe\u63a5\uff0c\u6700\u540e\u8fd0\u884c\u3002\uff08.c->.obj->.exe\uff09\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6ce8\u610f.c\u548c.obj\u6587\u4ef6\u65f6\u65e0\u6cd5\u8fd0\u884c\u7684\uff0c\u53ea\u6709.exe\u6587\u4ef6\u624d\u53ef\u4ee5\u8fd0\u884c\u3002 C\u9762\u5411\u8fc7\u7a0b\uff0cC++\u3001java\u9762\u5411\u5bf9\u8c61\u3002","title":"\u7406\u8bba\u77e5\u8bc6"},{"location":"c-basic/grammar/#_3","text":"\u5408\u6cd5\u7684\u8981\u6c42\u662f\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u662f\u4e0b\u5212\u7ebf\u3002 \u5173\u952e\u5b57\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\u53f7\u3002 main define scanf printf include If \u90fd\u4e0d\u662f\u5173\u952e\u5b57\u3002 \u9a7c\u5cf0\u547d\u540d\u6cd5","title":"\u6807\u8bc6\u7b26"},{"location":"c-basic/grammar/#_4","text":"\u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 \u77ed\u6574\u578b short 2 -2 15 ~2 15 -1 (32767) \u6574\u578b int 4 -2 31 ~2 31 -1(\u7ea62\u00d710 9 ) \u8d85\u957f\u6574\u578b long long 8 -2 63 ~2 63 -1(\u7ea69\u00d710 18 ) \u65e0\u7b26\u53f7\u6574\u578b unsigned int 4 0~2 32 -1(\u7ea64\u00d710 9 ) \u5176\u4f59\u65e0\u7b26\u53f7\u7c7b\u578b\u540c\u7406","title":"\u6574\u6570"},{"location":"c-basic/grammar/#_5","text":"\u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u6570\u503c\u8303\u56f4 \u5360\u5b57\u8282\u6570 \u6709\u6548\u4f4d\u6570 \u5355\u7cbe\u5ea6\u5b9e\u578b float -3.4\u00d710 38 ~3.4\u00d710 38 4 6~7\u4f4d \u53cc\u7cbe\u5ea6\u5b9e\u578b double -1.7\u00d710 308 ~1.7\u00d710 308 8 15~16\u4f4d \u5e03\u5c14\u578b bool true \u6216 false 1","title":"\u5b9e\u6570"},{"location":"c-basic/grammar/#_6","text":"\u4e24\u4e2a\u6574\u6570\u76f8\u9664\u7ed3\u679c\u8fd8\u662f\u6574\u6570\uff0c 5/2 \u7684\u503c\u4e3a2\u800c\u4e0d\u662f2.5 \u89e3\u51b3\u65b9\u6cd5\uff1a\u81f3\u5c11\u4e00\u4e2a\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u5982 5/2.0 (float)a/b \u9664\u4ee50\u4f1a\u8fd4\u56de NaN","title":"\u5168\u6574\u6570\u9664\u6cd5"},{"location":"c-basic/grammar/#_7","text":"\u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 char 1 -128~127 \u76f4\u63a5\u8868\u793a char c = 'A'; ASCII\u7801\u8868\u793a char ch = 65; \u8f6c\u4e49\u5b57\u7b26 \u6362\u884c\u7b26 '\\n' \u5355\u5f15\u53f7 '\\'' \u53cd\u659c\u6760 '\\\\' \u5b57\u7b26\u578b\u4e5f\u53ef\u4ee5\u505a\u52a0\u51cf\u8fd0\u7b97","title":"\u5b57\u7b26\u578b"},{"location":"c-basic/grammar/#_8","text":"\u8fd0\u7b97\u7b26\u7c7b\u578b \u5e38\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b \u7b97\u672f\u8fd0\u7b97\u7b26 + - * / % ++ -- 5 % 2 \u5173\u7cfb\u8fd0\u7b97\u7b26 > < == >= <= != a == 1 \u903b\u8f91\u8fd0\u7b97\u7b26 && || ! a>0 && a<b \u4f4d\u64cd\u4f5c\u8fd0\u7b97\u7b26 & | ~ ^ << >> 1<<2 \u8d4b\u503c\u8fd0\u7b97\u7b26 = += &= <<= a += 2 \u6761\u4ef6\u8fd0\u7b97\u7b26 ? : a == 1 ? 1 : 0 \u6307\u9488\u8fd0\u7b97\u7b26 * & *it","title":"\u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f"},{"location":"c-basic/grammar/#_9","text":"\u683c\u5f0f\uff1a \u2003\u2003 \u53d8\u91cf = \u8868\u8fbe\u5f0f; \u610f\u4e49\uff1a \u2003\u2003\u5c06\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf \u4e00\u5b9a\u8981\u533a\u5206 = \u548c \u7b49\u4e8e\uff0c C\u8bed\u8a00\u4e2d\u5224\u65ad\u76f8\u7b49\u7528 == \u8fd0\u7b97\u7b26 1 2 if ( a = 1 ) //\u00d7 while ( a = 1 ) //\u00d7 \u5728\u8fdb\u884c\u8d4b\u503c\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\uff0c\u7cfb\u7edf\u5c06\u4f1a\u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u6210\u5de6\u8fb9\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u6570\u636e\u4e22\u5931\u3002","title":"\u8d4b\u503c\u8bed\u53e5"},{"location":"c-basic/grammar/#_10","text":"","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"c-basic/grammar/#_11","text":"1 2 3 4 5 6 7 8 9 10 int a = 21 ; int c ; // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u4e0d\u4f1a\u81ea\u589e c = a ++ ; // c = 21 a = 22 // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u81ea\u589e c = ++ a ; // c = 23 a = 23","title":"\u81ea\u589e\u8868\u8fbe\u5f0f"},{"location":"c-basic/grammar/#_12","text":"\u8fd0\u7b97\u7b26 \u540d\u79f0 \u4f5c\u7528 & \u4e0e \u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1 | \u6216 \u4e24\u4e2a\u4f4d\u90fd\u4e3a0\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a0 ^ \u5f02\u6216 \u4e24\u4e2a\u4f4d\u76f8\u540c\u4e3a0\uff0c\u76f8\u5f02\u4e3a1 ~ \u53d6\u53cd 0\u53d81\uff0c1\u53d80 << \u5de6\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650\uff0c\u6709\u7b26\u53f7\u6570 \u533a\u5206 | \u548c || \uff0c & \u548c &&","title":"\u4f4d\u8fd0\u7b97"},{"location":"c-basic/grammar/#_13","text":"\u5934\u6587\u4ef6\uff1a <stdio.h> \u8f93\u5165\u51fd\u6570\uff1a scanf(\"%\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26\", &\u53d8\u91cf\u540d); \u8f93\u51fa\u51fd\u6570: printf(\"\u5176\u4ed6\u5b57\u7b26 %\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26 \u5176\u4ed6\u5b57\u7b26\", \u53d8\u91cf\u540d); \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0 scanf \u51fd\u6570\u4e2d\u7684& \u5b57\u7b26\u7c7b\u578b\u53d8\u91cf\u540d = getchar(); \u4f7f\u7528\u65f6\u6ce8\u610f\u5403\u6389\u6362\u884c\u7b26 \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* int %d long long %lld unsigned long long %llu char %c \u5b57\u7b26\u6570\u7ec4 %s float %f double %lf *\u8fd9\u91cc\u4e3a\u4e86\u770b\u7740\u65b9\u4fbf\u52a0\u4e0a\u4e86% 1 2 3 4 5 6 7 8 9 10 int a ; long long b ; char c ; double d = 1.0 ; float f = 2.7 ; scanf ( \"%d%lld\" , & a , & b ); scanf ( \"%c\" , & c ); //\u7a7a\u683c\uff0c\u56de\u8f66\uff0c\u7f29\u8fdb\u90fd\u4f1a\u88ab\u8bfb\u5165\uff0c\u6ce8\u610f\uff01 printf ( \"%d%d\" , a , c ); //c\u88ab\u8f6c\u6362\u6210int\u7c7b\u578b printf ( \"ans = %f %.12lf \\n \" , f , d );","title":"\u6807\u51c6\u8f93\u5165\u8f93\u51fa"},{"location":"c-basic/grammar/#_14","text":"1 2 3 4 5 6 7 8 9 10 int mian () { int a , b ; c , d = 1 ; bool flag1 = ture , flag2 = flase ; scanf ( \"%d\" , a ); printf ( \"%d, b\" ); c = b + 1 e = 2 ab ; return 1 ; }","title":"\u53cd\u4f8b\uff1a\u521d\u5b66\u8005\u5e38\u72af\u7684\u9519\u8bef"},{"location":"c-basic/structure/","text":"\u903b\u8f91\u7ed3\u6784 \u00b6 \u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u672c\u601d\u8def \u00b6 \u8f93\u5165 \u2192 \u8ba1\u7b97\u5904\u7406 \u2192 \u8f93\u51fa \u57fa\u672c\u7ed3\u6784 \u00b6 1 2 3 4 5 6 7 #include <stdio.h> // \u5934\u6587\u4ef6 int main () // \u4e3b\u51fd\u6570 { printf ( \"Hello, world!\" ); // \u8c03\u7528 printf \u51fd\u6570 return 0 ; // \u8fd4\u56de0\uff0c\u4e3b\u51fd\u6570\u4e0d\u80fd\u8fd4\u56de\u5176\u4ed6\u503c } \u987a\u5e8f\u7ed3\u6784 \u00b6 \u9009\u62e9\u7ed3\u6784 \u00b6 if \u00b6 1 2 3 4 5 6 7 8 9 10 if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 1 ; \u8bed\u53e5 2 ; } else if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 3 ; } else { \u8bed\u53e5 4 ; } switch \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 switch ( \u8868\u8fbe\u5f0f ) { case \u5e38\u91cf\u8868\u8fbe\u5f0f 1 \uff1a \u8bed\u53e5 1 \uff1b break ; case \u5e38\u91cf\u8868\u8fbe\u5f0f 2 \uff1a \u8bed\u53e5 2 \uff1b \u8bed\u53e5 3 \uff1b break ; ... default : //\u53ef\u7701\u7565 \u8bed\u53e5 n \uff1b } * \u4e0d\u8981\u5fd8\u8bb0 break \u548c\u6bcf\u79cd\u60c5\u51b5\u540e\u7684 : * switch \u8bed\u53e5\u7684\u5bf9\u8c61\u53ea\u80fd\u662f int char bool \u7c7b\u578b\u7684\u6570\u636e \u5faa\u73af\u7ed3\u6784 \u00b6 for \u00b6 1 2 3 for ( init ; condition ; increment ) { statement ( s ); } while \u00b6 1 2 3 while ( condition ) { statement ( s ); } do-while \u00b6 1 2 3 do { statement ( s ); // \u8bed\u53e5\u81f3\u5c11\u4f1a\u88ab\u6267\u884c\u4e00\u6b21 } while ( condition ); \u5d4c\u5957\u5faa\u73af \u00b6 \u6b7b\u5faa\u73af \u00b6","title":"\u903b\u8f91\u7ed3\u6784"},{"location":"c-basic/structure/#_1","text":"","title":"\u903b\u8f91\u7ed3\u6784"},{"location":"c-basic/structure/#_2","text":"\u8f93\u5165 \u2192 \u8ba1\u7b97\u5904\u7406 \u2192 \u8f93\u51fa","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u672c\u601d\u8def"},{"location":"c-basic/structure/#_3","text":"1 2 3 4 5 6 7 #include <stdio.h> // \u5934\u6587\u4ef6 int main () // \u4e3b\u51fd\u6570 { printf ( \"Hello, world!\" ); // \u8c03\u7528 printf \u51fd\u6570 return 0 ; // \u8fd4\u56de0\uff0c\u4e3b\u51fd\u6570\u4e0d\u80fd\u8fd4\u56de\u5176\u4ed6\u503c }","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"c-basic/structure/#_4","text":"","title":"\u987a\u5e8f\u7ed3\u6784"},{"location":"c-basic/structure/#_5","text":"","title":"\u9009\u62e9\u7ed3\u6784"},{"location":"c-basic/structure/#if","text":"1 2 3 4 5 6 7 8 9 10 if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 1 ; \u8bed\u53e5 2 ; } else if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 3 ; } else { \u8bed\u53e5 4 ; }","title":"if"},{"location":"c-basic/structure/#switch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 switch ( \u8868\u8fbe\u5f0f ) { case \u5e38\u91cf\u8868\u8fbe\u5f0f 1 \uff1a \u8bed\u53e5 1 \uff1b break ; case \u5e38\u91cf\u8868\u8fbe\u5f0f 2 \uff1a \u8bed\u53e5 2 \uff1b \u8bed\u53e5 3 \uff1b break ; ... default : //\u53ef\u7701\u7565 \u8bed\u53e5 n \uff1b } * \u4e0d\u8981\u5fd8\u8bb0 break \u548c\u6bcf\u79cd\u60c5\u51b5\u540e\u7684 : * switch \u8bed\u53e5\u7684\u5bf9\u8c61\u53ea\u80fd\u662f int char bool \u7c7b\u578b\u7684\u6570\u636e","title":"switch"},{"location":"c-basic/structure/#_6","text":"","title":"\u5faa\u73af\u7ed3\u6784"},{"location":"c-basic/structure/#for","text":"1 2 3 for ( init ; condition ; increment ) { statement ( s ); }","title":"for"},{"location":"c-basic/structure/#while","text":"1 2 3 while ( condition ) { statement ( s ); }","title":"while"},{"location":"c-basic/structure/#do-while","text":"1 2 3 do { statement ( s ); // \u8bed\u53e5\u81f3\u5c11\u4f1a\u88ab\u6267\u884c\u4e00\u6b21 } while ( condition );","title":"do-while"},{"location":"c-basic/structure/#_7","text":"","title":"\u5d4c\u5957\u5faa\u73af"},{"location":"c-basic/structure/#_8","text":"","title":"\u6b7b\u5faa\u73af"},{"location":"dp/CountingDP/","text":"\u8ba1\u6570DP \u00b6 \u8981\u70b9\uff1a \u5b66\u4f1a\u5c06\u95ee\u9898\u5316\u4e3a \u5b50\u95ee\u9898 \u540c\u65f6\u4fdd\u8bc1 \u4e0d\u91cd\u4e0d\u6f0f \u4f8b\u9898\u4e09 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a n * m \u7684\u68cb\u76d8(1 \u2264 n,m < 1e5)\uff0c\u68cb\u76d8\u4e0a\u6709 N (1 \u2264 N \u2264 2000)\u4e2a\u683c\u5b50\u662f\u9ed1\u8272\u7684\uff0c\u5176\u4ed6\u662f\u767d\u8272\u7684 \u521d\u59cb\u4f4d\u7f6e\u5728\u5de6\u4e0a\u89d2\uff0c\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\u79fb\u52a8\uff0c\u4e0d\u80fd\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50 \u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4e00\u7528\u6709\u591a\u5c11\u79cd\u8d70\u6cd5\uff1f \uff08\u8f93\u51fa\u65f6\u5bf9 1e9+7 \u53d6\u6a21\uff09 \u4e0d\u8003\u8651\u9ed1\u683c\u5b50\uff0c\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u7684\u8d70\u6cd5\uff1a C_{m+n}^m C_{m+n}^m \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u68cb\u76d8\u5f88\u5927\uff0c\u53ef\u662f\u9ed1\u8272\u683c\u5b50\u6570\u91cf\u5f88\u5c11 \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4f1a\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50\u7684\u8d70\u6cd5 \u5b50\u95ee\u9898\u5212\u5206\uff1a \u6309\u7167\u7b2c\u4e00\u4e2a\u7ecf\u8fc7\u7684\u9ed1\u683c\u5b50\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u5047\u8bbe\u7ec8\u70b9\u4e5f\u662f\u9ed1\u8272\u683c\u5b50\uff0c\u6392\u5e8f\u540e\uff0c\u8bbe dp[i] \u4e3a\u4ece\u8d77\u70b9\u8d70\u5230\u7b2c i \u4e2a\u9ed1\u683c\u5b50\uff0c\u4e14\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u9ed1\u683c\u5b50\u7684\u8def\u7ebf\u6570 dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} \u5feb\u901f\u5e42\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 ll qpow ( ll a , ll b ) { ll ans = 1 % mod ; for (; b ; b >>= 1ll ) { if ( b & 1ll ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } \u7ec4\u5408\u6570\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ll jc [ 200020 ], jcinv [ 200020 ]; ll inv ( ll a ) { return qpow ( a , mod - 2 ); } void init ( int n ) { jc [ 1 ] = 1 ; jcinv [ 1 ] = inv ( 1 ); for ( int i = 2 ; i <= n ; i ++ ) { jc [ i ] = jc [ i - 1 ] * i % mod ; jcinv [ i ] = inv ( jc [ i ]); } } ll C ( int n , int m ) { if ( n == 0 ) return 1 ; else if ( n == m ) return 1 ; return jc [ m ] * jcinv [ n ] % mod * jcinv [ m - n ] % mod ; } \u4f8b\u9898\u56db \u00b6 \u6c42 N \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u6709\u591a\u5c11\u4e2a\uff0c\u8282\u70b9\u6709\u6807\u53f7\uff0c\u7f16\u53f7\u4e3a1\uff5eN\uff081 \u2264 N \u2264 50\uff09 \u663e\u7136\uff0c\u65e0\u5411\u56fe\u7684\u603b\u6570\u4e3a 2^{N(N-1)/2} 2^{N(N-1)/2} \u76f4\u63a5\u8ba1\u7b97\u8fde\u901a\u56fe\u5f88\u56f0\u96be \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4e0d\u8fde\u901a\u56fe\u7684\u4e2a\u6570 \u5212\u5206\uff1a \u56fa\u5b9a\u4e00\u4e2a\u70b9\uff0c\u6309\u7167\u8be5\u70b9\u6240\u5728\u7684\u8fde\u901a\u56fe\u7684\u8282\u70b9\u4e2a\u6570\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u8bbe dp[i] \u4e3a i \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u7684\u4e2a\u6570 dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} \u5927\u6570 \u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u5927\u6570\u677f\u5b50 \u7531\u4e8e\u8fd9\u4e2a\u9898\u53ea\u670950\u4e2a\u6570\uff0c\u4e5f\u53ef\u4ee5\u7528python\u5199\u5b8c\uff0c\u628a\u7b54\u6848\u6253\u5370\u51fa\u6765\uff0c\u7528C\u8bed\u8a00\u76f4\u63a5\u8f93\u51fa \u5c0f\u5efa\u8bae \u00b6 \u9047\u5230\u5199\u4e0d\u51fa\u6765\u7684\u9898\uff0c\u770b\u5b8c\u9898\u89e3\u540e\u4e0d\u4ec5\u4ec5\u8981\u77e5\u9053\u300c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5199\u300d\uff0c\u8fd8\u8981\u601d\u8003\u300c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u60f3\u300d \u5bf9\u4e8eACM\u7684\u6280\u80fd\u52a0\u70b9\uff0c\u9664\u4e86\u201c\u8ba1\u6570DP\uff0c\u6811\u4e0aDP\uff0c\u7ec4\u5408\u6570\u5b66\uff0c\u56fe\u8bba ...\u201d\u8fd9\u79cd\u300c\u4e13\u9898\u7c7b\u300d\u7684\u5b66\u4e60\uff0c\u50cf\u201c\u62fc\u51d1\u601d\u60f3\uff0c\u4e8c\u5206\u601d\u60f3\uff0c\u8f6c\u5316\u4e3a\u5b50\u95ee\u9898\uff0c\u53cd\u5411\u601d\u8003 ...\u201d\u8fd9\u6837\u7684\u300c\u601d\u60f3\u7c7b\u300d\u5f52\u7eb3\u4e5f\u5f88\u91cd\u8981","title":"\u8ba1\u6570DP"},{"location":"dp/CountingDP/#dp","text":"\u8981\u70b9\uff1a \u5b66\u4f1a\u5c06\u95ee\u9898\u5316\u4e3a \u5b50\u95ee\u9898 \u540c\u65f6\u4fdd\u8bc1 \u4e0d\u91cd\u4e0d\u6f0f","title":"\u8ba1\u6570DP"},{"location":"dp/CountingDP/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a n * m \u7684\u68cb\u76d8(1 \u2264 n,m < 1e5)\uff0c\u68cb\u76d8\u4e0a\u6709 N (1 \u2264 N \u2264 2000)\u4e2a\u683c\u5b50\u662f\u9ed1\u8272\u7684\uff0c\u5176\u4ed6\u662f\u767d\u8272\u7684 \u521d\u59cb\u4f4d\u7f6e\u5728\u5de6\u4e0a\u89d2\uff0c\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\u79fb\u52a8\uff0c\u4e0d\u80fd\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50 \u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4e00\u7528\u6709\u591a\u5c11\u79cd\u8d70\u6cd5\uff1f \uff08\u8f93\u51fa\u65f6\u5bf9 1e9+7 \u53d6\u6a21\uff09 \u4e0d\u8003\u8651\u9ed1\u683c\u5b50\uff0c\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u7684\u8d70\u6cd5\uff1a C_{m+n}^m C_{m+n}^m \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u68cb\u76d8\u5f88\u5927\uff0c\u53ef\u662f\u9ed1\u8272\u683c\u5b50\u6570\u91cf\u5f88\u5c11 \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4f1a\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50\u7684\u8d70\u6cd5 \u5b50\u95ee\u9898\u5212\u5206\uff1a \u6309\u7167\u7b2c\u4e00\u4e2a\u7ecf\u8fc7\u7684\u9ed1\u683c\u5b50\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u5047\u8bbe\u7ec8\u70b9\u4e5f\u662f\u9ed1\u8272\u683c\u5b50\uff0c\u6392\u5e8f\u540e\uff0c\u8bbe dp[i] \u4e3a\u4ece\u8d77\u70b9\u8d70\u5230\u7b2c i \u4e2a\u9ed1\u683c\u5b50\uff0c\u4e14\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u9ed1\u683c\u5b50\u7684\u8def\u7ebf\u6570 dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} \u5feb\u901f\u5e42\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 ll qpow ( ll a , ll b ) { ll ans = 1 % mod ; for (; b ; b >>= 1ll ) { if ( b & 1ll ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } \u7ec4\u5408\u6570\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ll jc [ 200020 ], jcinv [ 200020 ]; ll inv ( ll a ) { return qpow ( a , mod - 2 ); } void init ( int n ) { jc [ 1 ] = 1 ; jcinv [ 1 ] = inv ( 1 ); for ( int i = 2 ; i <= n ; i ++ ) { jc [ i ] = jc [ i - 1 ] * i % mod ; jcinv [ i ] = inv ( jc [ i ]); } } ll C ( int n , int m ) { if ( n == 0 ) return 1 ; else if ( n == m ) return 1 ; return jc [ m ] * jcinv [ n ] % mod * jcinv [ m - n ] % mod ; }","title":"\u4f8b\u9898\u4e09"},{"location":"dp/CountingDP/#_2","text":"\u6c42 N \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u6709\u591a\u5c11\u4e2a\uff0c\u8282\u70b9\u6709\u6807\u53f7\uff0c\u7f16\u53f7\u4e3a1\uff5eN\uff081 \u2264 N \u2264 50\uff09 \u663e\u7136\uff0c\u65e0\u5411\u56fe\u7684\u603b\u6570\u4e3a 2^{N(N-1)/2} 2^{N(N-1)/2} \u76f4\u63a5\u8ba1\u7b97\u8fde\u901a\u56fe\u5f88\u56f0\u96be \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4e0d\u8fde\u901a\u56fe\u7684\u4e2a\u6570 \u5212\u5206\uff1a \u56fa\u5b9a\u4e00\u4e2a\u70b9\uff0c\u6309\u7167\u8be5\u70b9\u6240\u5728\u7684\u8fde\u901a\u56fe\u7684\u8282\u70b9\u4e2a\u6570\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u8bbe dp[i] \u4e3a i \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u7684\u4e2a\u6570 dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} \u5927\u6570 \u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u5927\u6570\u677f\u5b50 \u7531\u4e8e\u8fd9\u4e2a\u9898\u53ea\u670950\u4e2a\u6570\uff0c\u4e5f\u53ef\u4ee5\u7528python\u5199\u5b8c\uff0c\u628a\u7b54\u6848\u6253\u5370\u51fa\u6765\uff0c\u7528C\u8bed\u8a00\u76f4\u63a5\u8f93\u51fa","title":"\u4f8b\u9898\u56db"},{"location":"dp/CountingDP/#_3","text":"\u9047\u5230\u5199\u4e0d\u51fa\u6765\u7684\u9898\uff0c\u770b\u5b8c\u9898\u89e3\u540e\u4e0d\u4ec5\u4ec5\u8981\u77e5\u9053\u300c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5199\u300d\uff0c\u8fd8\u8981\u601d\u8003\u300c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u60f3\u300d \u5bf9\u4e8eACM\u7684\u6280\u80fd\u52a0\u70b9\uff0c\u9664\u4e86\u201c\u8ba1\u6570DP\uff0c\u6811\u4e0aDP\uff0c\u7ec4\u5408\u6570\u5b66\uff0c\u56fe\u8bba ...\u201d\u8fd9\u79cd\u300c\u4e13\u9898\u7c7b\u300d\u7684\u5b66\u4e60\uff0c\u50cf\u201c\u62fc\u51d1\u601d\u60f3\uff0c\u4e8c\u5206\u601d\u60f3\uff0c\u8f6c\u5316\u4e3a\u5b50\u95ee\u9898\uff0c\u53cd\u5411\u601d\u8003 ...\u201d\u8fd9\u6837\u7684\u300c\u601d\u60f3\u7c7b\u300d\u5f52\u7eb3\u4e5f\u5f88\u91cd\u8981","title":"\u5c0f\u5efa\u8bae"},{"location":"dp/DigitalDP/","text":"\u6570\u4f4dDP \u00b6 \u8fd9\u7c7b\u9898\u76ee\u4e2d\u4e00\u822c\u7ed9\u5b9a\u4e00\u4e9b\u9650\u5236\u6761\u4ef6\uff0c \u6c42\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u7b2c K \u5c0f\u7684\u6570\u662f\u591a\u5c11\uff0c \u6216\u8005\u6c42\u5728\u533a\u95f4 [ L , R ] \u5185\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u6570 \u89e3\u9898\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\u8fdb\u884c \u9884\u5904\u7406 \u8bd5\u586b\u6cd5 \u6c42\u7b54\u6848(\u62fc\u51d1\u601d\u60f3) \u4f8b\u9898\u4e00 \u00b6 \u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4 [ n , m ]\uff08 0 < n \u2264 m < 1000 000 \uff09 \u6c42\u533a\u95f4\u4e2d\u4e0d\u542b\u6570\u5b574\uff0c\u4e5f\u4e0d\u542b62\u7684\u6570\u6709\u591a\u5c11\u4e2a \u4f8b\uff1a 62315 73418 88914 \u4e0d\u8ba1\u7b97\u5728\u5185 61152 \u8ba1\u7b97\u5728\u5185(6\u548c2\u4e0d\u8fde\u7eed) \u95ee\u9898\u8f6c\u6362\uff1a \u6c42 n \u4ee5\u5185\u4e0d\u542b4\u548c62\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\uff1a 4\u53ea\u548c\u81ea\u5df1\u672c\u8eab\u7684\u6570\u4f4d\u6709\u5173 62\u548c\u76f8\u90bb\u4e24\u4f4d\u6570\u6709\u5173 \u6240\u4ee5\u914d\u51d1\u65f6\u9700\u8981\u77e5\u9053\u9996\u4f4d\u6570\u5b57 \u8bbe dp [ i ] [ j ] \uff0c\u8868\u793a\u5f00\u5934\u4e3a i \uff0c\u4f4d\u6570\u4e3a j \u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\u4e3e\u4f8b\uff1a n = 7563241 7 : +dp [ 0 ] [ 7 ] +dp [ 1 ] [ 7 ] +dp [ 2 ] [ 7 ] +dp [ 3 ] [ 7 ] +dp [ 5 ] [ 7 ] +dp [ 6 ] [ 7 ] 5 : +dp [ 0 ] [ 6 ] +dp [ 1 ] [ 6 ] +dp [ 2 ] [ 6 ] +dp [ 3 ] [ 6 ] 6 : +dp [ 0 ] [ 5 ] +dp [ 1 ] [ 5 ] +dp [ 2 ] [ 5 ] +dp [ 3 ] [ 5 ] +dp [ 5 ] [ 5 ] 3 : +dp [ 0 ] [ 4 ] +dp [ 1 ] [ 4 ] +dp [ 2 ] [ 4 ] 2 : +dp [ 0 ] [ 3 ] +dp [ 1 ] [ 3 ] 4 : +dp [ 0 ] [ 2 ] +dp [ 1 ] [ 2 ] +dp [ 2 ] [ 2 ] +dp [ 3 ] [ 2 ] break \u9884\u5904\u7406 1 2 if ( i != 4 &&! ( i == 6 && k == 2 )) dp [ i ][ j ] += dp [ k ][ j - 1 ]; \u4f18\u5316 \u53ef\u5c06 i \u7b80\u5316\u4e3a 0 \u548c 1 \u4e24\u79cd\u72b6\u6001 \u4f8b\u9898\u4e8c \u00b6 \u6c42\u7b2c n \u5c0f\u7684\uff0c\u6570\u4f4d\u4e2d\u5305\u542b666\u7684\u6570 (\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u8d85\u8fc71000\u7ec4\uff0cn < 50 000 000) \u914d\u51d1\uff1a \u9996\u5148\u6c42\u51fa\u4f4d\u6570\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u6570\u5b57\u53bb\u5c1d\u8bd5 \u4f8b\u5982 \u5df2\u6c42\u51fa\u7b54\u6848\u4e3a8\u4f4d\u6570 \u6700\u9ad8\u4f4d\u4e3a1\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 \u6700\u9ad8\u4f4d\u4e3a2\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 ... ... \u6700\u9ad8\u4f4d\u4e3a6\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570\uff0c \u518d\u52a0\u4e0a\u5f00\u5934\u6709\u8fde\u7eed\u4e24\u4e2a6\u7684\u4e0d\u5305\u542b666\u7684\u6570 \u56e0\u6b64\u9700\u8981\u77e5\u9053\uff1a \u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a66\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a\u4e0d\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u9884\u5904\u7406\uff1a \u8bbe dp [ i ] [ 3 ] \uff0c\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 \u8bbe dp [ i ] [ j ] \uff0c\u5f00\u5934\u6709 j \u4e2a6\u7684\u4e0d\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 1 2 3 4 dp [ i ][ 0 ] = 9 * ( dp [ i - 1 ][ 0 ] + dp [ i - 1 ][ 1 ] + dp [ i - 1 ][ 2 ]); dp [ i ][ 1 ] = dp [ i - 1 ][ 0 ]; dp [ i ][ 2 ] = dp [ i - 1 ][ 1 ] \uff1b dp [ i ][ 3 ] = dp [ i - 1 ][ 2 ] + 10 * dp [ i - 1 ][ 3 ];","title":"\u6570\u4f4dDP"},{"location":"dp/DigitalDP/#dp","text":"\u8fd9\u7c7b\u9898\u76ee\u4e2d\u4e00\u822c\u7ed9\u5b9a\u4e00\u4e9b\u9650\u5236\u6761\u4ef6\uff0c \u6c42\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u7b2c K \u5c0f\u7684\u6570\u662f\u591a\u5c11\uff0c \u6216\u8005\u6c42\u5728\u533a\u95f4 [ L , R ] \u5185\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u6570 \u89e3\u9898\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\u8fdb\u884c \u9884\u5904\u7406 \u8bd5\u586b\u6cd5 \u6c42\u7b54\u6848(\u62fc\u51d1\u601d\u60f3)","title":"\u6570\u4f4dDP"},{"location":"dp/DigitalDP/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4 [ n , m ]\uff08 0 < n \u2264 m < 1000 000 \uff09 \u6c42\u533a\u95f4\u4e2d\u4e0d\u542b\u6570\u5b574\uff0c\u4e5f\u4e0d\u542b62\u7684\u6570\u6709\u591a\u5c11\u4e2a \u4f8b\uff1a 62315 73418 88914 \u4e0d\u8ba1\u7b97\u5728\u5185 61152 \u8ba1\u7b97\u5728\u5185(6\u548c2\u4e0d\u8fde\u7eed) \u95ee\u9898\u8f6c\u6362\uff1a \u6c42 n \u4ee5\u5185\u4e0d\u542b4\u548c62\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\uff1a 4\u53ea\u548c\u81ea\u5df1\u672c\u8eab\u7684\u6570\u4f4d\u6709\u5173 62\u548c\u76f8\u90bb\u4e24\u4f4d\u6570\u6709\u5173 \u6240\u4ee5\u914d\u51d1\u65f6\u9700\u8981\u77e5\u9053\u9996\u4f4d\u6570\u5b57 \u8bbe dp [ i ] [ j ] \uff0c\u8868\u793a\u5f00\u5934\u4e3a i \uff0c\u4f4d\u6570\u4e3a j \u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\u4e3e\u4f8b\uff1a n = 7563241 7 : +dp [ 0 ] [ 7 ] +dp [ 1 ] [ 7 ] +dp [ 2 ] [ 7 ] +dp [ 3 ] [ 7 ] +dp [ 5 ] [ 7 ] +dp [ 6 ] [ 7 ] 5 : +dp [ 0 ] [ 6 ] +dp [ 1 ] [ 6 ] +dp [ 2 ] [ 6 ] +dp [ 3 ] [ 6 ] 6 : +dp [ 0 ] [ 5 ] +dp [ 1 ] [ 5 ] +dp [ 2 ] [ 5 ] +dp [ 3 ] [ 5 ] +dp [ 5 ] [ 5 ] 3 : +dp [ 0 ] [ 4 ] +dp [ 1 ] [ 4 ] +dp [ 2 ] [ 4 ] 2 : +dp [ 0 ] [ 3 ] +dp [ 1 ] [ 3 ] 4 : +dp [ 0 ] [ 2 ] +dp [ 1 ] [ 2 ] +dp [ 2 ] [ 2 ] +dp [ 3 ] [ 2 ] break \u9884\u5904\u7406 1 2 if ( i != 4 &&! ( i == 6 && k == 2 )) dp [ i ][ j ] += dp [ k ][ j - 1 ]; \u4f18\u5316 \u53ef\u5c06 i \u7b80\u5316\u4e3a 0 \u548c 1 \u4e24\u79cd\u72b6\u6001","title":"\u4f8b\u9898\u4e00"},{"location":"dp/DigitalDP/#_2","text":"\u6c42\u7b2c n \u5c0f\u7684\uff0c\u6570\u4f4d\u4e2d\u5305\u542b666\u7684\u6570 (\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u8d85\u8fc71000\u7ec4\uff0cn < 50 000 000) \u914d\u51d1\uff1a \u9996\u5148\u6c42\u51fa\u4f4d\u6570\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u6570\u5b57\u53bb\u5c1d\u8bd5 \u4f8b\u5982 \u5df2\u6c42\u51fa\u7b54\u6848\u4e3a8\u4f4d\u6570 \u6700\u9ad8\u4f4d\u4e3a1\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 \u6700\u9ad8\u4f4d\u4e3a2\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 ... ... \u6700\u9ad8\u4f4d\u4e3a6\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570\uff0c \u518d\u52a0\u4e0a\u5f00\u5934\u6709\u8fde\u7eed\u4e24\u4e2a6\u7684\u4e0d\u5305\u542b666\u7684\u6570 \u56e0\u6b64\u9700\u8981\u77e5\u9053\uff1a \u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a66\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a\u4e0d\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u9884\u5904\u7406\uff1a \u8bbe dp [ i ] [ 3 ] \uff0c\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 \u8bbe dp [ i ] [ j ] \uff0c\u5f00\u5934\u6709 j \u4e2a6\u7684\u4e0d\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 1 2 3 4 dp [ i ][ 0 ] = 9 * ( dp [ i - 1 ][ 0 ] + dp [ i - 1 ][ 1 ] + dp [ i - 1 ][ 2 ]); dp [ i ][ 1 ] = dp [ i - 1 ][ 0 ]; dp [ i ][ 2 ] = dp [ i - 1 ][ 1 ] \uff1b dp [ i ][ 3 ] = dp [ i - 1 ][ 2 ] + 10 * dp [ i - 1 ][ 3 ];","title":"\u4f8b\u9898\u4e8c"},{"location":"dp/intro/","text":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005 \u00b6 CooolKey","title":"DP\u7b80\u4ecb"},{"location":"dp/intro/#_1","text":"CooolKey","title":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005"},{"location":"graph/bipartite-graph/","text":"\u4e8c\u5206\u5339\u914d \u00b6 \u6982\u5ff5 \u00b6 \u4e8c\u5206\u56fe\uff1a\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u56fe\u4e2d\u70b9\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u7ec4\uff0c\u5e76\u4e14\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u8de8\u8d8a\u7ec4\u7684\u8fb9\u754c\uff0c\u5219\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u51c6\u786e\u5730\u8bf4\uff1a\u628a\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u96c6 U \u548cV \uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u8fde\u63a5U\u3001V\u4e2d\u7684\u9876\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\uff0c\u5219\u6b64\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u7b49\u4ef7\u5b9a\u4e49\u662f\uff1a\u4e0d\u542b\u6709\u300c\u542b\u5947\u6570\u6761\u8fb9\u7684\u73af\u300d\u7684\u56fe\u3002 \u4f8b\u9898 \u00b6 \u6709n\u4e2a\u4eba\uff0c\u5176\u4e2d\u6709m\u5bf9\u5173\u7cfb(x,y)\u8868\u793ax\u548cy\u4e92\u76f8\u4ec7\u6068\uff0cx\u548cy\u4e0d\u80fd\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u573a\u5408\u3002\u95ee\uff0c\u80fd\u4e0d\u80fd\u5c06\u8fd9n\u4e2a\u4eba\uff0c\u5206\u6210\u4e24\u7ec4\u4e14\u6bcf\u7ec4\u4e4b\u95f4\u4efb\u610f\u4e24\u4e2a\u4eba\u90fd\u4e0d\u4ec7\u6068\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 bool dfs ( int now , int col ) { color [ now ] = col ; for ( int i = head [ now ]; ~ i ; i = edge [ i ]. next ){ int to = edge [ i ]. to ; if ( color [ now ] == color [ to ]) return false ; if ( ! color [ to ]){ if ( ! dfs ( to , 3 - col )) return false ; } } return true ; } \u5339\u914d \u00b6 \u5339\u914d\uff1a\u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a\u8fb9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002\u3002 \u5339\u914d\u70b9\u3001\u975e\u5339\u914d\u70b9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u6709n\u4e2a\u4eba\uff0c\u82e5\u5e72\u7537\u751f\uff0c\u82e5\u5e72\u5973\u751f\uff0c\u5176\u4e2d\u7537\u5973\u4e4b\u95f4\u6709m\u5bf9\u5173\u7cfb(x,y)\uff0c\u8868\u793ax\u3001y\u4e4b\u95f4\u6709\u597d\u611f\uff0c\u95ee\u4f60\u6700\u591a\u80fd\u6311\u591a\u5c11\u5bf9\u4eba\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u90fd\u662f\u6709\u597d\u611f\u7684\uff08\u6bcf\u4e2a\u4eba\u53ea\u80fd\u88ab\u6311\u4e00\u6b21\uff09 how? \u00b6 \u5308\u7259\u5229\u7b97\u6cd5\uff1a O(VE) O(VE) \u6982\u5ff5 \u00b6 \u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002 \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 \u6761\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 bool findp ( int now ) { for ( int i = head [ now ]; ~ i ; i = edge [ i ]. next ) { int to = edge [ i ]. v ; if ( ! vis [ to ]) { vis [ to ] = true ; if ( matching [ to ] == - 1 || findp ( matching [ to ])) { matching [ now ] = to ; matching [ to ] = now ; return true ; } } } return false ; } 1 2 3 4 5 6 7 8 9 10 11 12 int hung ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( matching [ i ] == - 1 ){ memset ( vis , 0 , sizeof ( vis )); if ( findp ( i )) ans ++ ; } } return ans ; } \u8fdb\u9636 \u00b6 \u63a5\u4e0b\u6765\u8fd9\u90e8\u5206\u4f1a\u7a0d\u5fae\u6709\u4e9b\u96be\u54af \u4e00\u4e9b\u6982\u5ff5 \u00b6 \u524d\u65b9\u4fe1\u606f\u91cf\u7206\u70b8 \u6700\u5c0f\u8fb9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u8fb9\u8986\u76d6\u6240\u6709\u70b9 \u6700\u5c0f\u70b9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u70b9\u8986\u76d6\u6240\u6709\u8fb9 ==\u4e8c\u5206\u56fe==\u7684\u6700\u5927\u5339\u914d = \u6700\u5c0f\u70b9\u8986\u76d6 ==\u4e8c\u5206\u56fe==\u7684\u6700\u5c0f\u8fb9\u8986\u76d6=\u9876\u70b9\u6570-\u6700\u5927\u5339\u914d \u6700\u5927\u56e2&\u6700\u5927\u72ec\u7acb\u96c6\uff1a\u6700\u5927\u7684\u70b9\u96c6\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fb9/\u90fd\u6ca1\u8fb9 \u5bf9\u4e8e\u4e0d\u5b58\u5728\u5b64\u70b9\u7684\u4efb\u610f\u56fe \uff0c\u6700\u5927\u5339\u914d+\u6700\u5c0f\u8fb9\u8986\u76d6=\u9876\u70b9\u6570 ==\u4efb\u610f\u56fe==\u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6+\u6700\u5c0f\u70b9\u8986\u76d6=\u9876\u70b9\u6570 DAG\u4e2d\u4e0d\u53ef\u76f8\u4ea4\u7684\u6700\u5c0f\u8def\u5f84/\u94fe\u8986\u76d6 DAG\u4e2d\u53ef\u76f8\u4ea4\u7684\u6700\u5c0f\u8def\u5f84/\u94fe\u8986\u76d6 DAG\u4e2d\u6700\u957f\u53cd\u94fe=\u53ef\u76f8\u4ea4\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff08DAG\u4e2d\u95ed\u5305\u4f20\u9012\u540e\u7684\u6700\u5927\u72ec\u7acb\u96c6\uff09 END? \u56fe\u8bba\u7684\u7cbe\u9ad3 \uff1a \u5efa\u56fe \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u56fd\u9645\u8c61\u68cb\u7684\u68cb\u76d8\uff0c\u8ba9\u4f60\u653e\u5c3d\u53ef\u80fd\u591a\u7684\u9a6c\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u9a6c\u4e92\u76f8\u65e0\u6cd5\u653b\u51fb\u5230\uff1f \u56e0\u4e3a\u75ab\u60c5\uff0c\u5927\u5bb6\u90fd\u4e0d\u60f3\u5728\u7535\u5f71\u9662\u79bb\u5f97\u592a\u8fd1\uff0c\u6bcf\u4e2a\u4ebax\u66fc\u54c8\u987f\u8ddd\u79bb\u5185\u90fd\u4e0d\u60f3\u6709\u5176\u4ed6\u4eba\uff0c\u95ee\u600e\u4e48\u5b89\u6392\u4f7f\u5f97\u505a\u7684\u4eba\u505a\u591a\uff1f \u7ed9\u4f60\u4e2a\u68cb\u76d8\uff0c\u68cb\u76d8\u4e0a\u67d0\u4e9b\u4f4d\u7f6e\u6709\u68cb\u5b50\uff0c\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\u68cb\u5b50\uff0c\u8ba9\u4f60\u9009\u5c3d\u53ef\u80fd\u591a\u7684\u68cb\u5b50 \u7ed9\u4e00\u4e2a\u6570k\uff0c\u95ee\u4ed6\u7684\u6b63\u6574\u6570\u500d\u6570\u4e2d\uff0c\uff08\u5341\u8fdb\u5236\u4e0b\uff09\u6bcf\u4e00\u4f4d\u7684\u548c\u6700\u5c0f\u662f\u591a\u5c11, 2\\leq k \\leq 10^{5} 2\\leq k \\leq 10^{5} \u4ece1\u5f00\u59cb \uff0c \u5efa\u7acb\u4e00\u4e2a\u6570x\u5230x+1\u548cx*10\u5206\u522b\u4e3a1\u548c0\u7684\u8fb9\uff0c\u6700\u540e\u627e\u5230\u6700\u5feb\u5230\u8fbe\u7684k\u7684\u500d\u6570\uff0c\u5373\u7b54\u6848\u6700\u77ed\u8def \u6709\u4e00\u6761\u7ebf\u6bb5\uff0c1\u5230n\uff0cn\u4e2a\u4f4d\u7f6e\uff0c\u4f60\u6709m\u4e2a\u68cb\u5b50\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u653e\u4e00\u4e9b\u68cb\u5b50\uff0c\u7ed9\u4f60q\u4e2a\u533a\u95f4\u6761\u4ef6 a,b,c a,b,c \uff0c\u8868\u793a [a,b] [a,b] \u533a\u95f4\u6700\u5c11\u8981\u6709c\u4e2a\u68cb\u5b50\uff0c\u95ee\u4f60\u81f3\u5c11\u8981\u7528\u591a\u5c11\u4e2a\u68cb\u5b50 d_{i} d_{i} \u8868\u793a\u524di\u4e2a\u4f4d\u7f6e\u7684\u68cb\u5b50\u4e2a\u6570\uff0c\u5bf9\u4e8e\u6761\u4ef6\uff0c\u5219\u662f d_{b}-d_{a-1} \\ge c d_{b}-d_{a-1} \\ge c d_{i+1} - d_{i} \\ge 0 d_{i+1} - d_{i} \\ge 0 d_{n} - d_{0} \\le m d_{n} - d_{0} \\le m \u4e8c\u5206+\u5dee\u5206\u7ea6\u675fspfa\u5224\u65ad\u662f\u5426\u6709\u89e3","title":"\u4e8c\u5206\u56fe"},{"location":"graph/bipartite-graph/#_1","text":"","title":"\u4e8c\u5206\u5339\u914d"},{"location":"graph/bipartite-graph/#_2","text":"\u4e8c\u5206\u56fe\uff1a\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u56fe\u4e2d\u70b9\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u7ec4\uff0c\u5e76\u4e14\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u8de8\u8d8a\u7ec4\u7684\u8fb9\u754c\uff0c\u5219\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u51c6\u786e\u5730\u8bf4\uff1a\u628a\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u96c6 U \u548cV \uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u8fde\u63a5U\u3001V\u4e2d\u7684\u9876\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\uff0c\u5219\u6b64\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u7b49\u4ef7\u5b9a\u4e49\u662f\uff1a\u4e0d\u542b\u6709\u300c\u542b\u5947\u6570\u6761\u8fb9\u7684\u73af\u300d\u7684\u56fe\u3002","title":"\u6982\u5ff5"},{"location":"graph/bipartite-graph/#_3","text":"\u6709n\u4e2a\u4eba\uff0c\u5176\u4e2d\u6709m\u5bf9\u5173\u7cfb(x,y)\u8868\u793ax\u548cy\u4e92\u76f8\u4ec7\u6068\uff0cx\u548cy\u4e0d\u80fd\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u573a\u5408\u3002\u95ee\uff0c\u80fd\u4e0d\u80fd\u5c06\u8fd9n\u4e2a\u4eba\uff0c\u5206\u6210\u4e24\u7ec4\u4e14\u6bcf\u7ec4\u4e4b\u95f4\u4efb\u610f\u4e24\u4e2a\u4eba\u90fd\u4e0d\u4ec7\u6068\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 bool dfs ( int now , int col ) { color [ now ] = col ; for ( int i = head [ now ]; ~ i ; i = edge [ i ]. next ){ int to = edge [ i ]. to ; if ( color [ now ] == color [ to ]) return false ; if ( ! color [ to ]){ if ( ! dfs ( to , 3 - col )) return false ; } } return true ; }","title":"\u4f8b\u9898"},{"location":"graph/bipartite-graph/#_4","text":"\u5339\u914d\uff1a\u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a\u8fb9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002\u3002 \u5339\u914d\u70b9\u3001\u975e\u5339\u914d\u70b9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u6709n\u4e2a\u4eba\uff0c\u82e5\u5e72\u7537\u751f\uff0c\u82e5\u5e72\u5973\u751f\uff0c\u5176\u4e2d\u7537\u5973\u4e4b\u95f4\u6709m\u5bf9\u5173\u7cfb(x,y)\uff0c\u8868\u793ax\u3001y\u4e4b\u95f4\u6709\u597d\u611f\uff0c\u95ee\u4f60\u6700\u591a\u80fd\u6311\u591a\u5c11\u5bf9\u4eba\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u90fd\u662f\u6709\u597d\u611f\u7684\uff08\u6bcf\u4e2a\u4eba\u53ea\u80fd\u88ab\u6311\u4e00\u6b21\uff09","title":"\u5339\u914d"},{"location":"graph/bipartite-graph/#how","text":"\u5308\u7259\u5229\u7b97\u6cd5\uff1a O(VE) O(VE)","title":"how?"},{"location":"graph/bipartite-graph/#_5","text":"\u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002 \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 \u6761\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 bool findp ( int now ) { for ( int i = head [ now ]; ~ i ; i = edge [ i ]. next ) { int to = edge [ i ]. v ; if ( ! vis [ to ]) { vis [ to ] = true ; if ( matching [ to ] == - 1 || findp ( matching [ to ])) { matching [ now ] = to ; matching [ to ] = now ; return true ; } } } return false ; } 1 2 3 4 5 6 7 8 9 10 11 12 int hung ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( matching [ i ] == - 1 ){ memset ( vis , 0 , sizeof ( vis )); if ( findp ( i )) ans ++ ; } } return ans ; }","title":"\u6982\u5ff5"},{"location":"graph/bipartite-graph/#_6","text":"\u63a5\u4e0b\u6765\u8fd9\u90e8\u5206\u4f1a\u7a0d\u5fae\u6709\u4e9b\u96be\u54af","title":"\u8fdb\u9636"},{"location":"graph/bipartite-graph/#_7","text":"\u524d\u65b9\u4fe1\u606f\u91cf\u7206\u70b8 \u6700\u5c0f\u8fb9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u8fb9\u8986\u76d6\u6240\u6709\u70b9 \u6700\u5c0f\u70b9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u70b9\u8986\u76d6\u6240\u6709\u8fb9 ==\u4e8c\u5206\u56fe==\u7684\u6700\u5927\u5339\u914d = \u6700\u5c0f\u70b9\u8986\u76d6 ==\u4e8c\u5206\u56fe==\u7684\u6700\u5c0f\u8fb9\u8986\u76d6=\u9876\u70b9\u6570-\u6700\u5927\u5339\u914d \u6700\u5927\u56e2&\u6700\u5927\u72ec\u7acb\u96c6\uff1a\u6700\u5927\u7684\u70b9\u96c6\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fb9/\u90fd\u6ca1\u8fb9 \u5bf9\u4e8e\u4e0d\u5b58\u5728\u5b64\u70b9\u7684\u4efb\u610f\u56fe \uff0c\u6700\u5927\u5339\u914d+\u6700\u5c0f\u8fb9\u8986\u76d6=\u9876\u70b9\u6570 ==\u4efb\u610f\u56fe==\u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6+\u6700\u5c0f\u70b9\u8986\u76d6=\u9876\u70b9\u6570 DAG\u4e2d\u4e0d\u53ef\u76f8\u4ea4\u7684\u6700\u5c0f\u8def\u5f84/\u94fe\u8986\u76d6 DAG\u4e2d\u53ef\u76f8\u4ea4\u7684\u6700\u5c0f\u8def\u5f84/\u94fe\u8986\u76d6 DAG\u4e2d\u6700\u957f\u53cd\u94fe=\u53ef\u76f8\u4ea4\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff08DAG\u4e2d\u95ed\u5305\u4f20\u9012\u540e\u7684\u6700\u5927\u72ec\u7acb\u96c6\uff09 END?","title":"\u4e00\u4e9b\u6982\u5ff5"},{"location":"graph/bipartite-graph/#_8","text":"\u7ed9\u4f60\u4e00\u4e2a\u56fd\u9645\u8c61\u68cb\u7684\u68cb\u76d8\uff0c\u8ba9\u4f60\u653e\u5c3d\u53ef\u80fd\u591a\u7684\u9a6c\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u9a6c\u4e92\u76f8\u65e0\u6cd5\u653b\u51fb\u5230\uff1f \u56e0\u4e3a\u75ab\u60c5\uff0c\u5927\u5bb6\u90fd\u4e0d\u60f3\u5728\u7535\u5f71\u9662\u79bb\u5f97\u592a\u8fd1\uff0c\u6bcf\u4e2a\u4ebax\u66fc\u54c8\u987f\u8ddd\u79bb\u5185\u90fd\u4e0d\u60f3\u6709\u5176\u4ed6\u4eba\uff0c\u95ee\u600e\u4e48\u5b89\u6392\u4f7f\u5f97\u505a\u7684\u4eba\u505a\u591a\uff1f \u7ed9\u4f60\u4e2a\u68cb\u76d8\uff0c\u68cb\u76d8\u4e0a\u67d0\u4e9b\u4f4d\u7f6e\u6709\u68cb\u5b50\uff0c\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\u68cb\u5b50\uff0c\u8ba9\u4f60\u9009\u5c3d\u53ef\u80fd\u591a\u7684\u68cb\u5b50 \u7ed9\u4e00\u4e2a\u6570k\uff0c\u95ee\u4ed6\u7684\u6b63\u6574\u6570\u500d\u6570\u4e2d\uff0c\uff08\u5341\u8fdb\u5236\u4e0b\uff09\u6bcf\u4e00\u4f4d\u7684\u548c\u6700\u5c0f\u662f\u591a\u5c11, 2\\leq k \\leq 10^{5} 2\\leq k \\leq 10^{5} \u4ece1\u5f00\u59cb \uff0c \u5efa\u7acb\u4e00\u4e2a\u6570x\u5230x+1\u548cx*10\u5206\u522b\u4e3a1\u548c0\u7684\u8fb9\uff0c\u6700\u540e\u627e\u5230\u6700\u5feb\u5230\u8fbe\u7684k\u7684\u500d\u6570\uff0c\u5373\u7b54\u6848\u6700\u77ed\u8def \u6709\u4e00\u6761\u7ebf\u6bb5\uff0c1\u5230n\uff0cn\u4e2a\u4f4d\u7f6e\uff0c\u4f60\u6709m\u4e2a\u68cb\u5b50\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u653e\u4e00\u4e9b\u68cb\u5b50\uff0c\u7ed9\u4f60q\u4e2a\u533a\u95f4\u6761\u4ef6 a,b,c a,b,c \uff0c\u8868\u793a [a,b] [a,b] \u533a\u95f4\u6700\u5c11\u8981\u6709c\u4e2a\u68cb\u5b50\uff0c\u95ee\u4f60\u81f3\u5c11\u8981\u7528\u591a\u5c11\u4e2a\u68cb\u5b50 d_{i} d_{i} \u8868\u793a\u524di\u4e2a\u4f4d\u7f6e\u7684\u68cb\u5b50\u4e2a\u6570\uff0c\u5bf9\u4e8e\u6761\u4ef6\uff0c\u5219\u662f d_{b}-d_{a-1} \\ge c d_{b}-d_{a-1} \\ge c d_{i+1} - d_{i} \\ge 0 d_{i+1} - d_{i} \\ge 0 d_{n} - d_{0} \\le m d_{n} - d_{0} \\le m \u4e8c\u5206+\u5dee\u5206\u7ea6\u675fspfa\u5224\u65ad\u662f\u5426\u6709\u89e3","title":"\u56fe\u8bba\u7684\u7cbe\u9ad3 \uff1a \u5efa\u56fe"},{"location":"graph/difference-constraint/","text":"\u5dee\u5206\u7ea6\u675f \u00b6 What\uff1f \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898 \u00b6 \u82e5\u5e72\u53d8\u91cf \u53d8\u91cf\u5dee\u6765\u7ea6\u675f\u5173\u7cfb x_{1}-x_{2} > 1 x_{1}-x_{2} > 1 x_{2}-x_{3} > 2 x_{2}-x_{3} > 2 ... ... \u6c42\u89e3(\u4efb\u610f\u89e3\u3001\u4e00\u7ec4\u89e3\u3001\u6700\u5927\u6700\u5c0f\u89e3\uff09 \u600e\u4e48\u505a\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u662f\u4e00\u79cd\u7279\u6b8a\u7684 n n \u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u5b83\u5305\u542b n n \u4e2a\u53d8\u91cf x_1,x_2,...,x_n x_1,x_2,...,x_n \u4ee5\u53ca m m \u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u662f\u7531\u4e24\u4e2a\u5176\u4e2d\u7684\u53d8\u91cf\u505a\u5dee\u6784\u6210\u7684\uff0c\u5f62\u5982 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u5176\u4e2d c_k c_k \u662f\u5e38\u6570\uff08\u53ef\u4ee5\u662f\u975e\u8d1f\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570\uff09\u3002\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff1a\u6c42\u4e00\u7ec4\u89e3 x_1=a_1,x_2=a_2,...,x_n=a_n x_1=a_1,x_2=a_2,...,x_n=a_n \uff0c\u4f7f\u5f97\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u5f97\u5230\u6ee1\u8db3\uff0c\u5426\u5219\u5224\u65ad\u51fa\u65e0\u89e3\u3002 \u8fd8\u8bb0\u5f97\u6700\u77ed\u8def\u5417\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \u90fd\u53ef\u4ee5\u53d8\u5f62\u6210 x_i\\leq x_j+c_k x_i\\leq x_j+c_k \uff0c\u8fd9\u4e0e\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f dist[y]\\leq dist[x]+z dist[y]\\leq dist[x]+z \u975e\u5e38\u76f8\u4f3c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u53d8\u91cf x_i x_i \u770b\u505a\u56fe\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u4ece\u7ed3\u70b9 j j \u5411\u7ed3\u70b9 i i \u8fde\u4e00\u6761\u957f\u5ea6\u4e3a c_k c_k \u7684\u6709\u5411\u8fb9\u3002 \u5177\u4f53\u505a\u6cd5 \u00b6 \u8bbe dist[0]=0 dist[0]=0 \u5e76\u5411\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u82e5\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u5219\u7ed9\u5b9a\u7684\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u65e0\u89e3\uff0c\u5426\u5219\uff0c x_i=dist[i] x_i=dist[i] \u4e3a\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\u3002 \u4e00\u822c\u4f7f\u7528 Bellman-Ford \u6216\u961f\u5217\u4f18\u5316\u7684 Bellman-Ford\uff08\u4fd7\u79f0 SPFA\uff0c\u5728\u67d0\u4e9b\u968f\u673a\u56fe\u8dd1\u5f97\u5f88\u5feb\uff09\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002 \u4f8b\u9898 \u00b6 luogu P1993 \u5c0f K \u7684\u519c\u573a \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u6c42\u89e3\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709 m m \u6761\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u6761\u90fd\u4e3a\u5f62\u5982 x_a-x_b\\geq c_k x_a-x_b\\geq c_k \uff0c x_a-x_b\\leq c_k x_a-x_b\\leq c_k \u6216 x_a=x_b x_a=x_b \u7684\u5f62\u5f0f\uff0c\u5224\u65ad\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u6ca1\u6709\u89e3\u3002 \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\geq c x_a - x_b \\geq c x_b - x_a \\leq -c x_b - x_a \\leq -c add(a, b, -c); x_a - x_b < c x_a - x_b < c x_a - x_b \\leq c-1 x_a - x_b \\leq c-1 add(b, a, c-1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0); \u6700\u957f\u8fb9\u7248\u672c \u00b6 \u4e5f\u53ef\u4ee5\u6539\u6210 \\ge \\ge ,\u4e0d\u8fc7\u8981\u6c42\u6700\u957f\u8def\uff0c\u521d\u59cb\u503c-INF \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\leq c x_a - x_b \\leq c x_b - x_a \\geq -c x_b - x_a \\geq -c add(a, b, -c); x_a - x_b > c x_a - x_b > c x_a - x_b \\geq c+1 x_a - x_b \\geq c+1 add(b, a, c+1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0);","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"graph/difference-constraint/#_1","text":"What\uff1f","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"graph/difference-constraint/#_2","text":"\u82e5\u5e72\u53d8\u91cf \u53d8\u91cf\u5dee\u6765\u7ea6\u675f\u5173\u7cfb x_{1}-x_{2} > 1 x_{1}-x_{2} > 1 x_{2}-x_{3} > 2 x_{2}-x_{3} > 2 ... ... \u6c42\u89e3(\u4efb\u610f\u89e3\u3001\u4e00\u7ec4\u89e3\u3001\u6700\u5927\u6700\u5c0f\u89e3\uff09 \u600e\u4e48\u505a\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u662f\u4e00\u79cd\u7279\u6b8a\u7684 n n \u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u5b83\u5305\u542b n n \u4e2a\u53d8\u91cf x_1,x_2,...,x_n x_1,x_2,...,x_n \u4ee5\u53ca m m \u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u662f\u7531\u4e24\u4e2a\u5176\u4e2d\u7684\u53d8\u91cf\u505a\u5dee\u6784\u6210\u7684\uff0c\u5f62\u5982 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u5176\u4e2d c_k c_k \u662f\u5e38\u6570\uff08\u53ef\u4ee5\u662f\u975e\u8d1f\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570\uff09\u3002\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff1a\u6c42\u4e00\u7ec4\u89e3 x_1=a_1,x_2=a_2,...,x_n=a_n x_1=a_1,x_2=a_2,...,x_n=a_n \uff0c\u4f7f\u5f97\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u5f97\u5230\u6ee1\u8db3\uff0c\u5426\u5219\u5224\u65ad\u51fa\u65e0\u89e3\u3002 \u8fd8\u8bb0\u5f97\u6700\u77ed\u8def\u5417\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \u90fd\u53ef\u4ee5\u53d8\u5f62\u6210 x_i\\leq x_j+c_k x_i\\leq x_j+c_k \uff0c\u8fd9\u4e0e\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f dist[y]\\leq dist[x]+z dist[y]\\leq dist[x]+z \u975e\u5e38\u76f8\u4f3c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u53d8\u91cf x_i x_i \u770b\u505a\u56fe\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u4ece\u7ed3\u70b9 j j \u5411\u7ed3\u70b9 i i \u8fde\u4e00\u6761\u957f\u5ea6\u4e3a c_k c_k \u7684\u6709\u5411\u8fb9\u3002","title":"\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898"},{"location":"graph/difference-constraint/#_3","text":"\u8bbe dist[0]=0 dist[0]=0 \u5e76\u5411\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u82e5\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u5219\u7ed9\u5b9a\u7684\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u65e0\u89e3\uff0c\u5426\u5219\uff0c x_i=dist[i] x_i=dist[i] \u4e3a\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\u3002 \u4e00\u822c\u4f7f\u7528 Bellman-Ford \u6216\u961f\u5217\u4f18\u5316\u7684 Bellman-Ford\uff08\u4fd7\u79f0 SPFA\uff0c\u5728\u67d0\u4e9b\u968f\u673a\u56fe\u8dd1\u5f97\u5f88\u5feb\uff09\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002","title":"\u5177\u4f53\u505a\u6cd5"},{"location":"graph/difference-constraint/#_4","text":"","title":"\u4f8b\u9898"},{"location":"graph/difference-constraint/#luogu-p1993-k","text":"\u9898\u76ee\u5927\u610f\uff1a\u6c42\u89e3\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709 m m \u6761\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u6761\u90fd\u4e3a\u5f62\u5982 x_a-x_b\\geq c_k x_a-x_b\\geq c_k \uff0c x_a-x_b\\leq c_k x_a-x_b\\leq c_k \u6216 x_a=x_b x_a=x_b \u7684\u5f62\u5f0f\uff0c\u5224\u65ad\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u6ca1\u6709\u89e3\u3002 \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\geq c x_a - x_b \\geq c x_b - x_a \\leq -c x_b - x_a \\leq -c add(a, b, -c); x_a - x_b < c x_a - x_b < c x_a - x_b \\leq c-1 x_a - x_b \\leq c-1 add(b, a, c-1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0);","title":"luogu P1993 \u5c0f K \u7684\u519c\u573a"},{"location":"graph/difference-constraint/#_5","text":"\u4e5f\u53ef\u4ee5\u6539\u6210 \\ge \\ge ,\u4e0d\u8fc7\u8981\u6c42\u6700\u957f\u8def\uff0c\u521d\u59cb\u503c-INF \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\leq c x_a - x_b \\leq c x_b - x_a \\geq -c x_b - x_a \\geq -c add(a, b, -c); x_a - x_b > c x_a - x_b > c x_a - x_b \\geq c+1 x_a - x_b \\geq c+1 add(b, a, c+1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0);","title":"\u6700\u957f\u8fb9\u7248\u672c"},{"location":"graph/intro/","text":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005 \u00b6 DcmTruman","title":"\u56fe\u8bba\u7b80\u4ecb"},{"location":"graph/intro/#_1","text":"DcmTruman","title":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005"},{"location":"numbertheory/intro/","text":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005 \u00b6 \u5415\u961f\u725b\u903c","title":"\u6570\u8bba\u7b80\u4ecb"},{"location":"numbertheory/intro/#_1","text":"\u5415\u961f\u725b\u903c","title":"\u6b64\u90e8\u5206\u7684\u8d21\u732e\u8005"},{"location":"numbertheory/numbertheory/","text":"\u6570\u8bba \u00b6 \u76ee\u6807 \u00b6 \u590d\u4e60 + \u62d3\u5c55 \u8d28\u6570 \u00b6 \u7d20\u6570\u95f4\u9694-Prime gap \u00b6 The first 60 prime gaps are: 1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 14, 4, 6, 2, 10, 2, 6, 6, 4, 6, 6, 2, 10, 2, 4, 2, 12, 12, 4, 2, 4, 6, 2, 10, 6, 6, 6, 2, 6, 4, 2 \u6709\u65e0\u7a77\u5bf9\u7d20\u6570\uff0c\u4e4b\u95f4\u5b58\u5728\u7740\u4e00\u5b9a\u7684\u95f4\u9694\u3002\u95f4\u9694\u4ece\u88ab\u8bc1\u660e\u4e3a7000\u4e07\u4ee5\u5185\uff0c\u4e00\u76f4\u5230\u5982\u4eca\u7684246\u3002\u5982\u679c\u8be5\u5e38\u6570\u6539\u8fdb\u52302\uff0c\u76f8\u5f53\u4e8e\u8bc1\u660e\u5b6a\u751f\u7d20\u6570\u731c\u60f3 \u7d20\u6570\u4e4b\u95f4\u95f4\u9694\u53ef\u4ee5\u6709\u591a\u8fdc\uff0c The 80 known maximal prime gaps \u7d20\u6570\u5b9a\u7406-Prime Number Theorem \u00b6 \u8d28\u6570\u5206\u5e03\u5bc6\u5ea6 \u4e0d\u8d85\u8fc7x\u7684\u8d28\u6570\u7684\u603b\u6570\u03c0(x)\u8fd1\u4f3c\u4e8ex/ln(x) \u03c0(2)=1\uff0c\u03c0(3.5)=2\uff0c\u03c0(10)=4 \u7d20\u6570\u7b5b\u6cd5 \u00b6 \u6c42 1 1 \u5230 n n \u4e4b\u95f4\u5185\u7684\u6240\u6709\u7d20\u6570 \u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 sqrt(n) sqrt(n) \u7684\u5224\u522b O(n*sqrt(n)) O(n*sqrt(n)) \u666e\u901a\u7b5b / \u57c3\u6c0f\u7b5b\u6cd5 O(nloglogn) O(nloglogn) \u7ebf\u6027\u7b5b / \u6b27\u62c9\u7b5b\u6cd5 O(n) O(n) \u7d20\u6570\u6d4b\u8bd5-Miller Rabin \u00b6 \u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u4f55\u5927\u4e8e2\u7684\u5076\u6570\u90fd\u80fd\u591f\u5199\u6210\u4e24\u4e2a\u8d28\u6570\u76f8\u52a0\u7684\u5f62\u5f0f \u5f53\u9898\u76ee\u7ed9\u51fa\u7684\u5076\u6570\u8fbe\u5230 10^{18} 10^{18} \uff0c\u6b64\u65f6\u7684\u8d28\u6570\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u7528\u4e0a\u8ff0\u7684\u7b5b\u6cd5\u53ef\u80fd\u4f1a\u8d85\u65f6\uff0c\u7528Miller Rabin\u5feb\u901f\u5224\u65ad\u4e00\u4e2a <2^{63} <2^{63} \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(klog_2(n)) O(klog_2(n)) \uff0c n n \u4e3a\u68c0\u6d4b\u7684\u6570\u503c\uff0c k k \u4e3a\u81ea\u5df1\u8bbe\u5b9a\u7684\u68c0\u6d4b\u7684\u6b21\u6570 \u4e0d\u786e\u5b9a\u7b97\u6cd5\uff0c\u5355\u6b21\u6d4b\u8bd5\u6709\u4e0d\u8d85\u8fc7 \\frac{1}{4} \\frac{1}{4} \u7684\u6982\u7387\u4f1a\u5c06\u4e00\u4e2a\u5408\u6570\u8bef\u5224\u4e3a\u4e00\u4e2a\u7d20\u6570 \u4f9d\u636e \u00b6 \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb \u7b97\u6cd5\u8fc7\u7a0b \u00b6 \u5076\u6570\u30010\u30011\u30012\u76f4\u63a5\u5224\u65ad \u5047\u8bbe\u8981\u6d4b\u8bd5\u7684\u6570\u4e3a n n \uff0c\u9009\u53d6\u6574\u6570 r r \u548c\u5947\u6570 d d \uff0c\u6ee1\u8db3 n-1=2^rd n-1=2^rd \u9009\u53d6 a \\in (1,...,n-1) a \\in (1,...,n-1) \u5982\u679c a^d=1(modn) a^d=1(modn) \u6216\u8005 a^d=n-1(modn) a^d=n-1(modn) \uff0c\u5373\u6ee1\u8db3\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff0c\u5219\u8c03\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1 \u5bf9\u4e8e i=0,...,r-1 i=0,...,r-1 \uff0c\u9a8c\u8bc1 a^{2^id} a^{2^id} \u662f\u5426\u6ee1\u8db3 a^{2^id}=n-1(modn) a^{2^id}=n-1(modn) \uff0c\u6ee1\u8db3\u5219\u8df3\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1\uff0c\u4e0d\u6ee1\u8db3\u5219 n n \u4e3a\u5408\u6570 \u7ecf\u8fc7 k k \u6b21\u9a8c\u8bc1\u540e\uff0c n n \u53ef\u80fd\u662f\u7d20\u6570 \u5b9e\u9a8c\u7684\u4f2a\u7801\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Input #1: n > 3, an odd integer to be tested for primality Input #2: k, the number of rounds of testing to perform Output: \u201ccomposite\u201d if n is found to be composite, \u201cprobably prime\u201d otherwise write n as 2^r\u00b7d + 1 with d odd (by factoring out powers of 2 from n \u2212 1) WitnessLoop: repeat k times: pick a random integer a in the range [2, n \u2212 2] x \u2190 a^d mod n if x = 1 or x = n \u2212 1 then continue WitnessLoop repeat r \u2212 1 times: x \u2190 x^2 mod n if x = n \u2212 1 then continue WitnessLoop return \u201ccomposite\u201d return \u201cprobably prime\u201d video tutorial Miller Rabin\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 typedef unsigned long long ll ; //typedef long long ll; //ll*ll\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u4e58\u6cd5\u5316\u52a0\u6cd5 /* ************************************************* * Miller_Rabin \u7b97\u6cd5\u8fdb\u884c\u7d20\u6570\u6d4b\u8bd5 * \u901f\u5ea6\u5feb\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a < 2^63 \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 * **************************************************/ #include <time.h> #include <stdlib.h> const int S = 8 ; //\u968f\u673a\u7b97\u6cd5\u5224\u5b9a\u6b21\u6570\u4e00\u822c 8\uff5e10 \u5c31\u591f\u4e86 // \u8ba1\u7b97 ret = (a*b)%c a,b,c < 2^63 ll mult_mod ( ll a , ll b , ll c ){ a %= c ; b %= c ; ll ret = 0 ; ll tmp = a ; while ( b ){ if ( b & 1 ){ ret += tmp ; if ( ret > c ) ret -= c ; //\u76f4\u63a5\u53d6\u6a21\u6162\u5f97\u591a } tmp <<= 1 ; if ( tmp > c ) tmp -= c ; b >>= 1 ; } return ret ; } // \u8ba1\u7b97 ret = (a^n)%mod ll pow_mod ( ll a , ll n , ll mod ){ ll ret = 1 ; ll tmp = a % mod ; while ( n ){ if ( n & 1 ) ret = mult_mod ( ret , tmp , mod ); tmp = mult_mod ( tmp , tmp , mod ); n >>= 1 ; } return ret ; } // \u901a\u8fc7 a^(n-1)=1(modn)\u6765\u5224\u65ad n \u662f\u4e0d\u662f\u7d20\u6570 // n - 1 = x * (2^t) // \u4e2d\u95f4\u4f7f\u7528\u4e8c\u6b21\u5224\u65ad // \u662f\u5408\u6570\u8fd4\u56de true, \u4e0d\u4e00\u5b9a\u662f\u5408\u6570\u8fd4\u56de false bool check ( ll a , ll n , ll x , ll t ){ ll ret = pow_mod ( a , x , n ); ll last = ret ; for ( int i = 1 ; i <= t ; i ++ ){ ret = mult_mod ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n - 1 ) return true ; //\u5408\u6570 last = ret ; } if ( ret != 1 ) return true ; // \u8d39\u9a6c\u5c0f\u5b9a\u7406 else return false ; } //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n - 1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; } \u5927\u6570\u7684\u8d28\u56e0\u5b50\u5206\u89e3-Pollard-Rho \u00b6 O(n^{\\frac{1}{4}}) O(n^{\\frac{1}{4}}) \u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u5408\u6570 n n \u7684\u67d0\u4e2a\u975e\u5e73\u51e1\u56e0\u5b50(\u5e73\u51e1\u56e0\u5b50\u6307 1 1 \u548c n n \uff0c\u975e\u5e73\u51e1\u56e0\u5b50\u6307 x \\in [2,n-1]\uff0cn mod x=0 x \\in [2,n-1]\uff0cn mod x=0 ) \u8bd5\u9664\u6cd5\uff1a n n \u7684\u56e0\u6570\u5bf9\u79f0\u5206\u5e03\uff0c\u904d\u5386\u533a\u95f4 [1,\\sqrt N] [1,\\sqrt N] \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt N) O(\\sqrt N) \u4e0d\u76f4\u63a5\u5bfb\u627e\u56e0\u5b50\uff0c\u800c\u662f\u5bfb\u627e\u56e0\u5b50\u7684\u500d\u6570\uff0c\u7136\u540e\u901a\u8fc7GCD\u627e\u5230\u56e0\u5b50\u672c\u8eab \u601d\u8def \u00b6 \u5bf9\u4e8e N\u2a7e10^{18} N\u2a7e10^{18} \uff0c\u4f7f\u7528 \u968f\u673a\u7b97\u6cd5 -\u731c\u56e0\u6570 \u7ec4\u5408\u968f\u673a\u91c7\u6837-\u751f\u65e5\u6096\u8bba\uff1a\u6ee1\u8db3\u7b54\u6848\u7684\u7ec4\u5408\u6bd4\u5355\u4e2a\u4e2a\u4f53\u8981\u591a\u4e00\u4e9b \u5047\u5982\u4e00\u4e2a\u73ed\u4e0a\u6709 k k \u4e2a\u4eba\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2a\u4eba\u7684\u751f\u65e5\u662fx\u6708x\u65e5\uff0c\u8fd9\u4e2a\u6982\u7387\u4f1a\u76f8\u5f53\u4f4e\uff1b\u5982\u679c\u60f3\u627e\u4e24\u4e2a\u751f\u65e5\u76f8\u540c\uff0c\u5f53 k=23 k=23 \uff0c\u4e24\u4e2a\u4eba\u5728\u540c\u4e00\u5929\u751f\u65e5\u7684\u6982\u7387\u81f3\u5c11\u6709 50\\% 50\\% \uff0c k=60 k=60 \u65f6\uff0c\u751f\u65e5\u6709\u91cd\u590d\u7684\u73b0\u8c61\u7684\u6982\u7387 \\text{P}(k) \u22480.9999 \\text{P}(k) \u22480.9999 \u6700\u5927\u516c\u7ea6\u6570\u4e00\u5b9a\u662f\u67d0\u4e2a\u6570\u7684\u7ea6\u6570\u3002\u901a\u8fc7\u9009\u62e9\u9002\u5f53\u7684 k k \u4f7f\u5f97 \\gcd(k,n)>1 \\gcd(k,n)>1 \uff0c\u5219\u6c42\u5f97\u7684 \\gcd(k,n) \\gcd(k,n) \u662f n n \u7684\u7ea6\u6570\u3002\u5219\u9009\u53d6\u4e00\u7ec4\u6570 x_1,x_2,x_3,...x_n x_1,x_2,x_3,...x_n \uff0c\u82e5\u6709 gcd(|x_i-x_j|,n)>1 gcd(|x_i-x_j|,n)>1 \uff0c\u5219\u79f0 gcd(|x_i-x_j|,n) gcd(|x_i-x_j|,n) \u662f n n \u7684\u4e00\u4e2a\u56e0\u5b50\u3002 \u6784\u9020\u4e00\u4e2a \u4f2a\u968f\u673a\u6570\u5e8f\u5217 \uff0c\u7136\u540e\u53d6\u76f8\u90bb\u7684\u4e24\u9879\u6765\u6c42gcd\u3002Pollard\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u51fd\u6570: f(x)=(x^2+c)\\mod N f(x)=(x^2+c)\\mod N \u5176\u4e2dc\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5e38\u6570\u3002\u9009\u53d6 x_1 x_1 \uff0c\u4ee4 x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) Floyd\u5224\u5708\u3002\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u6570\u5217\u662f\u968f\u673a\u7684\uff1b\u4f46\u4e5f\u6709\u6b7b\u5faa\u73af\u7684\u60c5\u51b5\u3002\u9f9f\u5154\u8d5b\u8dd1\uff1a\u5154\u5b50\u6bd4\u4e4c\u9f9f\u5feb\u4e00\u500d\uff0c\u540c\u8d77\u70b9\u540c\u65f6\u5f00\u59cb\uff0c\u5f53\u5154\u5b50\u201c\u8ffd\u4e0a\u201d\u4e4c\u9f9f\u65f6\uff0c\u5154\u5b50\u4e00\u5b9a\u8dd1\u4e86\u521a\u597d\u4e00\u5708\u3002 brent\u5224\u73af(\u66f4\u9ad8\u6548) kuangbin\u7684\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n - 1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; } //********************************************** // pollard_rho \u7b97\u6cd5\u8fdb\u884c\u8d28\u56e0\u7d20\u5206\u89e3 //********************************************* ll factor [ 100 ]; //\u8d28\u56e0\u7d20\u5206\u89e3\u7ed3\u679c\uff08\u521a\u8fd4\u56de\u65f6\u65f6\u65e0\u5e8f\u7684\uff09 int tol ; //\u8d28\u56e0\u7d20\u7684\u4e2a\u6570\uff0c\u7f16\u53f7 0\uff5etol-1 ll gcd ( ll a , ll b ){ ll t ; while ( b ){ t = a ; a = b ; b = t % b ; } if ( a >= 0 ) return a ; else return - a ; } //\u627e\u51fa\u4e00\u4e2a\u56e0\u5b50 ll pollard_rho ( ll x , ll c ){ ll i = 1 , k = 2 ; srand ( time ( NULL )); ll x0 = rand () % ( x - 1 ) + 1 ; ll y = x0 ; while ( 1 ){ i ++ ; x0 = ( mult_mod ( x0 , x0 , x ) + c ) % x ; //\u4e0d\u65ad\u8c03\u6574x2 ll d = gcd ( y - x0 , x ); if ( d != 1 && d != x ) return d ; //\u627e\u5230\u56e0\u5b50\uff0c\u8fd4\u56de if ( y == x0 ) return x ; //\u5224\u5708 \u51fa\u73b0\u5faa\u73af\uff0c\u8fd4\u56de if ( i == k ){ y = x0 ; k += k ;} } } // \u5bf9 n \u8fdb\u884c\u7d20\u56e0\u5b50\u5206\u89e3\uff0c\u5b58\u5165 factor. k \u8bbe\u7f6e\u4e3a 107 \u5de6\u53f3\u5373\u53ef // \u5982\u679cn \u672c\u8eab\u5c31\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5c06 n \u5b58\u653e\u5728 factor \u4fbf\u53ef\u7ed3\u675f\u5e76\u8fd4\u56de // \u5982\u679c n \u4e0d\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u901a\u8fc7 pollard_rho()\u51fd\u6570 \u627e\u5230 n \u7684\u4e00\u4e2a\u56e0\u5b50 p(\u4e0d\u4e00\u5b9a\u662f\u7d20\u56e0\u5b50)\uff0c\u9012\u5f52 findFac(p)\u548c findFac(n/p) void findfac ( ll n , int k ){ if ( n == 1 ) return ; //\u9012\u5f52\u51fa\u53e3 if ( Miller_Rabin ( n )) { factor [ tol ++ ] = n ; return ; } ll p = n ; int c = k ; //\u503c\u53d8\u5316\uff0c\u9632\u6b62\u6b7b\u5faa\u73af while ( p >= n ) // \u6539\u53d8\u5e38\u6570c\uff0c\u4e0d\u65ad\u627e\u56e0\u5b50\uff0c\u8fd4\u56den\u8bf4\u660e\u6ca1\u627e\u5230 p = pollard_rho ( p , c -- ); findfac ( p , k ); findfac ( n / p , k ); } \u6d1b\u8c37 P4718\u3010\u6a21\u677f\u3011Pollard-Rho\u7b97\u6cd5 TLE-\u9898\u89e3\u7684\u535a\u5ba2\u4e2d\u6709\u4e00\u6b65\u6b65\u4f18\u5316\u7684\u8fc7\u7a0b \u6b27\u62c9\u964d\u5e42 \u00b6 \u80cc\u666f \u00b6 \u7ed9\u4e09\u4e2a\u6b63\u6574\u6570\uff0c a,m,b a,m,b \uff0c\u9700\u8981\u6c42\uff1a a^b mod m a^b mod m \u6570\u636e\u8303\u56f4\uff1a 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 \u6307\u6570\u7206\u70b8 \u7406\u8bba\u4f9d\u636e \u00b6 \u6b27\u62c9\u5b9a\u7406\uff1a a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 \u62d3\u5c55\u6b27\u62c9\u964d\u5e42 a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p \u5047\u8bbe k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) \uff0c\u5219 a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) \u6b27\u62c9\u964d\u5e42\u516c\u5f0f\u7684\u8bc1\u660e \u4ee3\u7801\u6a21\u677f \u00b6 \u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 long long eular ( long long n ){ long long ans = n ; for ( int i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ ans -= ans / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) ans \u2212 = ans / n ; return ans ; } \u62d3\u5c55\u6b27\u62c9\u51fd\u6570 \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8bfb\u5165\u5927\u6570\uff0c\u5904\u7406\u5f97\u5230 bmod\\varphi(p) bmod\\varphi(p) \u9700\u8981\u5224\u65ad b b \u548c \\varphi(p) \\varphi(p) \u7684\u5927\u5c0f\uff0c\u5426\u5219\u4f1a\u51fa\u9519 \u6d1b\u8c37 P5091 \u6a21\u677f\u9898 1 2 3 4 5 6 7 8 9 // char b[maxn] ll ans = 0 ; c = eular ( p ); ll len = strlen ( b ); for ( ll i = 0 ; i < len ; i ++ ) ans = ( ans * 10 + b [ i ] - '0' ) % c ; ans += p ; // \u5feb\u901f\u5e42\u8ba1\u7b97 a\u662f\u5e95\u6570\uff0cans\u662f\u6307\u6570\uff0cp\u662f\u6a21\u6570 qPow ( a , ans , p ); \u6b27\u62c9\u51fd\u6570\u5e38\u7528\u6027\u8d28\u548c\u516c\u5f0f \u00b6 \u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n) \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n) RSA\uff1a\u516c\u94a5\u5bc6\u7801\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u6d41\u7a0b \u00b6 \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n \u77e5\u8bc6\u70b9 \u00b6 \u6c42\u9006\u5143(\u6b27\u62c9\u5b9a\u7406/\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97) + \u5feb\u901f\u5e42 \u82e5(a*x)%mod=1\uff0c\u5219x\u662f\u6b63\u6574\u6570a\u5728\u6a21mod\u4e0b\u7684\u9006\u5143 \u65b9\u6cd5 \u9650\u5b9a \u65f6\u95f4\u590d\u6742\u5ea6 \u7ebf\u6027\u6253\u8868\u6cd5 \u53ea\u8981\u6c42mod\u662f\u8d28\u6570 O(n) \u8d39\u9a6c\u5c0f\u5b9a\u7406 mod\u662f\u8d28\u6570\u4e14\u4e0ea\u4e92\u8d28\uff0c\u5feb\u901f\u5e42\u4f18\u5316 O(log(n)) \u6b27\u62c9\u5b9a\u7406 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28\uff0c\u9700\u8981\u6b27\u62c9\u51fd\u6570\u4e0e\u5feb\u901f\u5e42 O(sqrt(n)+log(n)) \u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28 O(log(n)) \u62d3\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u97e9\u4fe1\u70b9\u5175\uff0c\u4e09\u4e2a\u4e09\u4e2a\u4e00\u6392\u5c111\u4e2a\u4eba\uff0c\u4e94\u4e2a\u4e94\u4e2a\u4e00\u6392\u53c8\u5c111\u4e2a\u4eba\uff0c\u4e03\u4e2a\u4e03\u4e2a\u4e00\u6392\u8fd8\u5c111\u4e2a\u4eba \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) ... ... x\u2261a_k (mod n_k) x\u2261a_k (mod n_k) \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c \u6a21\u6570\u4e24\u4e24\u4e0d\u4e92\u8d28 \u00b6 \u601d\u8def \u00b6 \u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b \u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u6d1b\u8c37 P4777 \u6a21\u677f\u9898 \u6c42\u89e3\u8fc7\u7a0b \u00b6 x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n \u6a21\u677f[\u4e0d\u552f\u4e00] \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 typedef long long ll ; ll exgcd ( ll a , ll b , ll & x , ll & y ){ if ( a == 0 && b == 0 ) return - 1 ; if ( b == 0 ){ x = 1 ; y = 0 ; return a ;} ll d = exgcd ( b , a % b , y , x ); y -= a / b * x ; return d ; } ll excrt (){ ll a1 = b [ 0 ], n1 = a [ 0 ], a2 , n2 , d , x , y , gcd ; //\u4f59\u6570 b[] \u9664\u6570 a[] // \u8fd4\u56de\u7684\u662f\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff0c\u6709\u4e9b\u9898\u76ee\u9700\u8981\u7279\u5224 //\u82e5\u5f53\u4f59\u6570\u4e3a0\u7684\u65f6\u5019 \u9898\u76ee\u8981\u6c42\u6c42\u6b63\u6574\u6570 \u6240\u4ee50\u4e0d\u7b97\u5728\u5185\uff0c\u5e94\u8be5\u52a0\u4e0a\u4e0b\u9762\u7684\u6ce8\u91ca\uff0c\u5373\u4f59\u6570\u7b49\u4e8e\u9664\u6570\uff0c\u540c\u7406\u540e\u9762\u7684\u677f\u5b50 //if(a1==0)a1=a[0] for ( int i = 1 ; i < n ; i ++ ){ a2 = b [ i ]; n2 = a [ i ]; d = a2 - a1 ; gcd = exgcd ( n1 , n2 , x , y ); if ( d % gcd ) return - 1 ; x = (( x * d / gcd ) % ( n2 / gcd ) + ( n2 / gcd )) % ( n2 / gcd ); a1 = x * n1 + a1 ; n1 = n1 * n2 / gcd ; } return a1 ; } \u5b9a\u7406&\u731c\u60f3&\u516c\u5f0f \u00b6 \u8d39\u9a6c\u5927\u5b9a\u7406\uff1a \u5f53\u6574\u6570n >2\u65f6\uff0c \u5f53\u6574\u6570n >2\u65f6\uff0c \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5b9e\u6570\u57df\u4e0d\u53ef\u62c6\u5206\u591a\u9879\u5f0f\uff1a \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u827e\u68ee\u65af\u5766\u56e0\u5224\u522b\u6cd5\uff1a\u6709\u7406\u6570\u57df\u4e0d\u53ef\u7ea6\uff0c\u5373\u4e00\u5b9a\u8981\u6574\u6570\u89e3 \u52fe\u80a1\u6570 \u4efb\u610f\u5927\u4e8e2\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u6570\u6784\u6210\u52fe\u80a1\u6570 \u672c\u539f\u52fe\u80a1\u6570 \u56db\u8272\u731c\u60f3 \u5eb7\u5a01\u5e38\u6570 \u65e5\u671f\u8f6c\u5316\u6210\u661f\u671f \u8521\u52d2\u516c\u5f0f \u57fa\u59c6\u62c9\u5c14\u68ee\u8ba1\u7b97\u516c\u5f0f \u65af\u7279\u6797\u516c\u5f0f - \u9636\u4e58","title":"\u6570\u8bba"},{"location":"numbertheory/numbertheory/#_1","text":"","title":"\u6570\u8bba"},{"location":"numbertheory/numbertheory/#_2","text":"\u590d\u4e60 + \u62d3\u5c55","title":"\u76ee\u6807"},{"location":"numbertheory/numbertheory/#_3","text":"","title":"\u8d28\u6570"},{"location":"numbertheory/numbertheory/#-prime-gap","text":"The first 60 prime gaps are: 1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 14, 4, 6, 2, 10, 2, 6, 6, 4, 6, 6, 2, 10, 2, 4, 2, 12, 12, 4, 2, 4, 6, 2, 10, 6, 6, 6, 2, 6, 4, 2 \u6709\u65e0\u7a77\u5bf9\u7d20\u6570\uff0c\u4e4b\u95f4\u5b58\u5728\u7740\u4e00\u5b9a\u7684\u95f4\u9694\u3002\u95f4\u9694\u4ece\u88ab\u8bc1\u660e\u4e3a7000\u4e07\u4ee5\u5185\uff0c\u4e00\u76f4\u5230\u5982\u4eca\u7684246\u3002\u5982\u679c\u8be5\u5e38\u6570\u6539\u8fdb\u52302\uff0c\u76f8\u5f53\u4e8e\u8bc1\u660e\u5b6a\u751f\u7d20\u6570\u731c\u60f3 \u7d20\u6570\u4e4b\u95f4\u95f4\u9694\u53ef\u4ee5\u6709\u591a\u8fdc\uff0c The 80 known maximal prime gaps","title":"\u7d20\u6570\u95f4\u9694-Prime gap"},{"location":"numbertheory/numbertheory/#-prime-number-theorem","text":"\u8d28\u6570\u5206\u5e03\u5bc6\u5ea6 \u4e0d\u8d85\u8fc7x\u7684\u8d28\u6570\u7684\u603b\u6570\u03c0(x)\u8fd1\u4f3c\u4e8ex/ln(x) \u03c0(2)=1\uff0c\u03c0(3.5)=2\uff0c\u03c0(10)=4","title":"\u7d20\u6570\u5b9a\u7406-Prime Number Theorem"},{"location":"numbertheory/numbertheory/#_4","text":"\u6c42 1 1 \u5230 n n \u4e4b\u95f4\u5185\u7684\u6240\u6709\u7d20\u6570 \u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 sqrt(n) sqrt(n) \u7684\u5224\u522b O(n*sqrt(n)) O(n*sqrt(n)) \u666e\u901a\u7b5b / \u57c3\u6c0f\u7b5b\u6cd5 O(nloglogn) O(nloglogn) \u7ebf\u6027\u7b5b / \u6b27\u62c9\u7b5b\u6cd5 O(n) O(n)","title":"\u7d20\u6570\u7b5b\u6cd5"},{"location":"numbertheory/numbertheory/#-miller-rabin","text":"\u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u4f55\u5927\u4e8e2\u7684\u5076\u6570\u90fd\u80fd\u591f\u5199\u6210\u4e24\u4e2a\u8d28\u6570\u76f8\u52a0\u7684\u5f62\u5f0f \u5f53\u9898\u76ee\u7ed9\u51fa\u7684\u5076\u6570\u8fbe\u5230 10^{18} 10^{18} \uff0c\u6b64\u65f6\u7684\u8d28\u6570\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u7528\u4e0a\u8ff0\u7684\u7b5b\u6cd5\u53ef\u80fd\u4f1a\u8d85\u65f6\uff0c\u7528Miller Rabin\u5feb\u901f\u5224\u65ad\u4e00\u4e2a <2^{63} <2^{63} \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(klog_2(n)) O(klog_2(n)) \uff0c n n \u4e3a\u68c0\u6d4b\u7684\u6570\u503c\uff0c k k \u4e3a\u81ea\u5df1\u8bbe\u5b9a\u7684\u68c0\u6d4b\u7684\u6b21\u6570 \u4e0d\u786e\u5b9a\u7b97\u6cd5\uff0c\u5355\u6b21\u6d4b\u8bd5\u6709\u4e0d\u8d85\u8fc7 \\frac{1}{4} \\frac{1}{4} \u7684\u6982\u7387\u4f1a\u5c06\u4e00\u4e2a\u5408\u6570\u8bef\u5224\u4e3a\u4e00\u4e2a\u7d20\u6570","title":"\u7d20\u6570\u6d4b\u8bd5-Miller Rabin"},{"location":"numbertheory/numbertheory/#_5","text":"\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb","title":"\u4f9d\u636e"},{"location":"numbertheory/numbertheory/#_6","text":"\u5076\u6570\u30010\u30011\u30012\u76f4\u63a5\u5224\u65ad \u5047\u8bbe\u8981\u6d4b\u8bd5\u7684\u6570\u4e3a n n \uff0c\u9009\u53d6\u6574\u6570 r r \u548c\u5947\u6570 d d \uff0c\u6ee1\u8db3 n-1=2^rd n-1=2^rd \u9009\u53d6 a \\in (1,...,n-1) a \\in (1,...,n-1) \u5982\u679c a^d=1(modn) a^d=1(modn) \u6216\u8005 a^d=n-1(modn) a^d=n-1(modn) \uff0c\u5373\u6ee1\u8db3\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff0c\u5219\u8c03\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1 \u5bf9\u4e8e i=0,...,r-1 i=0,...,r-1 \uff0c\u9a8c\u8bc1 a^{2^id} a^{2^id} \u662f\u5426\u6ee1\u8db3 a^{2^id}=n-1(modn) a^{2^id}=n-1(modn) \uff0c\u6ee1\u8db3\u5219\u8df3\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1\uff0c\u4e0d\u6ee1\u8db3\u5219 n n \u4e3a\u5408\u6570 \u7ecf\u8fc7 k k \u6b21\u9a8c\u8bc1\u540e\uff0c n n \u53ef\u80fd\u662f\u7d20\u6570 \u5b9e\u9a8c\u7684\u4f2a\u7801\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Input #1: n > 3, an odd integer to be tested for primality Input #2: k, the number of rounds of testing to perform Output: \u201ccomposite\u201d if n is found to be composite, \u201cprobably prime\u201d otherwise write n as 2^r\u00b7d + 1 with d odd (by factoring out powers of 2 from n \u2212 1) WitnessLoop: repeat k times: pick a random integer a in the range [2, n \u2212 2] x \u2190 a^d mod n if x = 1 or x = n \u2212 1 then continue WitnessLoop repeat r \u2212 1 times: x \u2190 x^2 mod n if x = n \u2212 1 then continue WitnessLoop return \u201ccomposite\u201d return \u201cprobably prime\u201d video tutorial","title":"\u7b97\u6cd5\u8fc7\u7a0b"},{"location":"numbertheory/numbertheory/#miller-rabin","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 typedef unsigned long long ll ; //typedef long long ll; //ll*ll\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u4e58\u6cd5\u5316\u52a0\u6cd5 /* ************************************************* * Miller_Rabin \u7b97\u6cd5\u8fdb\u884c\u7d20\u6570\u6d4b\u8bd5 * \u901f\u5ea6\u5feb\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a < 2^63 \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 * **************************************************/ #include <time.h> #include <stdlib.h> const int S = 8 ; //\u968f\u673a\u7b97\u6cd5\u5224\u5b9a\u6b21\u6570\u4e00\u822c 8\uff5e10 \u5c31\u591f\u4e86 // \u8ba1\u7b97 ret = (a*b)%c a,b,c < 2^63 ll mult_mod ( ll a , ll b , ll c ){ a %= c ; b %= c ; ll ret = 0 ; ll tmp = a ; while ( b ){ if ( b & 1 ){ ret += tmp ; if ( ret > c ) ret -= c ; //\u76f4\u63a5\u53d6\u6a21\u6162\u5f97\u591a } tmp <<= 1 ; if ( tmp > c ) tmp -= c ; b >>= 1 ; } return ret ; } // \u8ba1\u7b97 ret = (a^n)%mod ll pow_mod ( ll a , ll n , ll mod ){ ll ret = 1 ; ll tmp = a % mod ; while ( n ){ if ( n & 1 ) ret = mult_mod ( ret , tmp , mod ); tmp = mult_mod ( tmp , tmp , mod ); n >>= 1 ; } return ret ; } // \u901a\u8fc7 a^(n-1)=1(modn)\u6765\u5224\u65ad n \u662f\u4e0d\u662f\u7d20\u6570 // n - 1 = x * (2^t) // \u4e2d\u95f4\u4f7f\u7528\u4e8c\u6b21\u5224\u65ad // \u662f\u5408\u6570\u8fd4\u56de true, \u4e0d\u4e00\u5b9a\u662f\u5408\u6570\u8fd4\u56de false bool check ( ll a , ll n , ll x , ll t ){ ll ret = pow_mod ( a , x , n ); ll last = ret ; for ( int i = 1 ; i <= t ; i ++ ){ ret = mult_mod ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n - 1 ) return true ; //\u5408\u6570 last = ret ; } if ( ret != 1 ) return true ; // \u8d39\u9a6c\u5c0f\u5b9a\u7406 else return false ; } //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n - 1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; }","title":"Miller Rabin\u6a21\u677f"},{"location":"numbertheory/numbertheory/#-pollard-rho","text":"O(n^{\\frac{1}{4}}) O(n^{\\frac{1}{4}}) \u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u5408\u6570 n n \u7684\u67d0\u4e2a\u975e\u5e73\u51e1\u56e0\u5b50(\u5e73\u51e1\u56e0\u5b50\u6307 1 1 \u548c n n \uff0c\u975e\u5e73\u51e1\u56e0\u5b50\u6307 x \\in [2,n-1]\uff0cn mod x=0 x \\in [2,n-1]\uff0cn mod x=0 ) \u8bd5\u9664\u6cd5\uff1a n n \u7684\u56e0\u6570\u5bf9\u79f0\u5206\u5e03\uff0c\u904d\u5386\u533a\u95f4 [1,\\sqrt N] [1,\\sqrt N] \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt N) O(\\sqrt N) \u4e0d\u76f4\u63a5\u5bfb\u627e\u56e0\u5b50\uff0c\u800c\u662f\u5bfb\u627e\u56e0\u5b50\u7684\u500d\u6570\uff0c\u7136\u540e\u901a\u8fc7GCD\u627e\u5230\u56e0\u5b50\u672c\u8eab","title":"\u5927\u6570\u7684\u8d28\u56e0\u5b50\u5206\u89e3-Pollard-Rho"},{"location":"numbertheory/numbertheory/#_7","text":"\u5bf9\u4e8e N\u2a7e10^{18} N\u2a7e10^{18} \uff0c\u4f7f\u7528 \u968f\u673a\u7b97\u6cd5 -\u731c\u56e0\u6570 \u7ec4\u5408\u968f\u673a\u91c7\u6837-\u751f\u65e5\u6096\u8bba\uff1a\u6ee1\u8db3\u7b54\u6848\u7684\u7ec4\u5408\u6bd4\u5355\u4e2a\u4e2a\u4f53\u8981\u591a\u4e00\u4e9b \u5047\u5982\u4e00\u4e2a\u73ed\u4e0a\u6709 k k \u4e2a\u4eba\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2a\u4eba\u7684\u751f\u65e5\u662fx\u6708x\u65e5\uff0c\u8fd9\u4e2a\u6982\u7387\u4f1a\u76f8\u5f53\u4f4e\uff1b\u5982\u679c\u60f3\u627e\u4e24\u4e2a\u751f\u65e5\u76f8\u540c\uff0c\u5f53 k=23 k=23 \uff0c\u4e24\u4e2a\u4eba\u5728\u540c\u4e00\u5929\u751f\u65e5\u7684\u6982\u7387\u81f3\u5c11\u6709 50\\% 50\\% \uff0c k=60 k=60 \u65f6\uff0c\u751f\u65e5\u6709\u91cd\u590d\u7684\u73b0\u8c61\u7684\u6982\u7387 \\text{P}(k) \u22480.9999 \\text{P}(k) \u22480.9999 \u6700\u5927\u516c\u7ea6\u6570\u4e00\u5b9a\u662f\u67d0\u4e2a\u6570\u7684\u7ea6\u6570\u3002\u901a\u8fc7\u9009\u62e9\u9002\u5f53\u7684 k k \u4f7f\u5f97 \\gcd(k,n)>1 \\gcd(k,n)>1 \uff0c\u5219\u6c42\u5f97\u7684 \\gcd(k,n) \\gcd(k,n) \u662f n n \u7684\u7ea6\u6570\u3002\u5219\u9009\u53d6\u4e00\u7ec4\u6570 x_1,x_2,x_3,...x_n x_1,x_2,x_3,...x_n \uff0c\u82e5\u6709 gcd(|x_i-x_j|,n)>1 gcd(|x_i-x_j|,n)>1 \uff0c\u5219\u79f0 gcd(|x_i-x_j|,n) gcd(|x_i-x_j|,n) \u662f n n \u7684\u4e00\u4e2a\u56e0\u5b50\u3002 \u6784\u9020\u4e00\u4e2a \u4f2a\u968f\u673a\u6570\u5e8f\u5217 \uff0c\u7136\u540e\u53d6\u76f8\u90bb\u7684\u4e24\u9879\u6765\u6c42gcd\u3002Pollard\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u51fd\u6570: f(x)=(x^2+c)\\mod N f(x)=(x^2+c)\\mod N \u5176\u4e2dc\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5e38\u6570\u3002\u9009\u53d6 x_1 x_1 \uff0c\u4ee4 x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) Floyd\u5224\u5708\u3002\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u6570\u5217\u662f\u968f\u673a\u7684\uff1b\u4f46\u4e5f\u6709\u6b7b\u5faa\u73af\u7684\u60c5\u51b5\u3002\u9f9f\u5154\u8d5b\u8dd1\uff1a\u5154\u5b50\u6bd4\u4e4c\u9f9f\u5feb\u4e00\u500d\uff0c\u540c\u8d77\u70b9\u540c\u65f6\u5f00\u59cb\uff0c\u5f53\u5154\u5b50\u201c\u8ffd\u4e0a\u201d\u4e4c\u9f9f\u65f6\uff0c\u5154\u5b50\u4e00\u5b9a\u8dd1\u4e86\u521a\u597d\u4e00\u5708\u3002 brent\u5224\u73af(\u66f4\u9ad8\u6548)","title":"\u601d\u8def"},{"location":"numbertheory/numbertheory/#kuangbin","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n - 1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; } //********************************************** // pollard_rho \u7b97\u6cd5\u8fdb\u884c\u8d28\u56e0\u7d20\u5206\u89e3 //********************************************* ll factor [ 100 ]; //\u8d28\u56e0\u7d20\u5206\u89e3\u7ed3\u679c\uff08\u521a\u8fd4\u56de\u65f6\u65f6\u65e0\u5e8f\u7684\uff09 int tol ; //\u8d28\u56e0\u7d20\u7684\u4e2a\u6570\uff0c\u7f16\u53f7 0\uff5etol-1 ll gcd ( ll a , ll b ){ ll t ; while ( b ){ t = a ; a = b ; b = t % b ; } if ( a >= 0 ) return a ; else return - a ; } //\u627e\u51fa\u4e00\u4e2a\u56e0\u5b50 ll pollard_rho ( ll x , ll c ){ ll i = 1 , k = 2 ; srand ( time ( NULL )); ll x0 = rand () % ( x - 1 ) + 1 ; ll y = x0 ; while ( 1 ){ i ++ ; x0 = ( mult_mod ( x0 , x0 , x ) + c ) % x ; //\u4e0d\u65ad\u8c03\u6574x2 ll d = gcd ( y - x0 , x ); if ( d != 1 && d != x ) return d ; //\u627e\u5230\u56e0\u5b50\uff0c\u8fd4\u56de if ( y == x0 ) return x ; //\u5224\u5708 \u51fa\u73b0\u5faa\u73af\uff0c\u8fd4\u56de if ( i == k ){ y = x0 ; k += k ;} } } // \u5bf9 n \u8fdb\u884c\u7d20\u56e0\u5b50\u5206\u89e3\uff0c\u5b58\u5165 factor. k \u8bbe\u7f6e\u4e3a 107 \u5de6\u53f3\u5373\u53ef // \u5982\u679cn \u672c\u8eab\u5c31\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5c06 n \u5b58\u653e\u5728 factor \u4fbf\u53ef\u7ed3\u675f\u5e76\u8fd4\u56de // \u5982\u679c n \u4e0d\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u901a\u8fc7 pollard_rho()\u51fd\u6570 \u627e\u5230 n \u7684\u4e00\u4e2a\u56e0\u5b50 p(\u4e0d\u4e00\u5b9a\u662f\u7d20\u56e0\u5b50)\uff0c\u9012\u5f52 findFac(p)\u548c findFac(n/p) void findfac ( ll n , int k ){ if ( n == 1 ) return ; //\u9012\u5f52\u51fa\u53e3 if ( Miller_Rabin ( n )) { factor [ tol ++ ] = n ; return ; } ll p = n ; int c = k ; //\u503c\u53d8\u5316\uff0c\u9632\u6b62\u6b7b\u5faa\u73af while ( p >= n ) // \u6539\u53d8\u5e38\u6570c\uff0c\u4e0d\u65ad\u627e\u56e0\u5b50\uff0c\u8fd4\u56den\u8bf4\u660e\u6ca1\u627e\u5230 p = pollard_rho ( p , c -- ); findfac ( p , k ); findfac ( n / p , k ); } \u6d1b\u8c37 P4718\u3010\u6a21\u677f\u3011Pollard-Rho\u7b97\u6cd5 TLE-\u9898\u89e3\u7684\u535a\u5ba2\u4e2d\u6709\u4e00\u6b65\u6b65\u4f18\u5316\u7684\u8fc7\u7a0b","title":"kuangbin\u7684\u6a21\u677f"},{"location":"numbertheory/numbertheory/#_8","text":"","title":"\u6b27\u62c9\u964d\u5e42"},{"location":"numbertheory/numbertheory/#_9","text":"\u7ed9\u4e09\u4e2a\u6b63\u6574\u6570\uff0c a,m,b a,m,b \uff0c\u9700\u8981\u6c42\uff1a a^b mod m a^b mod m \u6570\u636e\u8303\u56f4\uff1a 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 \u6307\u6570\u7206\u70b8","title":"\u80cc\u666f"},{"location":"numbertheory/numbertheory/#_10","text":"\u6b27\u62c9\u5b9a\u7406\uff1a a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 \u62d3\u5c55\u6b27\u62c9\u964d\u5e42 a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p \u5047\u8bbe k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) \uff0c\u5219 a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) \u6b27\u62c9\u964d\u5e42\u516c\u5f0f\u7684\u8bc1\u660e","title":"\u7406\u8bba\u4f9d\u636e"},{"location":"numbertheory/numbertheory/#_11","text":"\u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 long long eular ( long long n ){ long long ans = n ; for ( int i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ ans -= ans / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) ans \u2212 = ans / n ; return ans ; } \u62d3\u5c55\u6b27\u62c9\u51fd\u6570 \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8bfb\u5165\u5927\u6570\uff0c\u5904\u7406\u5f97\u5230 bmod\\varphi(p) bmod\\varphi(p) \u9700\u8981\u5224\u65ad b b \u548c \\varphi(p) \\varphi(p) \u7684\u5927\u5c0f\uff0c\u5426\u5219\u4f1a\u51fa\u9519 \u6d1b\u8c37 P5091 \u6a21\u677f\u9898 1 2 3 4 5 6 7 8 9 // char b[maxn] ll ans = 0 ; c = eular ( p ); ll len = strlen ( b ); for ( ll i = 0 ; i < len ; i ++ ) ans = ( ans * 10 + b [ i ] - '0' ) % c ; ans += p ; // \u5feb\u901f\u5e42\u8ba1\u7b97 a\u662f\u5e95\u6570\uff0cans\u662f\u6307\u6570\uff0cp\u662f\u6a21\u6570 qPow ( a , ans , p );","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"numbertheory/numbertheory/#_12","text":"\u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n) \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n)","title":"\u6b27\u62c9\u51fd\u6570\u5e38\u7528\u6027\u8d28\u548c\u516c\u5f0f"},{"location":"numbertheory/numbertheory/#rsa","text":"","title":"RSA\uff1a\u516c\u94a5\u5bc6\u7801\u7b97\u6cd5"},{"location":"numbertheory/numbertheory/#_13","text":"\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n","title":"\u7b97\u6cd5\u6d41\u7a0b"},{"location":"numbertheory/numbertheory/#_14","text":"\u6c42\u9006\u5143(\u6b27\u62c9\u5b9a\u7406/\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97) + \u5feb\u901f\u5e42 \u82e5(a*x)%mod=1\uff0c\u5219x\u662f\u6b63\u6574\u6570a\u5728\u6a21mod\u4e0b\u7684\u9006\u5143 \u65b9\u6cd5 \u9650\u5b9a \u65f6\u95f4\u590d\u6742\u5ea6 \u7ebf\u6027\u6253\u8868\u6cd5 \u53ea\u8981\u6c42mod\u662f\u8d28\u6570 O(n) \u8d39\u9a6c\u5c0f\u5b9a\u7406 mod\u662f\u8d28\u6570\u4e14\u4e0ea\u4e92\u8d28\uff0c\u5feb\u901f\u5e42\u4f18\u5316 O(log(n)) \u6b27\u62c9\u5b9a\u7406 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28\uff0c\u9700\u8981\u6b27\u62c9\u51fd\u6570\u4e0e\u5feb\u901f\u5e42 O(sqrt(n)+log(n)) \u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28 O(log(n))","title":"\u77e5\u8bc6\u70b9"},{"location":"numbertheory/numbertheory/#_15","text":"","title":"\u62d3\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"numbertheory/numbertheory/#_16","text":"\u97e9\u4fe1\u70b9\u5175\uff0c\u4e09\u4e2a\u4e09\u4e2a\u4e00\u6392\u5c111\u4e2a\u4eba\uff0c\u4e94\u4e2a\u4e94\u4e2a\u4e00\u6392\u53c8\u5c111\u4e2a\u4eba\uff0c\u4e03\u4e2a\u4e03\u4e2a\u4e00\u6392\u8fd8\u5c111\u4e2a\u4eba \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) ... ... x\u2261a_k (mod n_k) x\u2261a_k (mod n_k) \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"numbertheory/numbertheory/#_17","text":"","title":"\u6a21\u6570\u4e24\u4e24\u4e0d\u4e92\u8d28"},{"location":"numbertheory/numbertheory/#_18","text":"\u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b \u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u6d1b\u8c37 P4777 \u6a21\u677f\u9898","title":"\u601d\u8def"},{"location":"numbertheory/numbertheory/#_19","text":"x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n","title":"\u6c42\u89e3\u8fc7\u7a0b"},{"location":"numbertheory/numbertheory/#_20","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 typedef long long ll ; ll exgcd ( ll a , ll b , ll & x , ll & y ){ if ( a == 0 && b == 0 ) return - 1 ; if ( b == 0 ){ x = 1 ; y = 0 ; return a ;} ll d = exgcd ( b , a % b , y , x ); y -= a / b * x ; return d ; } ll excrt (){ ll a1 = b [ 0 ], n1 = a [ 0 ], a2 , n2 , d , x , y , gcd ; //\u4f59\u6570 b[] \u9664\u6570 a[] // \u8fd4\u56de\u7684\u662f\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff0c\u6709\u4e9b\u9898\u76ee\u9700\u8981\u7279\u5224 //\u82e5\u5f53\u4f59\u6570\u4e3a0\u7684\u65f6\u5019 \u9898\u76ee\u8981\u6c42\u6c42\u6b63\u6574\u6570 \u6240\u4ee50\u4e0d\u7b97\u5728\u5185\uff0c\u5e94\u8be5\u52a0\u4e0a\u4e0b\u9762\u7684\u6ce8\u91ca\uff0c\u5373\u4f59\u6570\u7b49\u4e8e\u9664\u6570\uff0c\u540c\u7406\u540e\u9762\u7684\u677f\u5b50 //if(a1==0)a1=a[0] for ( int i = 1 ; i < n ; i ++ ){ a2 = b [ i ]; n2 = a [ i ]; d = a2 - a1 ; gcd = exgcd ( n1 , n2 , x , y ); if ( d % gcd ) return - 1 ; x = (( x * d / gcd ) % ( n2 / gcd ) + ( n2 / gcd )) % ( n2 / gcd ); a1 = x * n1 + a1 ; n1 = n1 * n2 / gcd ; } return a1 ; }","title":"\u6a21\u677f[\u4e0d\u552f\u4e00]"},{"location":"numbertheory/numbertheory/#_21","text":"\u8d39\u9a6c\u5927\u5b9a\u7406\uff1a \u5f53\u6574\u6570n >2\u65f6\uff0c \u5f53\u6574\u6570n >2\u65f6\uff0c \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5b9e\u6570\u57df\u4e0d\u53ef\u62c6\u5206\u591a\u9879\u5f0f\uff1a \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u827e\u68ee\u65af\u5766\u56e0\u5224\u522b\u6cd5\uff1a\u6709\u7406\u6570\u57df\u4e0d\u53ef\u7ea6\uff0c\u5373\u4e00\u5b9a\u8981\u6574\u6570\u89e3 \u52fe\u80a1\u6570 \u4efb\u610f\u5927\u4e8e2\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u6570\u6784\u6210\u52fe\u80a1\u6570 \u672c\u539f\u52fe\u80a1\u6570 \u56db\u8272\u731c\u60f3 \u5eb7\u5a01\u5e38\u6570 \u65e5\u671f\u8f6c\u5316\u6210\u661f\u671f \u8521\u52d2\u516c\u5f0f \u57fa\u59c6\u62c9\u5c14\u68ee\u8ba1\u7b97\u516c\u5f0f \u65af\u7279\u6797\u516c\u5f0f - \u9636\u4e58","title":"\u5b9a\u7406&amp;\u731c\u60f3&amp;\u516c\u5f0f"}]}